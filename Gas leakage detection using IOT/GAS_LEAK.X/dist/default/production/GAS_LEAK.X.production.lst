

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Apr 05 16:55:05 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.42
    37                           ; Generated 13/04/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F877A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130                           
   131                           	psect	strings
   132  045A                     __pstrings:	
   133  045A                     stringtab:	
   134  045A                     __stringtab:	
   135                           
   136                           ;	String table - string pointers are 1 byte each
   137  045A  1BFF               	btfsc	btemp+1,7
   138  045B  2C64               	ljmp	stringcode
   139  045C  1383               	bcf	3,7
   140  045D  187F               	btfsc	btemp+1,0
   141  045E  1783               	bsf	3,7
   142  045F  0800               	movf	0,w
   143  0460  0A84               	incf	4,f
   144  0461  1903               	skipnz
   145  0462  0AFF               	incf	btemp+1,f
   146  0463  0008               	return
   147  0464                     stringcode:	
   148  0464                     stringdir:	
   149  0464  3004               	movlw	high stringdir
   150  0465  008A               	movwf	10
   151  0466  0804               	movf	4,w
   152  0467  0A84               	incf	4,f
   153  0468  0782               	addwf	2,f
   154  0469                     __stringbase:	
   155  0469  3400               	retlw	0
   156  046A                     __end_of__stringtab:	
   157  046A                     _dpowers:	
   158  046A  3401               	retlw	1
   159  046B  3400               	retlw	0
   160  046C  340A               	retlw	10
   161  046D  3400               	retlw	0
   162  046E  3464               	retlw	100
   163  046F  3400               	retlw	0
   164  0470  34E8               	retlw	232
   165  0471  3403               	retlw	3
   166  0472  3410               	retlw	16
   167  0473  3427               	retlw	39
   168  0474                     __end_of_dpowers:	
   169  000B                     _INTCON	set	11
   170  0001                     _TMR0	set	1
   171  0010                     _T1CONbits	set	16
   172  000C                     _PIR1bits	set	12
   173  000E                     _TMR1L	set	14
   174  000F                     _TMR1H	set	15
   175  001E                     _ADRESH	set	30
   176  001F                     _ADCON0	set	31
   177  001A                     _RCREG	set	26
   178  0019                     _TXREG	set	25
   179  0060                     _TMR1IF	set	96
   180  00FA                     _GO_nDONE	set	250
   181  0065                     _RCIF	set	101
   182  00C1                     _OERR	set	193
   183  0064                     _TXIF	set	100
   184  00C4                     _CREN	set	196
   185  00C7                     _SPEN	set	199
   186  0043                     _RD3	set	67
   187  0042                     _RD2	set	66
   188  0047                     _RD7	set	71
   189  0046                     _RD6	set	70
   190  0045                     _RD5	set	69
   191  0044                     _RD4	set	68
   192  0081                     _OPTION_REG	set	129
   193  0085                     _TRISA	set	133
   194  0088                     _TRISD	set	136
   195  008C                     _PIE1bits	set	140
   196  009E                     _ADRESL	set	158
   197  009F                     _ADCON1	set	159
   198  0099                     _SPBRG	set	153
   199  0437                     _TRISB7	set	1079
   200  04C5                     _TXEN	set	1221
   201  04C4                     _SYNC	set	1220
   202  04C2                     _BRGH	set	1218
   203  043F                     _TRISC7	set	1087
   204  043E                     _TRISC6	set	1086
   205  0474                     STR_4:	
   206  0474  3448               	retlw	72	;'H'
   207  0475  3449               	retlw	73	;'I'
   208  0476  3447               	retlw	71	;'G'
   209  0477  3448               	retlw	72	;'H'
   210  0478  3420               	retlw	32	;' '
   211  0479  3454               	retlw	84	;'T'
   212  047A  3445               	retlw	69	;'E'
   213  047B  344D               	retlw	77	;'M'
   214  047C  3450               	retlw	80	;'P'
   215  047D  3420               	retlw	32	;' '
   216  047E  3420               	retlw	32	;' '
   217  047F  3420               	retlw	32	;' '
   218  0480  3420               	retlw	32	;' '
   219  0481  3420               	retlw	32	;' '
   220  0482  3420               	retlw	32	;' '
   221  0483  3420               	retlw	32	;' '
   222  0484  3400               	retlw	0
   223  0485                     STR_7:	
   224  0485  3448               	retlw	72	;'H'
   225  0486  3449               	retlw	73	;'I'
   226  0487  3447               	retlw	71	;'G'
   227  0488  3448               	retlw	72	;'H'
   228  0489  3420               	retlw	32	;' '
   229  048A  344D               	retlw	77	;'M'
   230  048B  3445               	retlw	69	;'E'
   231  048C  3454               	retlw	84	;'T'
   232  048D  3448               	retlw	72	;'H'
   233  048E  3441               	retlw	65	;'A'
   234  048F  344E               	retlw	78	;'N'
   235  0490  3445               	retlw	69	;'E'
   236  0491  3420               	retlw	32	;' '
   237  0492  3420               	retlw	32	;' '
   238  0493  3420               	retlw	32	;' '
   239  0494  3420               	retlw	32	;' '
   240  0495  3400               	retlw	0
   241  0496                     STR_1:	
   242  0496  3420               	retlw	32	;' '
   243  0497  3448               	retlw	72	;'H'
   244  0498  3461               	retlw	97	;'a'
   245  0499  347A               	retlw	122	;'z'
   246  049A  3461               	retlw	97	;'a'
   247  049B  3472               	retlw	114	;'r'
   248  049C  3464               	retlw	100	;'d'
   249  049D  346F               	retlw	111	;'o'
   250  049E  3475               	retlw	117	;'u'
   251  049F  3473               	retlw	115	;'s'
   252  04A0  3420               	retlw	32	;' '
   253  04A1  3467               	retlw	103	;'g'
   254  04A2  3461               	retlw	97	;'a'
   255  04A3  3473               	retlw	115	;'s'
   256  04A4  3420               	retlw	32	;' '
   257  04A5  3420               	retlw	32	;' '
   258  04A6  3400               	retlw	0
   259  04A7                     STR_3:	
   260  04A7  3444               	retlw	68	;'D'
   261  04A8  3465               	retlw	101	;'e'
   262  04A9  3474               	retlw	116	;'t'
   263  04AA  3465               	retlw	101	;'e'
   264  04AB  3463               	retlw	99	;'c'
   265  04AC  3474               	retlw	116	;'t'
   266  04AD  3469               	retlw	105	;'i'
   267  04AE  346F               	retlw	111	;'o'
   268  04AF  346E               	retlw	110	;'n'
   269  04B0  3420               	retlw	32	;' '
   270  04B1  3462               	retlw	98	;'b'
   271  04B2  3479               	retlw	121	;'y'
   272  04B3  3420               	retlw	32	;' '
   273  04B4  3449               	retlw	73	;'I'
   274  04B5  344F               	retlw	79	;'O'
   275  04B6  3454               	retlw	84	;'T'
   276  04B7  3400               	retlw	0
   277  04B8                     STR_8:	
   278  04B8  344D               	retlw	77	;'M'
   279  04B9  3465               	retlw	101	;'e'
   280  04BA  3474               	retlw	116	;'t'
   281  04BB  3468               	retlw	104	;'h'
   282  04BC  3461               	retlw	97	;'a'
   283  04BD  346E               	retlw	110	;'n'
   284  04BE  3465               	retlw	101	;'e'
   285  04BF  3420               	retlw	32	;' '
   286  04C0  343D               	retlw	61	;'='
   287  04C1  3420               	retlw	32	;' '
   288  04C2  3400               	retlw	0
   289  04C3                     STR_5:	
   290  04C3  3454               	retlw	84	;'T'
   291  04C4  3445               	retlw	69	;'E'
   292  04C5  344D               	retlw	77	;'M'
   293  04C6  3450               	retlw	80	;'P'
   294  04C7  3420               	retlw	32	;' '
   295  04C8  343A               	retlw	58	;':'
   296  04C9  3420               	retlw	32	;' '
   297  04CA  3400               	retlw	0
   298  04CB                     STR_6:	
   299  04CB  3425               	retlw	37	;'%'
   300  04CC  3464               	retlw	100	;'d'
   301  04CD  3420               	retlw	32	;' '
   302  04CE  3400               	retlw	0
   303  0496                     
   304                           ; #config settings
   305  0000                     
   306                           	psect	cinit
   307  0015                     start_initialization:	
   308  0015                     __initialization:	
   309                           
   310                           ; Clear objects allocated to COMMON
   311  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   312  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   313  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   314  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   315                           
   316                           ; Clear objects allocated to BANK0
   317  0019  1383               	bcf	3,7	;select IRP bank0
   318  001A  304C               	movlw	low __pbssBANK0
   319  001B  0084               	movwf	4
   320  001C  3066               	movlw	low (__pbssBANK0+26)
   321  001D  120A  118A  27DE   	fcall	clear_ram0
   322  0020                     end_of_initialization:	
   323                           ;End of C runtime variable initialization code
   324                           
   325  0020                     __end_of__initialization:	
   326  0020  0183               	clrf	3
   327  0021  120A  118A  2824   	ljmp	_main	;jump to C main() function
   328                           
   329                           	psect	bssCOMMON
   330  0076                     __pbssCOMMON:	
   331  0076                     _temp:	
   332  0076                     	ds	2
   333  0078                     _count:	
   334  0078                     	ds	2
   335                           
   336                           	psect	bssBANK0
   337  004C                     __pbssBANK0:	
   338  004C                     _gas:	
   339  004C                     	ds	2
   340  004E                     _b:	
   341  004E                     	ds	2
   342  0050                     _a:	
   343  0050                     	ds	2
   344  0052                     _g:	
   345  0052                     	ds	10
   346  005C                     _t:	
   347  005C                     	ds	10
   348                           
   349                           	psect	clrtext
   350  07DE                     clear_ram0:	
   351                           ;	Called with FSR containing the base address, and
   352                           ;	W with the last address+1
   353                           
   354  07DE  0064               	clrwdt	;clear the watchdog before getting into this loop
   355  07DF                     clrloop0:	
   356  07DF  0180               	clrf	0	;clear RAM location pointed to by FSR
   357  07E0  0A84               	incf	4,f	;increment pointer
   358  07E1  0604               	xorwf	4,w	;XOR with final address
   359  07E2  1903               	btfsc	3,2	;have we reached the end yet?
   360  07E3  3400               	retlw	0	;all done for this memory range, return
   361  07E4  0604               	xorwf	4,w	;XOR again to restore value
   362  07E5  2FDF               	goto	clrloop0	;do the next byte
   363                           
   364                           	psect	cstackCOMMON
   365  0070                     __pcstackCOMMON:	
   366  0070                     ?_Lcd_Port:	
   367  0070                     ?_Lcd_Cmd:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_Lcd_Init:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_Lcd_Write_Char:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_uart_init:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_uart_txc:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_uart_txs:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_adc_init:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_timer1_init:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_main:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_T1:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ??_T1:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_Lcd_Clear:	
   401                           ; 1 bytes @ 0x0
   402                           
   403                           
   404                           ; 2 bytes @ 0x0
   405  0070                     	ds	4
   406  0074                     ??_Lcd_Port:	
   407  0074                     ??_uart_init:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0074                     ??_uart_txc:	
   411                           ; 1 bytes @ 0x4
   412                           
   413  0074                     ??_uart_txs:	
   414                           ; 1 bytes @ 0x4
   415                           
   416  0074                     ??_adc_init:	
   417                           ; 1 bytes @ 0x4
   418                           
   419  0074                     ??_timer1_init:	
   420                           ; 1 bytes @ 0x4
   421                           
   422  0074                     ??___lwdiv:	
   423                           ; 1 bytes @ 0x4
   424                           
   425  0074                     ??___lwtoft:	
   426                           ; 1 bytes @ 0x4
   427                           
   428  0074                     ?_adc_read:	
   429                           ; 1 bytes @ 0x4
   430                           
   431  0074                     Lcd_Port@a:	
   432                           ; 2 bytes @ 0x4
   433                           
   434                           
   435                           ; 1 bytes @ 0x4
   436  0074                     	ds	1
   437  0075                     ??_Lcd_Write_Char:	
   438  0075                     ??___lwmod:	
   439                           ; 1 bytes @ 0x5
   440                           
   441  0075                     Lcd_Cmd@a:	
   442                           ; 1 bytes @ 0x5
   443                           
   444  0075                     uart_txs@st:	
   445                           ; 1 bytes @ 0x5
   446                           
   447                           
   448                           ; 1 bytes @ 0x5
   449  0075                     	ds	1
   450  0076                     ??_Lcd_Clear:	
   451                           
   452                           	psect	cstackBANK0
   453  0020                     __pcstackBANK0:	
   454                           ; 1 bytes @ 0x6
   455                           
   456  0020                     ??_Lcd_Cmd:	
   457  0020                     ??_adc_read:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0020                     ?___lwdiv:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0020                     ?___ftpack:	
   464                           ; 2 bytes @ 0x0
   465                           
   466  0020                     Lcd_Write_Char@temp:	
   467                           ; 3 bytes @ 0x0
   468                           
   469  0020                     uart_txc@ch:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0020                     ___lwdiv@divisor:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0020                     ___ftpack@arg:	
   476                           ; 2 bytes @ 0x0
   477                           
   478                           
   479                           ; 3 bytes @ 0x0
   480  0020                     	ds	1
   481  0021                     Lcd_Write_Char@y:	
   482  0021                     uart_txc@i:	
   483                           ; 1 bytes @ 0x1
   484                           
   485                           
   486                           ; 2 bytes @ 0x1
   487  0021                     	ds	1
   488  0022                     ?_Lcd_Set_Cursor:	
   489  0022                     ??_Lcd_Init:	
   490                           ; 1 bytes @ 0x2
   491                           
   492  0022                     Lcd_Set_Cursor@b:	
   493                           ; 1 bytes @ 0x2
   494                           
   495  0022                     Lcd_Write_Char@a:	
   496                           ; 1 bytes @ 0x2
   497                           
   498  0022                     adc_read@channel:	
   499                           ; 1 bytes @ 0x2
   500                           
   501  0022                     ___lwdiv@dividend:	
   502                           ; 1 bytes @ 0x2
   503                           
   504                           
   505                           ; 2 bytes @ 0x2
   506  0022                     	ds	1
   507  0023                     ??_Lcd_Set_Cursor:	
   508  0023                     ?_Lcd_Write_String:	
   509                           ; 1 bytes @ 0x3
   510                           
   511  0023                     ___ftpack@exp:	
   512                           ; 1 bytes @ 0x3
   513                           
   514  0023                     Lcd_Write_String@a:	
   515                           ; 1 bytes @ 0x3
   516                           
   517                           
   518                           ; 2 bytes @ 0x3
   519  0023                     	ds	1
   520  0024                     ___ftpack@sign:	
   521  0024                     ___lwdiv@counter:	
   522                           ; 1 bytes @ 0x4
   523                           
   524                           
   525                           ; 1 bytes @ 0x4
   526  0024                     	ds	1
   527  0025                     ??___ftpack:	
   528  0025                     ??_Lcd_Write_String:	
   529                           ; 1 bytes @ 0x5
   530                           
   531  0025                     Lcd_Set_Cursor@a:	
   532                           ; 1 bytes @ 0x5
   533                           
   534  0025                     ___lwdiv@quotient:	
   535                           ; 1 bytes @ 0x5
   536                           
   537                           
   538                           ; 2 bytes @ 0x5
   539  0025                     	ds	1
   540  0026                     Lcd_Set_Cursor@z:	
   541                           
   542                           ; 1 bytes @ 0x6
   543  0026                     	ds	1
   544  0027                     ?___lwmod:	
   545  0027                     Lcd_Set_Cursor@y:	
   546                           ; 2 bytes @ 0x7
   547                           
   548  0027                     ___lwmod@divisor:	
   549                           ; 1 bytes @ 0x7
   550                           
   551                           
   552                           ; 2 bytes @ 0x7
   553  0027                     	ds	1
   554  0028                     ?___lwtoft:	
   555  0028                     Lcd_Set_Cursor@temp:	
   556                           ; 3 bytes @ 0x8
   557                           
   558  0028                     Lcd_Write_String@i:	
   559                           ; 1 bytes @ 0x8
   560                           
   561  0028                     ___lwtoft@c:	
   562                           ; 2 bytes @ 0x8
   563                           
   564                           
   565                           ; 2 bytes @ 0x8
   566  0028                     	ds	1
   567  0029                     ___lwmod@dividend:	
   568                           
   569                           ; 2 bytes @ 0x9
   570  0029                     	ds	2
   571  002B                     ?___ftmul:	
   572  002B                     ___lwmod@counter:	
   573                           ; 3 bytes @ 0xB
   574                           
   575  002B                     ___ftmul@f1:	
   576                           ; 1 bytes @ 0xB
   577                           
   578                           
   579                           ; 3 bytes @ 0xB
   580  002B                     	ds	1
   581  002C                     ?_sprintf:	
   582  002C                     sprintf@f:	
   583                           ; 2 bytes @ 0xC
   584                           
   585                           
   586                           ; 1 bytes @ 0xC
   587  002C                     	ds	2
   588  002E                     ___ftmul@f2:	
   589                           
   590                           ; 3 bytes @ 0xE
   591  002E                     	ds	1
   592  002F                     ??_sprintf:	
   593                           
   594                           ; 1 bytes @ 0xF
   595  002F                     	ds	2
   596  0031                     ??___ftmul:	
   597                           
   598                           ; 1 bytes @ 0x11
   599  0031                     	ds	1
   600  0032                     sprintf@ap:	
   601                           
   602                           ; 1 bytes @ 0x12
   603  0032                     	ds	1
   604  0033                     sprintf@flag:	
   605                           
   606                           ; 1 bytes @ 0x13
   607  0033                     	ds	1
   608  0034                     sprintf@prec:	
   609                           
   610                           ; 1 bytes @ 0x14
   611  0034                     	ds	1
   612  0035                     ___ftmul@exp:	
   613  0035                     sprintf@val:	
   614                           ; 1 bytes @ 0x15
   615                           
   616                           
   617                           ; 2 bytes @ 0x15
   618  0035                     	ds	1
   619  0036                     ___ftmul@f3_as_product:	
   620                           
   621                           ; 3 bytes @ 0x16
   622  0036                     	ds	1
   623  0037                     sprintf@sp:	
   624                           
   625                           ; 1 bytes @ 0x17
   626  0037                     	ds	1
   627  0038                     sprintf@c:	
   628                           
   629                           ; 1 bytes @ 0x18
   630  0038                     	ds	1
   631  0039                     ___ftmul@cntr:	
   632                           
   633                           ; 1 bytes @ 0x19
   634  0039                     	ds	1
   635  003A                     ___ftmul@sign:	
   636                           
   637                           ; 1 bytes @ 0x1A
   638  003A                     	ds	1
   639  003B                     ?___fttol:	
   640  003B                     ___fttol@f1:	
   641                           ; 4 bytes @ 0x1B
   642                           
   643                           
   644                           ; 3 bytes @ 0x1B
   645  003B                     	ds	4
   646  003F                     ??___fttol:	
   647                           
   648                           ; 1 bytes @ 0x1F
   649  003F                     	ds	4
   650  0043                     ___fttol@sign1:	
   651                           
   652                           ; 1 bytes @ 0x23
   653  0043                     	ds	1
   654  0044                     ___fttol@lval:	
   655                           
   656                           ; 4 bytes @ 0x24
   657  0044                     	ds	4
   658  0048                     ___fttol@exp1:	
   659                           
   660                           ; 1 bytes @ 0x28
   661  0048                     	ds	1
   662  0049                     ??_main:	
   663                           
   664                           ; 1 bytes @ 0x29
   665  0049                     	ds	3
   666                           
   667                           	psect	maintext
   668  0024                     __pmaintext:	
   669 ;;
   670 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   671 ;;
   672 ;; *************** function _main *****************
   673 ;; Defined at:
   674 ;;		line 89 in file "GAS_LEAK.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : B00/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   688 ;;      Params:         0       0       0       0       0
   689 ;;      Locals:         0       0       0       0       0
   690 ;;      Temps:          0       3       0       0       0
   691 ;;      Totals:         0       3       0       0       0
   692 ;;Total ram usage:        3 bytes
   693 ;; Hardware stack levels required when called:    4
   694 ;; This function calls:
   695 ;;		_Lcd_Clear
   696 ;;		_Lcd_Init
   697 ;;		_Lcd_Set_Cursor
   698 ;;		_Lcd_Write_String
   699 ;;		___ftmul
   700 ;;		___fttol
   701 ;;		___lwtoft
   702 ;;		_adc_init
   703 ;;		_adc_read
   704 ;;		_sprintf
   705 ;;		_timer1_init
   706 ;;		_uart_init
   707 ;;		_uart_txc
   708 ;;		_uart_txs
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           
   715                           ;psect for function _main
   716  0024                     _main:	
   717                           
   718                           ;GAS_LEAK.c: 90: TRISD = 0x00;
   719                           
   720                           ;incstack = 0
   721                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   722  0024  1683               	bsf	3,5	;RP0=1, select bank1
   723  0025  1303               	bcf	3,6	;RP1=0, select bank1
   724  0026  0188               	clrf	8	;volatile
   725                           
   726                           ;GAS_LEAK.c: 91: TRISA = 0xFF;
   727  0027  30FF               	movlw	255
   728  0028  0085               	movwf	5	;volatile
   729                           
   730                           ;GAS_LEAK.c: 92: TRISB7 = 1;
   731  0029  1786               	bsf	6,7	;volatile
   732                           
   733                           ;GAS_LEAK.c: 93: TRISA = 0xFF;
   734  002A  30FF               	movlw	255
   735  002B  0085               	movwf	5	;volatile
   736                           
   737                           ;GAS_LEAK.c: 94: timer1_init();
   738  002C  120A  118A  27BB  120A  118A  	fcall	_timer1_init
   739                           
   740                           ;GAS_LEAK.c: 95: OPTION_REG = 0b00101000;
   741  0031  3028               	movlw	40
   742  0032  1683               	bsf	3,5	;RP0=1, select bank1
   743  0033  1303               	bcf	3,6	;RP1=0, select bank1
   744  0034  0081               	movwf	1	;volatile
   745                           
   746                           ;GAS_LEAK.c: 96: TMR0 = 0;
   747  0035  1283               	bcf	3,5	;RP0=0, select bank0
   748  0036  1303               	bcf	3,6	;RP1=0, select bank0
   749  0037  0181               	clrf	1	;volatile
   750                           
   751                           ;GAS_LEAK.c: 97: INTCON = 0xC0;
   752  0038  30C0               	movlw	192
   753  0039  008B               	movwf	11	;volatile
   754                           
   755                           ;GAS_LEAK.c: 98: Lcd_Write_String(" Hazardous gas  ");
   756  003A  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   757  003B  00A3               	movwf	Lcd_Write_String@a
   758  003C  3080               	movlw	128
   759  003D  00A4               	movwf	Lcd_Write_String@a+1
   760  003E  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
   761                           
   762                           ;GAS_LEAK.c: 99: uart_init();
   763  0043  120A  118A  27A9  120A  118A  	fcall	_uart_init
   764                           
   765                           ;GAS_LEAK.c: 100: Lcd_Init();
   766  0048  120A  118A  253D  120A  118A  	fcall	_Lcd_Init
   767                           
   768                           ;GAS_LEAK.c: 101: adc_init();
   769  004D  120A  118A  27D5  120A  118A  	fcall	_adc_init
   770                           
   771                           ;GAS_LEAK.c: 102: Lcd_Clear();
   772  0052  120A  118A  27CA  120A  118A  	fcall	_Lcd_Clear
   773                           
   774                           ;GAS_LEAK.c: 103: Lcd_Set_Cursor(1,1);
   775  0057  1283               	bcf	3,5	;RP0=0, select bank0
   776  0058  1303               	bcf	3,6	;RP1=0, select bank0
   777  0059  01A2               	clrf	Lcd_Set_Cursor@b
   778  005A  0AA2               	incf	Lcd_Set_Cursor@b,f
   779  005B  3001               	movlw	1
   780  005C  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
   781                           
   782                           ;GAS_LEAK.c: 104: Lcd_Write_String(" Hazardous gas  ");
   783  0061  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   784  0062  1283               	bcf	3,5	;RP0=0, select bank0
   785  0063  1303               	bcf	3,6	;RP1=0, select bank0
   786  0064  00A3               	movwf	Lcd_Write_String@a
   787  0065  3080               	movlw	128
   788  0066  00A4               	movwf	Lcd_Write_String@a+1
   789  0067  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
   790                           
   791                           ;GAS_LEAK.c: 105: Lcd_Set_Cursor(2,1);
   792  006C  1283               	bcf	3,5	;RP0=0, select bank0
   793  006D  1303               	bcf	3,6	;RP1=0, select bank0
   794  006E  01A2               	clrf	Lcd_Set_Cursor@b
   795  006F  0AA2               	incf	Lcd_Set_Cursor@b,f
   796  0070  3002               	movlw	2
   797  0071  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
   798                           
   799                           ;GAS_LEAK.c: 106: Lcd_Write_String("Detection by IOT");
   800  0076  303E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   801  0077  1283               	bcf	3,5	;RP0=0, select bank0
   802  0078  1303               	bcf	3,6	;RP1=0, select bank0
   803  0079  00A3               	movwf	Lcd_Write_String@a
   804  007A  3080               	movlw	128
   805  007B  00A4               	movwf	Lcd_Write_String@a+1
   806  007C  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
   807                           
   808                           ;GAS_LEAK.c: 107: _delay((unsigned long)((3000)*(20000000/4000.0)));
   809  0081  304D               	movlw	77
   810  0082  1283               	bcf	3,5	;RP0=0, select bank0
   811  0083  1303               	bcf	3,6	;RP1=0, select bank0
   812  0084  00CB               	movwf	??_main+2
   813  0085  3019               	movlw	25
   814  0086  00CA               	movwf	??_main+1
   815  0087  304F               	movlw	79
   816  0088  00C9               	movwf	??_main
   817  0089                     u2267:	
   818  0089  0BC9               	decfsz	??_main,f
   819  008A  2889               	goto	u2267
   820  008B  0BCA               	decfsz	??_main+1,f
   821  008C  2889               	goto	u2267
   822  008D  0BCB               	decfsz	??_main+2,f
   823  008E  2889               	goto	u2267
   824                           
   825                           ;GAS_LEAK.c: 108: Lcd_Clear();
   826  008F  120A  118A  27CA  120A  118A  	fcall	_Lcd_Clear
   827  0094                     l1972:	
   828                           ;GAS_LEAK.c: 109: while(1){
   829                           
   830                           
   831                           ;GAS_LEAK.c: 110: temp = adc_read(0);
   832  0094  3000               	movlw	0
   833  0095  120A  118A  26DC  120A  118A  	fcall	_adc_read
   834  009A  0875               	movf	?_adc_read+1,w
   835  009B  00F7               	movwf	_temp+1
   836  009C  0874               	movf	?_adc_read,w
   837  009D  00F6               	movwf	_temp
   838                           
   839                           ;GAS_LEAK.c: 111: gas = adc_read(1);
   840  009E  3001               	movlw	1
   841  009F  120A  118A  26DC  120A  118A  	fcall	_adc_read
   842  00A4  0875               	movf	?_adc_read+1,w
   843  00A5  1283               	bcf	3,5	;RP0=0, select bank0
   844  00A6  1303               	bcf	3,6	;RP1=0, select bank0
   845  00A7  00CD               	movwf	_gas+1
   846  00A8  0874               	movf	?_adc_read,w
   847  00A9  00CC               	movwf	_gas
   848                           
   849                           ;GAS_LEAK.c: 112: temp = (float)temp * 0.4887;
   850  00AA  0877               	movf	_temp+1,w
   851  00AB  00A9               	movwf	___lwtoft@c+1
   852  00AC  0876               	movf	_temp,w
   853  00AD  00A8               	movwf	___lwtoft@c
   854  00AE  120A  118A  277C  120A  118A  	fcall	___lwtoft
   855  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   856  00B4  1303               	bcf	3,6	;RP1=0, select bank0
   857  00B5  0828               	movf	?___lwtoft,w
   858  00B6  00AE               	movwf	___ftmul@f2
   859  00B7  0829               	movf	?___lwtoft+1,w
   860  00B8  00AF               	movwf	___ftmul@f2+1
   861  00B9  082A               	movf	?___lwtoft+2,w
   862  00BA  00B0               	movwf	___ftmul@f2+2
   863  00BB  3037               	movlw	55
   864  00BC  00AB               	movwf	___ftmul@f1
   865  00BD  30FA               	movlw	250
   866  00BE  00AC               	movwf	___ftmul@f1+1
   867  00BF  303E               	movlw	62
   868  00C0  00AD               	movwf	___ftmul@f1+2
   869  00C1  120A  118A  22F9  120A  118A  	fcall	___ftmul
   870  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   871  00C7  1303               	bcf	3,6	;RP1=0, select bank0
   872  00C8  082B               	movf	?___ftmul,w
   873  00C9  00BB               	movwf	___fttol@f1
   874  00CA  082C               	movf	?___ftmul+1,w
   875  00CB  00BC               	movwf	___fttol@f1+1
   876  00CC  082D               	movf	?___ftmul+2,w
   877  00CD  00BD               	movwf	___fttol@f1+2
   878  00CE  120A  118A  23CC  120A  118A  	fcall	___fttol
   879  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   880  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   881  00D5  083C               	movf	?___fttol+1,w
   882  00D6  00F7               	movwf	_temp+1
   883  00D7  083B               	movf	?___fttol,w
   884  00D8  00F6               	movwf	_temp
   885                           
   886                           ;GAS_LEAK.c: 113: if(temp>=35){
   887  00D9  3000               	movlw	0
   888  00DA  0277               	subwf	_temp+1,w
   889  00DB  3023               	movlw	35
   890  00DC  1903               	skipnz
   891  00DD  0276               	subwf	_temp,w
   892  00DE  1C03               	skipc
   893  00DF  28EE               	goto	l1984
   894                           
   895                           ;GAS_LEAK.c: 114: Lcd_Set_Cursor(1,1);
   896  00E0  01A2               	clrf	Lcd_Set_Cursor@b
   897  00E1  0AA2               	incf	Lcd_Set_Cursor@b,f
   898  00E2  3001               	movlw	1
   899  00E3  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
   900                           
   901                           ;GAS_LEAK.c: 115: Lcd_Write_String("HIGH TEMP       ");
   902  00E8  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   903  00E9  1283               	bcf	3,5	;RP0=0, select bank0
   904  00EA  1303               	bcf	3,6	;RP1=0, select bank0
   905  00EB  00A3               	movwf	Lcd_Write_String@a
   906  00EC  3080               	movlw	128
   907  00ED  2924               	goto	L1
   908  00EE                     l1984:	
   909                           ;GAS_LEAK.c: 116: }
   910                           
   911                           
   912                           ;GAS_LEAK.c: 117: else{
   913                           ;GAS_LEAK.c: 118: Lcd_Set_Cursor(1,1);
   914  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   915  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   916  00F0  01A2               	clrf	Lcd_Set_Cursor@b
   917  00F1  0AA2               	incf	Lcd_Set_Cursor@b,f
   918  00F2  3001               	movlw	1
   919  00F3  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
   920                           
   921                           ;GAS_LEAK.c: 119: Lcd_Write_String("TEMP : ");
   922  00F8  305A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   923  00F9  1283               	bcf	3,5	;RP0=0, select bank0
   924  00FA  1303               	bcf	3,6	;RP1=0, select bank0
   925  00FB  00A3               	movwf	Lcd_Write_String@a
   926  00FC  3080               	movlw	128
   927  00FD  00A4               	movwf	Lcd_Write_String@a+1
   928  00FE  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
   929                           
   930                           ;GAS_LEAK.c: 120: Lcd_Set_Cursor(1,8);
   931  0103  3008               	movlw	8
   932  0104  1283               	bcf	3,5	;RP0=0, select bank0
   933  0105  1303               	bcf	3,6	;RP1=0, select bank0
   934  0106  00C9               	movwf	??_main
   935  0107  0849               	movf	??_main,w
   936  0108  00A2               	movwf	Lcd_Set_Cursor@b
   937  0109  3001               	movlw	1
   938  010A  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
   939                           
   940                           ;GAS_LEAK.c: 121: sprintf(t,"%d ",temp);
   941  010F  3062               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   942  0110  1283               	bcf	3,5	;RP0=0, select bank0
   943  0111  1303               	bcf	3,6	;RP1=0, select bank0
   944  0112  00C9               	movwf	??_main
   945  0113  0849               	movf	??_main,w
   946  0114  00AC               	movwf	sprintf@f
   947  0115  0877               	movf	_temp+1,w
   948  0116  00AE               	movwf	?_sprintf+2
   949  0117  0876               	movf	_temp,w
   950  0118  00AD               	movwf	?_sprintf+1
   951  0119  305C               	movlw	(low (_t| 0))& (0+255)
   952  011A  120A  118A  2223  120A  118A  	fcall	_sprintf
   953                           
   954                           ;GAS_LEAK.c: 122: Lcd_Write_String(t);
   955  011F  305C               	movlw	(low (_t| 0))& (0+255)
   956  0120  1283               	bcf	3,5	;RP0=0, select bank0
   957  0121  1303               	bcf	3,6	;RP1=0, select bank0
   958  0122  00A3               	movwf	Lcd_Write_String@a
   959  0123  3000               	movlw	0
   960  0124                     L1:	
   961  0124  00A4               	movwf	Lcd_Write_String@a+1
   962  0125  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
   963                           
   964                           ;GAS_LEAK.c: 123: }
   965                           ;GAS_LEAK.c: 124: if(gas >= 350){
   966  012A  3001               	movlw	1
   967  012B  1283               	bcf	3,5	;RP0=0, select bank0
   968  012C  1303               	bcf	3,6	;RP1=0, select bank0
   969  012D  024D               	subwf	_gas+1,w
   970  012E  305E               	movlw	94
   971  012F  1903               	skipnz
   972  0130  024C               	subwf	_gas,w
   973  0131  1C03               	skipc
   974  0132  2941               	goto	l1996
   975                           
   976                           ;GAS_LEAK.c: 125: Lcd_Set_Cursor(2,1);
   977  0133  01A2               	clrf	Lcd_Set_Cursor@b
   978  0134  0AA2               	incf	Lcd_Set_Cursor@b,f
   979  0135  3002               	movlw	2
   980  0136  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
   981                           
   982                           ;GAS_LEAK.c: 126: Lcd_Write_String("HIGH METHANE    ");
   983  013B  301C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   984  013C  1283               	bcf	3,5	;RP0=0, select bank0
   985  013D  1303               	bcf	3,6	;RP1=0, select bank0
   986  013E  00A3               	movwf	Lcd_Write_String@a
   987  013F  3080               	movlw	128
   988  0140  2977               	goto	L2
   989  0141                     l1996:	
   990                           ;GAS_LEAK.c: 127: }
   991                           
   992                           
   993                           ;GAS_LEAK.c: 128: else{
   994                           ;GAS_LEAK.c: 129: Lcd_Set_Cursor(2,1);
   995  0141  1283               	bcf	3,5	;RP0=0, select bank0
   996  0142  1303               	bcf	3,6	;RP1=0, select bank0
   997  0143  01A2               	clrf	Lcd_Set_Cursor@b
   998  0144  0AA2               	incf	Lcd_Set_Cursor@b,f
   999  0145  3002               	movlw	2
  1000  0146  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
  1001                           
  1002                           ;GAS_LEAK.c: 130: Lcd_Write_String("Methane = ");
  1003  014B  304F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1004  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1005  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1006  014E  00A3               	movwf	Lcd_Write_String@a
  1007  014F  3080               	movlw	128
  1008  0150  00A4               	movwf	Lcd_Write_String@a+1
  1009  0151  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
  1010                           
  1011                           ;GAS_LEAK.c: 131: Lcd_Set_Cursor(2,11);
  1012  0156  300B               	movlw	11
  1013  0157  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0158  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0159  00C9               	movwf	??_main
  1016  015A  0849               	movf	??_main,w
  1017  015B  00A2               	movwf	Lcd_Set_Cursor@b
  1018  015C  3002               	movlw	2
  1019  015D  120A  118A  259E  120A  118A  	fcall	_Lcd_Set_Cursor
  1020                           
  1021                           ;GAS_LEAK.c: 132: sprintf(g,"%d ",gas);
  1022  0162  3062               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1023  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1024  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1025  0165  00C9               	movwf	??_main
  1026  0166  0849               	movf	??_main,w
  1027  0167  00AC               	movwf	sprintf@f
  1028  0168  084D               	movf	_gas+1,w
  1029  0169  00AE               	movwf	?_sprintf+2
  1030  016A  084C               	movf	_gas,w
  1031  016B  00AD               	movwf	?_sprintf+1
  1032  016C  3052               	movlw	(low (_g| 0))& (0+255)
  1033  016D  120A  118A  2223  120A  118A  	fcall	_sprintf
  1034                           
  1035                           ;GAS_LEAK.c: 133: Lcd_Write_String(g);
  1036  0172  3052               	movlw	(low (_g| 0))& (0+255)
  1037  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0175  00A3               	movwf	Lcd_Write_String@a
  1040  0176  3000               	movlw	0
  1041  0177                     L2:	
  1042  0177  00A4               	movwf	Lcd_Write_String@a+1
  1043  0178  120A  118A  25F0  120A  118A  	fcall	_Lcd_Write_String
  1044                           
  1045                           ;GAS_LEAK.c: 134: }
  1046                           ;GAS_LEAK.c: 135: if(count == 90){
  1047  017D  305A               	movlw	90
  1048  017E  0678               	xorwf	_count,w
  1049  017F  0479               	iorwf	_count+1,w
  1050  0180  1D03               	btfss	3,2
  1051  0181  2894               	goto	l1972
  1052                           
  1053                           ;GAS_LEAK.c: 136: uart_txc('*');
  1054  0182  302A               	movlw	42
  1055  0183  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1056                           
  1057                           ;GAS_LEAK.c: 137: _delay((unsigned long)((100)*(20000000/4000.0)));
  1058  0188  3003               	movlw	3
  1059  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1060  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1061  018B  00CB               	movwf	??_main+2
  1062  018C  308A               	movlw	138
  1063  018D  00CA               	movwf	??_main+1
  1064  018E  3055               	movlw	85
  1065  018F  00C9               	movwf	??_main
  1066  0190                     u2277:	
  1067  0190  0BC9               	decfsz	??_main,f
  1068  0191  2990               	goto	u2277
  1069  0192  0BCA               	decfsz	??_main+1,f
  1070  0193  2990               	goto	u2277
  1071  0194  0BCB               	decfsz	??_main+2,f
  1072  0195  2990               	goto	u2277
  1073                           
  1074                           ;GAS_LEAK.c: 138: uart_txc('T');
  1075  0196  3054               	movlw	84
  1076  0197  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1077                           
  1078                           ;GAS_LEAK.c: 139: _delay((unsigned long)((100)*(20000000/4000.0)));
  1079  019C  3003               	movlw	3
  1080  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1081  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1082  019F  00CB               	movwf	??_main+2
  1083  01A0  308A               	movlw	138
  1084  01A1  00CA               	movwf	??_main+1
  1085  01A2  3055               	movlw	85
  1086  01A3  00C9               	movwf	??_main
  1087  01A4                     u2287:	
  1088  01A4  0BC9               	decfsz	??_main,f
  1089  01A5  29A4               	goto	u2287
  1090  01A6  0BCA               	decfsz	??_main+1,f
  1091  01A7  29A4               	goto	u2287
  1092  01A8  0BCB               	decfsz	??_main+2,f
  1093  01A9  29A4               	goto	u2287
  1094                           
  1095                           ;GAS_LEAK.c: 140: uart_txc(':');
  1096  01AA  303A               	movlw	58
  1097  01AB  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1098                           
  1099                           ;GAS_LEAK.c: 141: _delay((unsigned long)((100)*(20000000/4000.0)));
  1100  01B0  3003               	movlw	3
  1101  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1102  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1103  01B3  00CB               	movwf	??_main+2
  1104  01B4  308A               	movlw	138
  1105  01B5  00CA               	movwf	??_main+1
  1106  01B6  3055               	movlw	85
  1107  01B7  00C9               	movwf	??_main
  1108  01B8                     u2297:	
  1109  01B8  0BC9               	decfsz	??_main,f
  1110  01B9  29B8               	goto	u2297
  1111  01BA  0BCA               	decfsz	??_main+1,f
  1112  01BB  29B8               	goto	u2297
  1113  01BC  0BCB               	decfsz	??_main+2,f
  1114  01BD  29B8               	goto	u2297
  1115                           
  1116                           ;GAS_LEAK.c: 142: uart_txs(t);
  1117  01BE  305C               	movlw	(low (_t| 0))& (0+255)
  1118  01BF  120A  118A  2794  120A  118A  	fcall	_uart_txs
  1119                           
  1120                           ;GAS_LEAK.c: 143: _delay((unsigned long)((100)*(20000000/4000.0)));
  1121  01C4  3003               	movlw	3
  1122  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1123  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1124  01C7  00CB               	movwf	??_main+2
  1125  01C8  308A               	movlw	138
  1126  01C9  00CA               	movwf	??_main+1
  1127  01CA  3055               	movlw	85
  1128  01CB  00C9               	movwf	??_main
  1129  01CC                     u2307:	
  1130  01CC  0BC9               	decfsz	??_main,f
  1131  01CD  29CC               	goto	u2307
  1132  01CE  0BCA               	decfsz	??_main+1,f
  1133  01CF  29CC               	goto	u2307
  1134  01D0  0BCB               	decfsz	??_main+2,f
  1135  01D1  29CC               	goto	u2307
  1136                           
  1137                           ;GAS_LEAK.c: 144: uart_txc('M');
  1138  01D2  304D               	movlw	77
  1139  01D3  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1140                           
  1141                           ;GAS_LEAK.c: 145: _delay((unsigned long)((100)*(20000000/4000.0)));
  1142  01D8  3003               	movlw	3
  1143  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1144  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1145  01DB  00CB               	movwf	??_main+2
  1146  01DC  308A               	movlw	138
  1147  01DD  00CA               	movwf	??_main+1
  1148  01DE  3055               	movlw	85
  1149  01DF  00C9               	movwf	??_main
  1150  01E0                     u2317:	
  1151  01E0  0BC9               	decfsz	??_main,f
  1152  01E1  29E0               	goto	u2317
  1153  01E2  0BCA               	decfsz	??_main+1,f
  1154  01E3  29E0               	goto	u2317
  1155  01E4  0BCB               	decfsz	??_main+2,f
  1156  01E5  29E0               	goto	u2317
  1157                           
  1158                           ;GAS_LEAK.c: 146: uart_txc(':');
  1159  01E6  303A               	movlw	58
  1160  01E7  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1161                           
  1162                           ;GAS_LEAK.c: 147: _delay((unsigned long)((100)*(20000000/4000.0)));
  1163  01EC  3003               	movlw	3
  1164  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1165  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1166  01EF  00CB               	movwf	??_main+2
  1167  01F0  308A               	movlw	138
  1168  01F1  00CA               	movwf	??_main+1
  1169  01F2  3055               	movlw	85
  1170  01F3  00C9               	movwf	??_main
  1171  01F4                     u2327:	
  1172  01F4  0BC9               	decfsz	??_main,f
  1173  01F5  29F4               	goto	u2327
  1174  01F6  0BCA               	decfsz	??_main+1,f
  1175  01F7  29F4               	goto	u2327
  1176  01F8  0BCB               	decfsz	??_main+2,f
  1177  01F9  29F4               	goto	u2327
  1178                           
  1179                           ;GAS_LEAK.c: 148: uart_txs(g);
  1180  01FA  3052               	movlw	(low (_g| 0))& (0+255)
  1181  01FB  120A  118A  2794  120A  118A  	fcall	_uart_txs
  1182                           
  1183                           ;GAS_LEAK.c: 149: _delay((unsigned long)((100)*(20000000/4000.0)));
  1184  0200  3003               	movlw	3
  1185  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0203  00CB               	movwf	??_main+2
  1188  0204  308A               	movlw	138
  1189  0205  00CA               	movwf	??_main+1
  1190  0206  3055               	movlw	85
  1191  0207  00C9               	movwf	??_main
  1192  0208                     u2337:	
  1193  0208  0BC9               	decfsz	??_main,f
  1194  0209  2A08               	goto	u2337
  1195  020A  0BCA               	decfsz	??_main+1,f
  1196  020B  2A08               	goto	u2337
  1197  020C  0BCB               	decfsz	??_main+2,f
  1198  020D  2A08               	goto	u2337
  1199                           
  1200                           ;GAS_LEAK.c: 150: uart_txc('#');
  1201  020E  3023               	movlw	35
  1202  020F  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1203                           
  1204                           ;GAS_LEAK.c: 151: _delay((unsigned long)((100)*(20000000/4000.0)));
  1205  0214  3003               	movlw	3
  1206  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0217  00CB               	movwf	??_main+2
  1209  0218  308A               	movlw	138
  1210  0219  00CA               	movwf	??_main+1
  1211  021A  3055               	movlw	85
  1212  021B  00C9               	movwf	??_main
  1213  021C                     u2347:	
  1214  021C  0BC9               	decfsz	??_main,f
  1215  021D  2A1C               	goto	u2347
  1216  021E  0BCA               	decfsz	??_main+1,f
  1217  021F  2A1C               	goto	u2347
  1218  0220  0BCB               	decfsz	??_main+2,f
  1219  0221  2A1C               	goto	u2347
  1220  0222  2894               	goto	l1972
  1221  0223                     __end_of_main:	
  1222                           
  1223                           	psect	text1
  1224  0794                     __ptext1:	
  1225 ;; *************** function _uart_txs *****************
  1226 ;; Defined at:
  1227 ;;		line 48 in file "GAS_LEAK.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  st              1    wreg     PTR unsigned char 
  1230 ;;		 -> g(10), t(10), 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  st              1    5[COMMON] PTR unsigned char 
  1233 ;;		 -> g(10), t(10), 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1243 ;;      Params:         0       0       0       0       0
  1244 ;;      Locals:         1       0       0       0       0
  1245 ;;      Temps:          1       0       0       0       0
  1246 ;;      Totals:         2       0       0       0       0
  1247 ;;Total ram usage:        2 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    2
  1250 ;; This function calls:
  1251 ;;		_uart_txc
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function _uart_txs
  1259  0794                     _uart_txs:	
  1260                           
  1261                           ;incstack = 0
  1262                           ; Regs used in _uart_txs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1263                           ;uart_txs@st stored from wreg
  1264  0794  00F5               	movwf	uart_txs@st
  1265  0795                     l1804:	
  1266                           ;GAS_LEAK.c: 50: while(*st)
  1267                           
  1268  0795  0875               	movf	uart_txs@st,w
  1269  0796  0084               	movwf	4
  1270  0797  1383               	bcf	3,7	;select IRP bank0
  1271  0798  0800               	movf	0,w
  1272  0799  1903               	btfsc	3,2
  1273  079A  0008               	return
  1274                           
  1275                           ;GAS_LEAK.c: 51: uart_txc(*st++);
  1276  079B  0875               	movf	uart_txs@st,w
  1277  079C  0084               	movwf	4
  1278  079D  1383               	bcf	3,7	;select IRP bank0
  1279  079E  0800               	movf	0,w
  1280  079F  120A  118A  270D  120A  118A  	fcall	_uart_txc
  1281  07A4  3001               	movlw	1
  1282  07A5  00F4               	movwf	??_uart_txs
  1283  07A6  0874               	movf	??_uart_txs,w
  1284  07A7  07F5               	addwf	uart_txs@st,f
  1285  07A8  2F95               	goto	l1804
  1286  07A9                     __end_of_uart_txs:	
  1287                           
  1288                           	psect	text2
  1289  070D                     __ptext2:	
  1290 ;; *************** function _uart_txc *****************
  1291 ;; Defined at:
  1292 ;;		line 41 in file "GAS_LEAK.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  ch              1    wreg     unsigned char 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  ch              1    0[BANK0 ] unsigned char 
  1297 ;;  i               2    1[BANK0 ] int 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, btemp+1
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1307 ;;      Params:         0       0       0       0       0
  1308 ;;      Locals:         0       3       0       0       0
  1309 ;;      Temps:          0       0       0       0       0
  1310 ;;      Totals:         0       3       0       0       0
  1311 ;;Total ram usage:        3 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    1
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_uart_txs
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           
  1323                           ;psect for function _uart_txc
  1324  070D                     _uart_txc:	
  1325                           
  1326                           ;incstack = 0
  1327                           ; Regs used in _uart_txc: [wreg+status,2+btemp+1]
  1328                           ;uart_txc@ch stored from wreg
  1329  070D  1283               	bcf	3,5	;RP0=0, select bank0
  1330  070E  1303               	bcf	3,6	;RP1=0, select bank0
  1331  070F  00A0               	movwf	uart_txc@ch
  1332  0710                     l131:	
  1333                           ;GAS_LEAK.c: 44: continue;
  1334                           
  1335                           ;GAS_LEAK.c: 42: int i;
  1336                           ;GAS_LEAK.c: 43: while(!TXIF)
  1337                           
  1338  0710  1E0C               	btfss	12,4	;volatile
  1339  0711  2F10               	goto	l131
  1340                           
  1341                           ;GAS_LEAK.c: 45: TXREG=ch;
  1342  0712  0820               	movf	uart_txc@ch,w
  1343  0713  0099               	movwf	25	;volatile
  1344                           
  1345                           ;GAS_LEAK.c: 46: for(i=0;i<500;i++);
  1346  0714  01A1               	clrf	uart_txc@i
  1347  0715  01A2               	clrf	uart_txc@i+1
  1348  0716                     L3:	
  1349  0716  0822               	movf	uart_txc@i+1,w
  1350  0717  3A80               	xorlw	128
  1351  0718  00FF               	movwf	127
  1352  0719  3081               	movlw	129
  1353  071A  027F               	subwf	127,w
  1354  071B  1D03               	skipz
  1355  071C  2F1F               	goto	u1695
  1356  071D  30F4               	movlw	244
  1357  071E  0221               	subwf	uart_txc@i,w
  1358  071F                     u1695:	
  1359  071F  1803               	btfsc	3,0
  1360  0720  0008               	return
  1361  0721  3001               	movlw	1
  1362  0722  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0723  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0724  07A1               	addwf	uart_txc@i,f
  1365  0725  1803               	skipnc
  1366  0726  0AA2               	incf	uart_txc@i+1,f
  1367  0727  3000               	movlw	0
  1368  0728  07A2               	addwf	uart_txc@i+1,f
  1369  0729  2F16               	goto	L3
  1370  072A                     __end_of_uart_txc:	
  1371                           
  1372                           	psect	text3
  1373  07A9                     __ptext3:	
  1374 ;; *************** function _uart_init *****************
  1375 ;; Defined at:
  1376 ;;		line 31 in file "GAS_LEAK.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0
  1393 ;;      Totals:         0       0       0       0       0
  1394 ;;Total ram usage:        0 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           
  1405                           ;psect for function _uart_init
  1406  07A9                     _uart_init:	
  1407                           
  1408                           ;GAS_LEAK.c: 32: TRISC6 = 0;
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _uart_init: [wreg]
  1412  07A9  1683               	bsf	3,5	;RP0=1, select bank1
  1413  07AA  1303               	bcf	3,6	;RP1=0, select bank1
  1414  07AB  1307               	bcf	7,6	;volatile
  1415                           
  1416                           ;GAS_LEAK.c: 33: TRISC7 = 1;
  1417  07AC  1787               	bsf	7,7	;volatile
  1418                           
  1419                           ;GAS_LEAK.c: 34: SPBRG = ((20000000/16)/9600) - 1;
  1420  07AD  3081               	movlw	129
  1421  07AE  0099               	movwf	25	;volatile
  1422                           
  1423                           ;GAS_LEAK.c: 35: BRGH = 1;
  1424  07AF  1518               	bsf	24,2	;volatile
  1425                           
  1426                           ;GAS_LEAK.c: 36: SYNC = 0;
  1427  07B0  1218               	bcf	24,4	;volatile
  1428                           
  1429                           ;GAS_LEAK.c: 37: SPEN = 1;
  1430  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1431  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  1432  07B3  1798               	bsf	24,7	;volatile
  1433                           
  1434                           ;GAS_LEAK.c: 38: TXEN = 1;
  1435  07B4  1683               	bsf	3,5	;RP0=1, select bank1
  1436  07B5  1303               	bcf	3,6	;RP1=0, select bank1
  1437  07B6  1698               	bsf	24,5	;volatile
  1438                           
  1439                           ;GAS_LEAK.c: 39: CREN = 1;
  1440  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  1441  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  1442  07B9  1618               	bsf	24,4	;volatile
  1443  07BA  0008               	return
  1444  07BB                     __end_of_uart_init:	
  1445                           
  1446                           	psect	text4
  1447  07BB                     __ptext4:	
  1448 ;; *************** function _timer1_init *****************
  1449 ;; Defined at:
  1450 ;;		line 78 in file "GAS_LEAK.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      void 
  1457 ;; Registers used:
  1458 ;;		status,2
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1464 ;;      Params:         0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0
  1466 ;;      Temps:          0       0       0       0       0
  1467 ;;      Totals:         0       0       0       0       0
  1468 ;;Total ram usage:        0 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    1
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_main
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           
  1479                           ;psect for function _timer1_init
  1480  07BB                     _timer1_init:	
  1481                           
  1482                           ;GAS_LEAK.c: 79: TMR1H = 0x00;
  1483                           
  1484                           ;incstack = 0
  1485                           ; Regs used in _timer1_init: [status,2]
  1486  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  1487  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  1488  07BD  018F               	clrf	15	;volatile
  1489                           
  1490                           ;GAS_LEAK.c: 80: TMR1L = 0x00;
  1491  07BE  018E               	clrf	14	;volatile
  1492                           
  1493                           ;GAS_LEAK.c: 81: PIR1bits.TMR1IF = 0;
  1494  07BF  100C               	bcf	12,0	;volatile
  1495                           
  1496                           ;GAS_LEAK.c: 82: T1CONbits.TMR1CS = 0;
  1497  07C0  1090               	bcf	16,1	;volatile
  1498                           
  1499                           ;GAS_LEAK.c: 83: T1CONbits.T1CKPS0 = 1;
  1500  07C1  1610               	bsf	16,4	;volatile
  1501                           
  1502                           ;GAS_LEAK.c: 84: T1CONbits.T1CKPS1 = 1;
  1503  07C2  1690               	bsf	16,5	;volatile
  1504                           
  1505                           ;GAS_LEAK.c: 85: PIE1bits.TMR1IE = 1;
  1506  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  1507  07C4  1303               	bcf	3,6	;RP1=0, select bank1
  1508  07C5  140C               	bsf	12,0	;volatile
  1509                           
  1510                           ;GAS_LEAK.c: 86: T1CONbits.TMR1ON = 1;
  1511  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  1512  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  1513  07C8  1410               	bsf	16,0	;volatile
  1514  07C9  0008               	return
  1515  07CA                     __end_of_timer1_init:	
  1516                           
  1517                           	psect	text5
  1518  0223                     __ptext5:	
  1519 ;; *************** function _sprintf *****************
  1520 ;; Defined at:
  1521 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  sp              1    wreg     PTR unsigned char 
  1524 ;;		 -> g(10), t(10), 
  1525 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1526 ;;		 -> STR_9(4), STR_6(4), 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1529 ;;		 -> g(10), t(10), 
  1530 ;;  tmpval          4    0        struct .
  1531 ;;  val             2   21[BANK0 ] unsigned int 
  1532 ;;  cp              2    0        PTR const unsigned char 
  1533 ;;  len             2    0        unsigned int 
  1534 ;;  c               1   24[BANK0 ] char 
  1535 ;;  prec            1   20[BANK0 ] char 
  1536 ;;  flag            1   19[BANK0 ] unsigned char 
  1537 ;;  ap              1   18[BANK0 ] PTR void [1]
  1538 ;;		 -> ?_sprintf(2), 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  2   12[BANK0 ] int 
  1541 ;; Registers used:
  1542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1548 ;;      Params:         0       3       0       0       0
  1549 ;;      Locals:         0       7       0       0       0
  1550 ;;      Temps:          0       3       0       0       0
  1551 ;;      Totals:         0      13       0       0       0
  1552 ;;Total ram usage:       13 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    2
  1555 ;; This function calls:
  1556 ;;		___lwdiv
  1557 ;;		___lwmod
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           
  1564                           ;psect for function _sprintf
  1565  0223                     _sprintf:	
  1566                           
  1567                           ;incstack = 0
  1568                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1569                           ;sprintf@sp stored from wreg
  1570  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1571  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1572  0225  00B7               	movwf	sprintf@sp
  1573                           
  1574                           ;doprnt.c: 494: va_list ap;
  1575                           ;doprnt.c: 499: signed char c;
  1576                           ;doprnt.c: 506: signed char prec;
  1577                           ;doprnt.c: 508: unsigned char flag;
  1578                           ;doprnt.c: 523: union {
  1579                           ;doprnt.c: 524: unsigned long vd;
  1580                           ;doprnt.c: 525: double integ;
  1581                           ;doprnt.c: 526: } tmpval;
  1582                           ;doprnt.c: 528: unsigned int val;
  1583                           ;doprnt.c: 529: unsigned len;
  1584                           ;doprnt.c: 530: const char * cp;
  1585                           ;doprnt.c: 533: *ap = __va_start();
  1586  0226  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1587  0227  00AF               	movwf	??_sprintf
  1588  0228  082F               	movf	??_sprintf,w
  1589  0229  00B2               	movwf	sprintf@ap
  1590  022A                     l1874:	
  1591                           ;doprnt.c: 536: while(c = *f++) {
  1592                           
  1593  022A  3001               	movlw	1
  1594  022B  07AC               	addwf	sprintf@f,f
  1595  022C  30FF               	movlw	-1
  1596  022D  072C               	addwf	sprintf@f,w
  1597  022E  0084               	movwf	4
  1598  022F  120A  118A  2464  120A  118A  	fcall	stringdir
  1599  0234  00AF               	movwf	??_sprintf
  1600  0235  082F               	movf	??_sprintf,w
  1601  0236  00B8               	movwf	sprintf@c
  1602  0237  0838               	movf	sprintf@c,w
  1603  0238  1903               	btfsc	3,2
  1604  0239  2AF4               	goto	l1876
  1605                           
  1606                           ;doprnt.c: 538: if(c != '%')
  1607  023A  3025               	movlw	37
  1608  023B  0638               	xorwf	sprintf@c,w
  1609  023C  1903               	btfsc	3,2
  1610  023D  2A4A               	goto	l1830
  1611                           
  1612                           ;doprnt.c: 540: {
  1613                           ;doprnt.c: 541: ((*sp++ = (c)));
  1614  023E  0838               	movf	sprintf@c,w
  1615  023F  00AF               	movwf	??_sprintf
  1616  0240  0837               	movf	sprintf@sp,w
  1617  0241  0084               	movwf	4
  1618  0242  082F               	movf	??_sprintf,w
  1619  0243  1383               	bcf	3,7	;select IRP bank0
  1620  0244  0080               	movwf	0
  1621  0245  3001               	movlw	1
  1622  0246  00AF               	movwf	??_sprintf
  1623  0247  082F               	movf	??_sprintf,w
  1624  0248  07B7               	addwf	sprintf@sp,f
  1625                           
  1626                           ;doprnt.c: 542: continue;
  1627  0249  2A2A               	goto	l1874
  1628  024A                     l1830:	
  1629                           
  1630                           ;doprnt.c: 543: }
  1631                           ;doprnt.c: 548: flag = 0;
  1632  024A  01B3               	clrf	sprintf@flag
  1633                           
  1634                           ;doprnt.c: 822: }
  1635                           
  1636                           ;doprnt.c: 813: continue;
  1637                           
  1638                           ;doprnt.c: 802: default:
  1639                           
  1640                           ;doprnt.c: 698: case 'i':
  1641                           ;doprnt.c: 699: break;
  1642                           
  1643                           ;doprnt.c: 697: case 'd':
  1644                           
  1645                           ;doprnt.c: 638: goto alldone;
  1646                           
  1647                           ;doprnt.c: 637: case 0:
  1648                           
  1649                           ;doprnt.c: 635: switch(c = *f++) {
  1650  024B  3001               	movlw	1
  1651  024C  07AC               	addwf	sprintf@f,f
  1652  024D  30FF               	movlw	-1
  1653  024E  072C               	addwf	sprintf@f,w
  1654  024F  0084               	movwf	4
  1655  0250  120A  118A  2464  120A  118A  	fcall	stringdir
  1656  0255  00B8               	movwf	sprintf@c
  1657                           
  1658                           ; Switch size 1, requested type "space"
  1659                           ; Number of cases is 3, Range of values is 0 to 105
  1660                           ; switch strategies available:
  1661                           ; Name         Instructions Cycles
  1662                           ; simple_byte           10     6 (average)
  1663                           ; jumptable            260     6 (fixed)
  1664                           ;	Chosen strategy is simple_byte
  1665  0256  3A00               	xorlw	0	; case 0
  1666  0257  1903               	skipnz
  1667  0258  2AF4               	goto	l1876
  1668  0259  3A64               	xorlw	100	; case 100
  1669  025A  1903               	skipnz
  1670  025B  2A60               	goto	l1836
  1671  025C  3A0D               	xorlw	13	; case 105
  1672  025D  1903               	skipnz
  1673  025E  2A60               	goto	l1836
  1674  025F  2A2A               	goto	l1874
  1675  0260                     l1836:	
  1676                           
  1677                           ;doprnt.c: 1253: {
  1678                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1679  0260  0832               	movf	sprintf@ap,w
  1680  0261  0084               	movwf	4
  1681  0262  1383               	bcf	3,7	;select IRP bank0
  1682  0263  0800               	movf	0,w
  1683  0264  00B5               	movwf	sprintf@val
  1684  0265  0A84               	incf	4,f
  1685  0266  0800               	movf	0,w
  1686  0267  00B6               	movwf	sprintf@val+1
  1687  0268  3002               	movlw	2
  1688  0269  00AF               	movwf	??_sprintf
  1689  026A  082F               	movf	??_sprintf,w
  1690  026B  07B2               	addwf	sprintf@ap,f
  1691                           
  1692                           ;doprnt.c: 1261: if((int)val < 0) {
  1693  026C  1FB6               	btfss	sprintf@val+1,7
  1694  026D  2A77               	goto	l1846
  1695                           
  1696                           ;doprnt.c: 1262: flag |= 0x03;
  1697  026E  3003               	movlw	3
  1698  026F  00AF               	movwf	??_sprintf
  1699  0270  082F               	movf	??_sprintf,w
  1700  0271  04B3               	iorwf	sprintf@flag,f
  1701                           
  1702                           ;doprnt.c: 1263: val = -val;
  1703  0272  09B5               	comf	sprintf@val,f
  1704  0273  09B6               	comf	sprintf@val+1,f
  1705  0274  0AB5               	incf	sprintf@val,f
  1706  0275  1903               	skipnz
  1707  0276  0AB6               	incf	sprintf@val+1,f
  1708  0277                     l1846:	
  1709                           
  1710                           ;doprnt.c: 1264: }
  1711                           ;doprnt.c: 1266: }
  1712                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1713  0277  01B8               	clrf	sprintf@c
  1714  0278  0AB8               	incf	sprintf@c,f
  1715  0279  3005               	movlw	5
  1716  027A  0638               	xorwf	sprintf@c,w
  1717  027B  1903               	btfsc	3,2
  1718  027C  2A9E               	goto	l1858
  1719  027D                     l1852:	
  1720                           
  1721                           ;doprnt.c: 1306: if(val < dpowers[c])
  1722  027D  0838               	movf	sprintf@c,w
  1723  027E  00AF               	movwf	??_sprintf
  1724  027F  072F               	addwf	??_sprintf,w
  1725  0280  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1726  0281  0084               	movwf	4
  1727  0282  120A  118A  2464  120A  118A  	fcall	stringdir
  1728  0287  00B0               	movwf	??_sprintf+1
  1729  0288  120A  118A  2464  120A  118A  	fcall	stringdir
  1730  028D  00B1               	movwf	??_sprintf+2
  1731  028E  0831               	movf	??_sprintf+2,w
  1732  028F  0236               	subwf	sprintf@val+1,w
  1733  0290  1D03               	skipz
  1734  0291  2A94               	goto	u2045
  1735  0292  0830               	movf	??_sprintf+1,w
  1736  0293  0235               	subwf	sprintf@val,w
  1737  0294                     u2045:	
  1738  0294  1C03               	btfss	3,0
  1739  0295  2A9E               	goto	l1858
  1740                           
  1741                           ;doprnt.c: 1307: break;
  1742  0296  3001               	movlw	1
  1743  0297  00AF               	movwf	??_sprintf
  1744  0298  082F               	movf	??_sprintf,w
  1745  0299  07B8               	addwf	sprintf@c,f
  1746  029A  3005               	movlw	5
  1747  029B  0638               	xorwf	sprintf@c,w
  1748  029C  1D03               	btfss	3,2
  1749  029D  2A7D               	goto	l1852
  1750  029E                     l1858:	
  1751                           
  1752                           ;doprnt.c: 1422: {
  1753                           ;doprnt.c: 1438: if(flag & 0x03)
  1754  029E  0833               	movf	sprintf@flag,w
  1755  029F  3903               	andlw	3
  1756  02A0  1903               	btfsc	3,2
  1757  02A1  2AAD               	goto	l1864
  1758                           
  1759                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1760  02A2  302D               	movlw	45
  1761  02A3  00AF               	movwf	??_sprintf
  1762  02A4  0837               	movf	sprintf@sp,w
  1763  02A5  0084               	movwf	4
  1764  02A6  082F               	movf	??_sprintf,w
  1765  02A7  1383               	bcf	3,7	;select IRP bank0
  1766  02A8  0080               	movwf	0
  1767  02A9  3001               	movlw	1
  1768  02AA  00AF               	movwf	??_sprintf
  1769  02AB  082F               	movf	??_sprintf,w
  1770  02AC  07B7               	addwf	sprintf@sp,f
  1771  02AD                     l1864:	
  1772                           
  1773                           ;doprnt.c: 1469: }
  1774                           ;doprnt.c: 1472: prec = c;
  1775  02AD  0838               	movf	sprintf@c,w
  1776  02AE  00AF               	movwf	??_sprintf
  1777  02AF  082F               	movf	??_sprintf,w
  1778  02B0  00B4               	movwf	sprintf@prec
  1779  02B1                     l1872:	
  1780                           ;doprnt.c: 1474: while(prec--) {
  1781                           
  1782  02B1  30FF               	movlw	255
  1783  02B2  00AF               	movwf	??_sprintf
  1784  02B3  082F               	movf	??_sprintf,w
  1785  02B4  07B4               	addwf	sprintf@prec,f
  1786  02B5  0A34               	incf	sprintf@prec,w
  1787  02B6  1903               	btfsc	3,2
  1788  02B7  2A2A               	goto	l1874
  1789                           
  1790                           ;doprnt.c: 1478: {
  1791                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1792  02B8  300A               	movlw	10
  1793  02B9  00A7               	movwf	___lwmod@divisor
  1794  02BA  3000               	movlw	0
  1795  02BB  00A8               	movwf	___lwmod@divisor+1
  1796  02BC  0834               	movf	sprintf@prec,w
  1797  02BD  00AF               	movwf	??_sprintf
  1798  02BE  072F               	addwf	??_sprintf,w
  1799  02BF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1800  02C0  0084               	movwf	4
  1801  02C1  120A  118A  2464  120A  118A  	fcall	stringdir
  1802  02C6  00A0               	movwf	___lwdiv@divisor
  1803  02C7  120A  118A  2464  120A  118A  	fcall	stringdir
  1804  02CC  00A1               	movwf	___lwdiv@divisor+1
  1805  02CD  0836               	movf	sprintf@val+1,w
  1806  02CE  00A3               	movwf	___lwdiv@dividend+1
  1807  02CF  0835               	movf	sprintf@val,w
  1808  02D0  00A2               	movwf	___lwdiv@dividend
  1809  02D1  120A  118A  2631  120A  118A  	fcall	___lwdiv
  1810  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1811  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1812  02D8  0821               	movf	?___lwdiv+1,w
  1813  02D9  00AA               	movwf	___lwmod@dividend+1
  1814  02DA  0820               	movf	?___lwdiv,w
  1815  02DB  00A9               	movwf	___lwmod@dividend
  1816  02DC  120A  118A  26A8  120A  118A  	fcall	___lwmod
  1817  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1818  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1819  02E3  0827               	movf	?___lwmod,w
  1820  02E4  3E30               	addlw	48
  1821  02E5  00B0               	movwf	??_sprintf+1
  1822  02E6  0830               	movf	??_sprintf+1,w
  1823  02E7  00B8               	movwf	sprintf@c
  1824                           
  1825                           ;doprnt.c: 1523: }
  1826                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1827  02E8  0838               	movf	sprintf@c,w
  1828  02E9  00AF               	movwf	??_sprintf
  1829  02EA  0837               	movf	sprintf@sp,w
  1830  02EB  0084               	movwf	4
  1831  02EC  082F               	movf	??_sprintf,w
  1832  02ED  1383               	bcf	3,7	;select IRP bank0
  1833  02EE  0080               	movwf	0
  1834  02EF  3001               	movlw	1
  1835  02F0  00AF               	movwf	??_sprintf
  1836  02F1  082F               	movf	??_sprintf,w
  1837  02F2  07B7               	addwf	sprintf@sp,f
  1838  02F3  2AB1               	goto	l1872
  1839  02F4                     l1876:	
  1840                           ;doprnt.c: 1525: }
  1841                           ;doprnt.c: 1533: }
  1842                           ;doprnt.c: 1535: alldone:
  1843                           
  1844                           
  1845                           ;doprnt.c: 1538: *sp = 0;
  1846  02F4  0837               	movf	sprintf@sp,w
  1847  02F5  0084               	movwf	4
  1848  02F6  1383               	bcf	3,7	;select IRP bank0
  1849  02F7  0180               	clrf	0
  1850  02F8  0008               	return
  1851  02F9                     __end_of_sprintf:	
  1852                           ;doprnt.c: 1540: return 0;
  1853                           ;	Return value of _sprintf is never used
  1854                           
  1855                           
  1856                           	psect	text6
  1857  06A8                     __ptext6:	
  1858 ;; *************** function ___lwmod *****************
  1859 ;; Defined at:
  1860 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;  divisor         2    7[BANK0 ] unsigned int 
  1863 ;;  dividend        2    9[BANK0 ] unsigned int 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  counter         1   11[BANK0 ] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  2    7[BANK0 ] unsigned int 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1875 ;;      Params:         0       4       0       0       0
  1876 ;;      Locals:         0       1       0       0       0
  1877 ;;      Temps:          1       0       0       0       0
  1878 ;;      Totals:         1       5       0       0       0
  1879 ;;Total ram usage:        6 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    1
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_sprintf
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           
  1890                           ;psect for function ___lwmod
  1891  06A8                     ___lwmod:	
  1892                           
  1893                           ;incstack = 0
  1894                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1895  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  1896  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  1897  06AA  0827               	movf	___lwmod@divisor,w
  1898  06AB  0428               	iorwf	___lwmod@divisor+1,w
  1899  06AC  1903               	btfsc	3,2
  1900  06AD  2ED7               	goto	l1296
  1901  06AE  01AB               	clrf	___lwmod@counter
  1902  06AF  0AAB               	incf	___lwmod@counter,f
  1903  06B0                     l1286:	
  1904  06B0  1BA8               	btfsc	___lwmod@divisor+1,7
  1905  06B1  2EBE               	goto	l1288
  1906  06B2  3001               	movlw	1
  1907  06B3                     u1125:	
  1908  06B3  1003               	clrc
  1909  06B4  0DA7               	rlf	___lwmod@divisor,f
  1910  06B5  0DA8               	rlf	___lwmod@divisor+1,f
  1911  06B6  3EFF               	addlw	-1
  1912  06B7  1D03               	skipz
  1913  06B8  2EB3               	goto	u1125
  1914  06B9  3001               	movlw	1
  1915  06BA  00F5               	movwf	??___lwmod
  1916  06BB  0875               	movf	??___lwmod,w
  1917  06BC  07AB               	addwf	___lwmod@counter,f
  1918  06BD  2EB0               	goto	l1286
  1919  06BE                     l1288:	
  1920  06BE  0828               	movf	___lwmod@divisor+1,w
  1921  06BF  022A               	subwf	___lwmod@dividend+1,w
  1922  06C0  1D03               	skipz
  1923  06C1  2EC4               	goto	u1145
  1924  06C2  0827               	movf	___lwmod@divisor,w
  1925  06C3  0229               	subwf	___lwmod@dividend,w
  1926  06C4                     u1145:	
  1927  06C4  1C03               	skipc
  1928  06C5  2ECC               	goto	l1292
  1929  06C6  0827               	movf	___lwmod@divisor,w
  1930  06C7  02A9               	subwf	___lwmod@dividend,f
  1931  06C8  0828               	movf	___lwmod@divisor+1,w
  1932  06C9  1C03               	skipc
  1933  06CA  03AA               	decf	___lwmod@dividend+1,f
  1934  06CB  02AA               	subwf	___lwmod@dividend+1,f
  1935  06CC                     l1292:	
  1936  06CC  3001               	movlw	1
  1937  06CD                     u1155:	
  1938  06CD  1003               	clrc
  1939  06CE  0CA8               	rrf	___lwmod@divisor+1,f
  1940  06CF  0CA7               	rrf	___lwmod@divisor,f
  1941  06D0  3EFF               	addlw	-1
  1942  06D1  1D03               	skipz
  1943  06D2  2ECD               	goto	u1155
  1944  06D3  3001               	movlw	1
  1945  06D4  02AB               	subwf	___lwmod@counter,f
  1946  06D5  1D03               	btfss	3,2
  1947  06D6  2EBE               	goto	l1288
  1948  06D7                     l1296:	
  1949  06D7  082A               	movf	___lwmod@dividend+1,w
  1950  06D8  00A8               	movwf	?___lwmod+1
  1951  06D9  0829               	movf	___lwmod@dividend,w
  1952  06DA  00A7               	movwf	?___lwmod
  1953  06DB  0008               	return
  1954  06DC                     __end_of___lwmod:	
  1955                           
  1956                           	psect	text7
  1957  0631                     __ptext7:	
  1958 ;; *************** function ___lwdiv *****************
  1959 ;; Defined at:
  1960 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;  divisor         2    0[BANK0 ] unsigned int 
  1963 ;;  dividend        2    2[BANK0 ] unsigned int 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  quotient        2    5[BANK0 ] unsigned int 
  1966 ;;  counter         1    4[BANK0 ] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  2    0[BANK0 ] unsigned int 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1976 ;;      Params:         0       4       0       0       0
  1977 ;;      Locals:         0       3       0       0       0
  1978 ;;      Temps:          1       0       0       0       0
  1979 ;;      Totals:         1       7       0       0       0
  1980 ;;Total ram usage:        8 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    1
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_sprintf
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           
  1991                           ;psect for function ___lwdiv
  1992  0631                     ___lwdiv:	
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1996  0631  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0632  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0633  01A5               	clrf	___lwdiv@quotient
  1999  0634  01A6               	clrf	___lwdiv@quotient+1
  2000  0635  0820               	movf	___lwdiv@divisor,w
  2001  0636  0421               	iorwf	___lwdiv@divisor+1,w
  2002  0637  1903               	btfsc	3,2
  2003  0638  2E6A               	goto	l1754
  2004  0639  01A4               	clrf	___lwdiv@counter
  2005  063A  0AA4               	incf	___lwdiv@counter,f
  2006  063B                     l1742:	
  2007  063B  1BA1               	btfsc	___lwdiv@divisor+1,7
  2008  063C  2E49               	goto	l1744
  2009  063D  3001               	movlw	1
  2010  063E                     u1845:	
  2011  063E  1003               	clrc
  2012  063F  0DA0               	rlf	___lwdiv@divisor,f
  2013  0640  0DA1               	rlf	___lwdiv@divisor+1,f
  2014  0641  3EFF               	addlw	-1
  2015  0642  1D03               	skipz
  2016  0643  2E3E               	goto	u1845
  2017  0644  3001               	movlw	1
  2018  0645  00F4               	movwf	??___lwdiv
  2019  0646  0874               	movf	??___lwdiv,w
  2020  0647  07A4               	addwf	___lwdiv@counter,f
  2021  0648  2E3B               	goto	l1742
  2022  0649                     l1744:	
  2023  0649  3001               	movlw	1
  2024  064A                     u1865:	
  2025  064A  1003               	clrc
  2026  064B  0DA5               	rlf	___lwdiv@quotient,f
  2027  064C  0DA6               	rlf	___lwdiv@quotient+1,f
  2028  064D  3EFF               	addlw	-1
  2029  064E  1D03               	skipz
  2030  064F  2E4A               	goto	u1865
  2031  0650  0821               	movf	___lwdiv@divisor+1,w
  2032  0651  0223               	subwf	___lwdiv@dividend+1,w
  2033  0652  1D03               	skipz
  2034  0653  2E56               	goto	u1875
  2035  0654  0820               	movf	___lwdiv@divisor,w
  2036  0655  0222               	subwf	___lwdiv@dividend,w
  2037  0656                     u1875:	
  2038  0656  1C03               	skipc
  2039  0657  2E5F               	goto	l1750
  2040  0658  0820               	movf	___lwdiv@divisor,w
  2041  0659  02A2               	subwf	___lwdiv@dividend,f
  2042  065A  0821               	movf	___lwdiv@divisor+1,w
  2043  065B  1C03               	skipc
  2044  065C  03A3               	decf	___lwdiv@dividend+1,f
  2045  065D  02A3               	subwf	___lwdiv@dividend+1,f
  2046  065E  1425               	bsf	___lwdiv@quotient,0
  2047  065F                     l1750:	
  2048  065F  3001               	movlw	1
  2049  0660                     u1885:	
  2050  0660  1003               	clrc
  2051  0661  0CA1               	rrf	___lwdiv@divisor+1,f
  2052  0662  0CA0               	rrf	___lwdiv@divisor,f
  2053  0663  3EFF               	addlw	-1
  2054  0664  1D03               	skipz
  2055  0665  2E60               	goto	u1885
  2056  0666  3001               	movlw	1
  2057  0667  02A4               	subwf	___lwdiv@counter,f
  2058  0668  1D03               	btfss	3,2
  2059  0669  2E49               	goto	l1744
  2060  066A                     l1754:	
  2061  066A  0826               	movf	___lwdiv@quotient+1,w
  2062  066B  00A1               	movwf	?___lwdiv+1
  2063  066C  0825               	movf	___lwdiv@quotient,w
  2064  066D  00A0               	movwf	?___lwdiv
  2065  066E  0008               	return
  2066  066F                     __end_of___lwdiv:	
  2067                           
  2068                           	psect	text8
  2069  06DC                     __ptext8:	
  2070 ;; *************** function _adc_read *****************
  2071 ;; Defined at:
  2072 ;;		line 66 in file "GAS_LEAK.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  channel         1    wreg     unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  channel         1    2[BANK0 ] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  2    4[COMMON] unsigned int 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2086 ;;      Params:         2       0       0       0       0
  2087 ;;      Locals:         0       1       0       0       0
  2088 ;;      Temps:          0       2       0       0       0
  2089 ;;      Totals:         2       3       0       0       0
  2090 ;;Total ram usage:        5 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           
  2101                           ;psect for function _adc_read
  2102  06DC                     _adc_read:	
  2103                           
  2104                           ;incstack = 0
  2105                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  2106                           ;adc_read@channel stored from wreg
  2107  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  2108  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  2109  06DE  00A2               	movwf	adc_read@channel
  2110                           
  2111                           ;GAS_LEAK.c: 67: if(channel > 7)
  2112  06DF  3008               	movlw	8
  2113  06E0  0222               	subwf	adc_read@channel,w
  2114  06E1  1C03               	skipc
  2115  06E2  2EE6               	goto	l1812
  2116                           
  2117                           ;GAS_LEAK.c: 68: return 0;
  2118  06E3  01F4               	clrf	?_adc_read
  2119  06E4  01F5               	clrf	?_adc_read+1
  2120  06E5  0008               	return
  2121  06E6                     l1812:	
  2122                           
  2123                           ;GAS_LEAK.c: 70: ADCON0 &= 0xC5;
  2124  06E6  30C5               	movlw	197
  2125  06E7  00A0               	movwf	??_adc_read
  2126  06E8  0820               	movf	??_adc_read,w
  2127  06E9  059F               	andwf	31,f	;volatile
  2128                           
  2129                           ;GAS_LEAK.c: 71: ADCON0 |= channel<<3;
  2130  06EA  0822               	movf	adc_read@channel,w
  2131  06EB  00A0               	movwf	??_adc_read
  2132  06EC  3002               	movlw	2
  2133  06ED                     u1995:	
  2134  06ED  1003               	clrc
  2135  06EE  0DA0               	rlf	??_adc_read,f
  2136  06EF  3EFF               	addlw	-1
  2137  06F0  1D03               	skipz
  2138  06F1  2EED               	goto	u1995
  2139  06F2  1003               	clrc
  2140  06F3  0D20               	rlf	??_adc_read,w
  2141  06F4  00A1               	movwf	??_adc_read+1
  2142  06F5  0821               	movf	??_adc_read+1,w
  2143  06F6  049F               	iorwf	31,f	;volatile
  2144                           
  2145                           ;GAS_LEAK.c: 72: _delay((unsigned long)((2)*(20000000/4000.0)));
  2146  06F7  300D               	movlw	13
  2147  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  2148  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  2149  06FA  00A1               	movwf	??_adc_read+1
  2150  06FB  30FB               	movlw	251
  2151  06FC  00A0               	movwf	??_adc_read
  2152  06FD                     u2357:	
  2153  06FD  0BA0               	decfsz	??_adc_read,f
  2154  06FE  2EFD               	goto	u2357
  2155  06FF  0BA1               	decfsz	??_adc_read+1,f
  2156  0700  2EFD               	goto	u2357
  2157                           
  2158                           ;GAS_LEAK.c: 73: GO_nDONE = 1;
  2159  0701  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0702  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0703  151F               	bsf	31,2	;volatile
  2162  0704                     l157:	
  2163                           ;GAS_LEAK.c: 74: while(GO_nDONE);
  2164                           
  2165  0704  191F               	btfsc	31,2	;volatile
  2166  0705  2F04               	goto	l157
  2167                           
  2168                           ;GAS_LEAK.c: 75: return ((ADRESH<<8)+ADRESL);
  2169  0706  081E               	movf	30,w	;volatile
  2170  0707  00F5               	movwf	?_adc_read+1
  2171  0708  1683               	bsf	3,5	;RP0=1, select bank1
  2172  0709  1303               	bcf	3,6	;RP1=0, select bank1
  2173  070A  081E               	movf	30,w	;volatile
  2174  070B  00F4               	movwf	?_adc_read
  2175  070C  0008               	return
  2176  070D                     __end_of_adc_read:	
  2177                           
  2178                           	psect	text9
  2179  07D5                     __ptext9:	
  2180 ;; *************** function _adc_init *****************
  2181 ;; Defined at:
  2182 ;;		line 62 in file "GAS_LEAK.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2196 ;;      Params:         0       0       0       0       0
  2197 ;;      Locals:         0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0
  2199 ;;      Totals:         0       0       0       0       0
  2200 ;;Total ram usage:        0 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_main
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           
  2211                           ;psect for function _adc_init
  2212  07D5                     _adc_init:	
  2213                           
  2214                           ;GAS_LEAK.c: 63: ADCON0 = 0x81;
  2215                           
  2216                           ;incstack = 0
  2217                           ; Regs used in _adc_init: [wreg]
  2218  07D5  3081               	movlw	129
  2219  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  2220  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  2221  07D8  009F               	movwf	31	;volatile
  2222                           
  2223                           ;GAS_LEAK.c: 64: ADCON1 = 0xC0;
  2224  07D9  30C0               	movlw	192
  2225  07DA  1683               	bsf	3,5	;RP0=1, select bank1
  2226  07DB  1303               	bcf	3,6	;RP1=0, select bank1
  2227  07DC  009F               	movwf	31	;volatile
  2228  07DD  0008               	return
  2229  07DE                     __end_of_adc_init:	
  2230                           
  2231                           	psect	text10
  2232  077C                     __ptext10:	
  2233 ;; *************** function ___lwtoft *****************
  2234 ;; Defined at:
  2235 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  c               2    8[BANK0 ] unsigned int 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  3    8[BANK0 ] float 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         0       3       0       0       0
  2250 ;;      Locals:         0       0       0       0       0
  2251 ;;      Temps:          1       0       0       0       0
  2252 ;;      Totals:         1       3       0       0       0
  2253 ;;Total ram usage:        4 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    2
  2256 ;; This function calls:
  2257 ;;		___ftpack
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           
  2264                           ;psect for function ___lwtoft
  2265  077C                     ___lwtoft:	
  2266                           
  2267                           ;incstack = 0
  2268                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2269  077C  1283               	bcf	3,5	;RP0=0, select bank0
  2270  077D  1303               	bcf	3,6	;RP1=0, select bank0
  2271  077E  0828               	movf	___lwtoft@c,w
  2272  077F  00A0               	movwf	___ftpack@arg
  2273  0780  0829               	movf	___lwtoft@c+1,w
  2274  0781  00A1               	movwf	___ftpack@arg+1
  2275  0782  01A2               	clrf	___ftpack@arg+2
  2276  0783  308E               	movlw	142
  2277  0784  00F4               	movwf	??___lwtoft
  2278  0785  0874               	movf	??___lwtoft,w
  2279  0786  00A3               	movwf	___ftpack@exp
  2280  0787  01A4               	clrf	___ftpack@sign
  2281  0788  120A  118A  24CF   	fcall	___ftpack
  2282  078B  1283               	bcf	3,5	;RP0=0, select bank0
  2283  078C  1303               	bcf	3,6	;RP1=0, select bank0
  2284  078D  0820               	movf	?___ftpack,w
  2285  078E  00A8               	movwf	?___lwtoft
  2286  078F  0821               	movf	?___ftpack+1,w
  2287  0790  00A9               	movwf	?___lwtoft+1
  2288  0791  0822               	movf	?___ftpack+2,w
  2289  0792  00AA               	movwf	?___lwtoft+2
  2290  0793  0008               	return
  2291  0794                     __end_of___lwtoft:	
  2292                           
  2293                           	psect	text11
  2294  03CC                     __ptext11:	
  2295 ;; *************** function ___fttol *****************
  2296 ;; Defined at:
  2297 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  f1              3   27[BANK0 ] float 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  lval            4   36[BANK0 ] unsigned long 
  2302 ;;  exp1            1   40[BANK0 ] unsigned char 
  2303 ;;  sign1           1   35[BANK0 ] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  4   27[BANK0 ] long 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2313 ;;      Params:         0       4       0       0       0
  2314 ;;      Locals:         0       6       0       0       0
  2315 ;;      Temps:          0       4       0       0       0
  2316 ;;      Totals:         0      14       0       0       0
  2317 ;;Total ram usage:       14 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    1
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function ___fttol
  2329  03CC                     ___fttol:	
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2333  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2334  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2335  03CE  083B               	movf	___fttol@f1,w
  2336  03CF  00BF               	movwf	??___fttol
  2337  03D0  083C               	movf	___fttol@f1+1,w
  2338  03D1  00C0               	movwf	??___fttol+1
  2339  03D2  083D               	movf	___fttol@f1+2,w
  2340  03D3  00C1               	movwf	??___fttol+2
  2341  03D4  1003               	clrc
  2342  03D5  0D40               	rlf	??___fttol+1,w
  2343  03D6  0D41               	rlf	??___fttol+2,w
  2344  03D7  00C2               	movwf	??___fttol+3
  2345  03D8  0842               	movf	??___fttol+3,w
  2346  03D9  00C8               	movwf	___fttol@exp1
  2347  03DA  0848               	movf	___fttol@exp1,w
  2348  03DB  1D03               	btfss	3,2
  2349  03DC  2BE6               	goto	l1508
  2350  03DD  3000               	movlw	0
  2351  03DE  00BE               	movwf	?___fttol+3
  2352  03DF  3000               	movlw	0
  2353  03E0  00BD               	movwf	?___fttol+2
  2354  03E1  3000               	movlw	0
  2355  03E2  00BC               	movwf	?___fttol+1
  2356  03E3  3000               	movlw	0
  2357  03E4  00BB               	movwf	?___fttol
  2358  03E5  0008               	return
  2359  03E6                     l1508:	
  2360  03E6  083B               	movf	___fttol@f1,w
  2361  03E7  00BF               	movwf	??___fttol
  2362  03E8  083C               	movf	___fttol@f1+1,w
  2363  03E9  00C0               	movwf	??___fttol+1
  2364  03EA  083D               	movf	___fttol@f1+2,w
  2365  03EB  00C1               	movwf	??___fttol+2
  2366  03EC  3017               	movlw	23
  2367  03ED                     u1515:	
  2368  03ED  1003               	clrc
  2369  03EE  0CC1               	rrf	??___fttol+2,f
  2370  03EF  0CC0               	rrf	??___fttol+1,f
  2371  03F0  0CBF               	rrf	??___fttol,f
  2372  03F1  3EFF               	addlw	-1
  2373  03F2  1D03               	skipz
  2374  03F3  2BED               	goto	u1515
  2375  03F4  083F               	movf	??___fttol,w
  2376  03F5  00C2               	movwf	??___fttol+3
  2377  03F6  0842               	movf	??___fttol+3,w
  2378  03F7  00C3               	movwf	___fttol@sign1
  2379  03F8  17BC               	bsf	___fttol@f1+1,7
  2380  03F9  30FF               	movlw	255
  2381  03FA  05BB               	andwf	___fttol@f1,f
  2382  03FB  30FF               	movlw	255
  2383  03FC  05BC               	andwf	___fttol@f1+1,f
  2384  03FD  3000               	movlw	0
  2385  03FE  05BD               	andwf	___fttol@f1+2,f
  2386  03FF  083B               	movf	___fttol@f1,w
  2387  0400  00C4               	movwf	___fttol@lval
  2388  0401  083C               	movf	___fttol@f1+1,w
  2389  0402  00C5               	movwf	___fttol@lval+1
  2390  0403  083D               	movf	___fttol@f1+2,w
  2391  0404  00C6               	movwf	___fttol@lval+2
  2392  0405  01C7               	clrf	___fttol@lval+3
  2393  0406  308E               	movlw	142
  2394  0407  02C8               	subwf	___fttol@exp1,f
  2395  0408  1FC8               	btfss	___fttol@exp1,7
  2396  0409  2C28               	goto	l1528
  2397  040A  0848               	movf	___fttol@exp1,w
  2398  040B  3A80               	xorlw	128
  2399  040C  3E8F               	addlw	143
  2400  040D  1803               	skipnc
  2401  040E  2C18               	goto	l1526
  2402  040F  3000               	movlw	0
  2403  0410  00BE               	movwf	?___fttol+3
  2404  0411  3000               	movlw	0
  2405  0412  00BD               	movwf	?___fttol+2
  2406  0413  3000               	movlw	0
  2407  0414  00BC               	movwf	?___fttol+1
  2408  0415  3000               	movlw	0
  2409  0416  00BB               	movwf	?___fttol
  2410  0417  0008               	return
  2411  0418                     l1526:	
  2412  0418  3001               	movlw	1
  2413  0419                     u1545:	
  2414  0419  1003               	clrc
  2415  041A  0CC7               	rrf	___fttol@lval+3,f
  2416  041B  0CC6               	rrf	___fttol@lval+2,f
  2417  041C  0CC5               	rrf	___fttol@lval+1,f
  2418  041D  0CC4               	rrf	___fttol@lval,f
  2419  041E  3EFF               	addlw	-1
  2420  041F  1D03               	skipz
  2421  0420  2C19               	goto	u1545
  2422  0421  3001               	movlw	1
  2423  0422  00BF               	movwf	??___fttol
  2424  0423  083F               	movf	??___fttol,w
  2425  0424  07C8               	addwf	___fttol@exp1,f
  2426  0425  1903               	btfsc	3,2
  2427  0426  2C43               	goto	l1536
  2428  0427  2C18               	goto	l1526
  2429  0428                     l1528:	
  2430  0428  3018               	movlw	24
  2431  0429  0248               	subwf	___fttol@exp1,w
  2432  042A  1C03               	skipc
  2433  042B  2C40               	goto	l544
  2434  042C  3000               	movlw	0
  2435  042D  00BE               	movwf	?___fttol+3
  2436  042E  3000               	movlw	0
  2437  042F  00BD               	movwf	?___fttol+2
  2438  0430  3000               	movlw	0
  2439  0431  00BC               	movwf	?___fttol+1
  2440  0432  3000               	movlw	0
  2441  0433  00BB               	movwf	?___fttol
  2442  0434  0008               	return
  2443  0435                     l1534:	
  2444  0435  3001               	movlw	1
  2445  0436  00BF               	movwf	??___fttol
  2446  0437                     u1575:	
  2447  0437  1003               	clrc
  2448  0438  0DC4               	rlf	___fttol@lval,f
  2449  0439  0DC5               	rlf	___fttol@lval+1,f
  2450  043A  0DC6               	rlf	___fttol@lval+2,f
  2451  043B  0DC7               	rlf	___fttol@lval+3,f
  2452  043C  0BBF               	decfsz	??___fttol,f
  2453  043D  2C37               	goto	u1575
  2454  043E  3001               	movlw	1
  2455  043F  02C8               	subwf	___fttol@exp1,f
  2456  0440                     l544:	
  2457  0440  0848               	movf	___fttol@exp1,w
  2458  0441  1D03               	btfss	3,2
  2459  0442  2C35               	goto	l1534
  2460  0443                     l1536:	
  2461  0443  0843               	movf	___fttol@sign1,w
  2462  0444  1903               	btfsc	3,2
  2463  0445  2C51               	goto	l1540
  2464  0446  09C4               	comf	___fttol@lval,f
  2465  0447  09C5               	comf	___fttol@lval+1,f
  2466  0448  09C6               	comf	___fttol@lval+2,f
  2467  0449  09C7               	comf	___fttol@lval+3,f
  2468  044A  0AC4               	incf	___fttol@lval,f
  2469  044B  1903               	skipnz
  2470  044C  0AC5               	incf	___fttol@lval+1,f
  2471  044D  1903               	skipnz
  2472  044E  0AC6               	incf	___fttol@lval+2,f
  2473  044F  1903               	skipnz
  2474  0450  0AC7               	incf	___fttol@lval+3,f
  2475  0451                     l1540:	
  2476  0451  0847               	movf	___fttol@lval+3,w
  2477  0452  00BE               	movwf	?___fttol+3
  2478  0453  0846               	movf	___fttol@lval+2,w
  2479  0454  00BD               	movwf	?___fttol+2
  2480  0455  0845               	movf	___fttol@lval+1,w
  2481  0456  00BC               	movwf	?___fttol+1
  2482  0457  0844               	movf	___fttol@lval,w
  2483  0458  00BB               	movwf	?___fttol
  2484  0459  0008               	return
  2485  045A                     __end_of___fttol:	
  2486                           
  2487                           	psect	text12
  2488  02F9                     __ptext12:	
  2489 ;; *************** function ___ftmul *****************
  2490 ;; Defined at:
  2491 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  f1              3   11[BANK0 ] float 
  2494 ;;  f2              3   14[BANK0 ] float 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  2497 ;;  sign            1   26[BANK0 ] unsigned char 
  2498 ;;  cntr            1   25[BANK0 ] unsigned char 
  2499 ;;  exp             1   21[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  3   11[BANK0 ] float 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0, pclath, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2509 ;;      Params:         0       6       0       0       0
  2510 ;;      Locals:         0       6       0       0       0
  2511 ;;      Temps:          0       4       0       0       0
  2512 ;;      Totals:         0      16       0       0       0
  2513 ;;Total ram usage:       16 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    2
  2516 ;; This function calls:
  2517 ;;		___ftpack
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function ___ftmul
  2525  02F9                     ___ftmul:	
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2529  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2530  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2531  02FB  082B               	movf	___ftmul@f1,w
  2532  02FC  00B1               	movwf	??___ftmul
  2533  02FD  082C               	movf	___ftmul@f1+1,w
  2534  02FE  00B2               	movwf	??___ftmul+1
  2535  02FF  082D               	movf	___ftmul@f1+2,w
  2536  0300  00B3               	movwf	??___ftmul+2
  2537  0301  1003               	clrc
  2538  0302  0D32               	rlf	??___ftmul+1,w
  2539  0303  0D33               	rlf	??___ftmul+2,w
  2540  0304  00B4               	movwf	??___ftmul+3
  2541  0305  0834               	movf	??___ftmul+3,w
  2542  0306  00B5               	movwf	___ftmul@exp
  2543  0307  0835               	movf	___ftmul@exp,w
  2544  0308  1D03               	btfss	3,2
  2545  0309  2B11               	goto	l1886
  2546  030A  3000               	movlw	0
  2547  030B  00AB               	movwf	?___ftmul
  2548  030C  3000               	movlw	0
  2549  030D  00AC               	movwf	?___ftmul+1
  2550  030E  3000               	movlw	0
  2551  030F  00AD               	movwf	?___ftmul+2
  2552  0310  0008               	return
  2553  0311                     l1886:	
  2554  0311  082E               	movf	___ftmul@f2,w
  2555  0312  00B1               	movwf	??___ftmul
  2556  0313  082F               	movf	___ftmul@f2+1,w
  2557  0314  00B2               	movwf	??___ftmul+1
  2558  0315  0830               	movf	___ftmul@f2+2,w
  2559  0316  00B3               	movwf	??___ftmul+2
  2560  0317  1003               	clrc
  2561  0318  0D32               	rlf	??___ftmul+1,w
  2562  0319  0D33               	rlf	??___ftmul+2,w
  2563  031A  00B4               	movwf	??___ftmul+3
  2564  031B  0834               	movf	??___ftmul+3,w
  2565  031C  00BA               	movwf	___ftmul@sign
  2566  031D  083A               	movf	___ftmul@sign,w
  2567  031E  1D03               	btfss	3,2
  2568  031F  2B27               	goto	l1892
  2569  0320  3000               	movlw	0
  2570  0321  00AB               	movwf	?___ftmul
  2571  0322  3000               	movlw	0
  2572  0323  00AC               	movwf	?___ftmul+1
  2573  0324  3000               	movlw	0
  2574  0325  00AD               	movwf	?___ftmul+2
  2575  0326  0008               	return
  2576  0327                     l1892:	
  2577  0327  083A               	movf	___ftmul@sign,w
  2578  0328  3E7B               	addlw	123
  2579  0329  00B1               	movwf	??___ftmul
  2580  032A  0831               	movf	??___ftmul,w
  2581  032B  07B5               	addwf	___ftmul@exp,f
  2582  032C  082B               	movf	___ftmul@f1,w
  2583  032D  00B1               	movwf	??___ftmul
  2584  032E  082C               	movf	___ftmul@f1+1,w
  2585  032F  00B2               	movwf	??___ftmul+1
  2586  0330  082D               	movf	___ftmul@f1+2,w
  2587  0331  00B3               	movwf	??___ftmul+2
  2588  0332  3010               	movlw	16
  2589  0333                     u2115:	
  2590  0333  1003               	clrc
  2591  0334  0CB3               	rrf	??___ftmul+2,f
  2592  0335  0CB2               	rrf	??___ftmul+1,f
  2593  0336  0CB1               	rrf	??___ftmul,f
  2594  0337  3EFF               	addlw	-1
  2595  0338  1D03               	skipz
  2596  0339  2B33               	goto	u2115
  2597  033A  0831               	movf	??___ftmul,w
  2598  033B  00B4               	movwf	??___ftmul+3
  2599  033C  0834               	movf	??___ftmul+3,w
  2600  033D  00BA               	movwf	___ftmul@sign
  2601  033E  082E               	movf	___ftmul@f2,w
  2602  033F  00B1               	movwf	??___ftmul
  2603  0340  082F               	movf	___ftmul@f2+1,w
  2604  0341  00B2               	movwf	??___ftmul+1
  2605  0342  0830               	movf	___ftmul@f2+2,w
  2606  0343  00B3               	movwf	??___ftmul+2
  2607  0344  3010               	movlw	16
  2608  0345                     u2125:	
  2609  0345  1003               	clrc
  2610  0346  0CB3               	rrf	??___ftmul+2,f
  2611  0347  0CB2               	rrf	??___ftmul+1,f
  2612  0348  0CB1               	rrf	??___ftmul,f
  2613  0349  3EFF               	addlw	-1
  2614  034A  1D03               	skipz
  2615  034B  2B45               	goto	u2125
  2616  034C  0831               	movf	??___ftmul,w
  2617  034D  00B4               	movwf	??___ftmul+3
  2618  034E  0834               	movf	??___ftmul+3,w
  2619  034F  06BA               	xorwf	___ftmul@sign,f
  2620  0350  3080               	movlw	128
  2621  0351  00B1               	movwf	??___ftmul
  2622  0352  0831               	movf	??___ftmul,w
  2623  0353  05BA               	andwf	___ftmul@sign,f
  2624  0354  17AC               	bsf	___ftmul@f1+1,7
  2625  0355  17AF               	bsf	___ftmul@f2+1,7
  2626  0356  30FF               	movlw	255
  2627  0357  05AE               	andwf	___ftmul@f2,f
  2628  0358  30FF               	movlw	255
  2629  0359  05AF               	andwf	___ftmul@f2+1,f
  2630  035A  3000               	movlw	0
  2631  035B  05B0               	andwf	___ftmul@f2+2,f
  2632  035C  3000               	movlw	0
  2633  035D  00B6               	movwf	___ftmul@f3_as_product
  2634  035E  3000               	movlw	0
  2635  035F  00B7               	movwf	___ftmul@f3_as_product+1
  2636  0360  3000               	movlw	0
  2637  0361  00B8               	movwf	___ftmul@f3_as_product+2
  2638  0362  3007               	movlw	7
  2639  0363  00B1               	movwf	??___ftmul
  2640  0364  0831               	movf	??___ftmul,w
  2641  0365  00B9               	movwf	___ftmul@cntr
  2642  0366                     l1904:	
  2643  0366  1C2B               	btfss	___ftmul@f1,0
  2644  0367  2B76               	goto	l1908
  2645  0368  082E               	movf	___ftmul@f2,w
  2646  0369  07B6               	addwf	___ftmul@f3_as_product,f
  2647  036A  082F               	movf	___ftmul@f2+1,w
  2648  036B  1103               	clrz
  2649  036C  1803               	skipnc
  2650  036D  0A2F               	incf	___ftmul@f2+1,w
  2651  036E  1D03               	btfss	3,2
  2652  036F  07B7               	addwf	___ftmul@f3_as_product+1,f
  2653  0370  0830               	movf	___ftmul@f2+2,w
  2654  0371  1103               	clrz
  2655  0372  1803               	skipnc
  2656  0373  0A30               	incf	___ftmul@f2+2,w
  2657  0374  1D03               	btfss	3,2
  2658  0375  07B8               	addwf	___ftmul@f3_as_product+2,f
  2659  0376                     l1908:	
  2660  0376  3001               	movlw	1
  2661  0377                     u2155:	
  2662  0377  1003               	clrc
  2663  0378  0CAD               	rrf	___ftmul@f1+2,f
  2664  0379  0CAC               	rrf	___ftmul@f1+1,f
  2665  037A  0CAB               	rrf	___ftmul@f1,f
  2666  037B  3EFF               	addlw	-1
  2667  037C  1D03               	skipz
  2668  037D  2B77               	goto	u2155
  2669  037E  3001               	movlw	1
  2670  037F                     u2165:	
  2671  037F  1003               	clrc
  2672  0380  0DAE               	rlf	___ftmul@f2,f
  2673  0381  0DAF               	rlf	___ftmul@f2+1,f
  2674  0382  0DB0               	rlf	___ftmul@f2+2,f
  2675  0383  3EFF               	addlw	-1
  2676  0384  1D03               	skipz
  2677  0385  2B7F               	goto	u2165
  2678  0386  3001               	movlw	1
  2679  0387  02B9               	subwf	___ftmul@cntr,f
  2680  0388  1D03               	btfss	3,2
  2681  0389  2B66               	goto	l1904
  2682  038A  3009               	movlw	9
  2683  038B  00B1               	movwf	??___ftmul
  2684  038C  0831               	movf	??___ftmul,w
  2685  038D  00B9               	movwf	___ftmul@cntr
  2686  038E                     l1916:	
  2687  038E  1C2B               	btfss	___ftmul@f1,0
  2688  038F  2B9E               	goto	l1920
  2689  0390  082E               	movf	___ftmul@f2,w
  2690  0391  07B6               	addwf	___ftmul@f3_as_product,f
  2691  0392  082F               	movf	___ftmul@f2+1,w
  2692  0393  1103               	clrz
  2693  0394  1803               	skipnc
  2694  0395  0A2F               	incf	___ftmul@f2+1,w
  2695  0396  1D03               	btfss	3,2
  2696  0397  07B7               	addwf	___ftmul@f3_as_product+1,f
  2697  0398  0830               	movf	___ftmul@f2+2,w
  2698  0399  1103               	clrz
  2699  039A  1803               	skipnc
  2700  039B  0A30               	incf	___ftmul@f2+2,w
  2701  039C  1D03               	btfss	3,2
  2702  039D  07B8               	addwf	___ftmul@f3_as_product+2,f
  2703  039E                     l1920:	
  2704  039E  3001               	movlw	1
  2705  039F                     u2205:	
  2706  039F  1003               	clrc
  2707  03A0  0CAD               	rrf	___ftmul@f1+2,f
  2708  03A1  0CAC               	rrf	___ftmul@f1+1,f
  2709  03A2  0CAB               	rrf	___ftmul@f1,f
  2710  03A3  3EFF               	addlw	-1
  2711  03A4  1D03               	skipz
  2712  03A5  2B9F               	goto	u2205
  2713  03A6  3001               	movlw	1
  2714  03A7                     u2215:	
  2715  03A7  1003               	clrc
  2716  03A8  0CB8               	rrf	___ftmul@f3_as_product+2,f
  2717  03A9  0CB7               	rrf	___ftmul@f3_as_product+1,f
  2718  03AA  0CB6               	rrf	___ftmul@f3_as_product,f
  2719  03AB  3EFF               	addlw	-1
  2720  03AC  1D03               	skipz
  2721  03AD  2BA7               	goto	u2215
  2722  03AE  3001               	movlw	1
  2723  03AF  02B9               	subwf	___ftmul@cntr,f
  2724  03B0  1D03               	btfss	3,2
  2725  03B1  2B8E               	goto	l1916
  2726  03B2  0836               	movf	___ftmul@f3_as_product,w
  2727  03B3  00A0               	movwf	___ftpack@arg
  2728  03B4  0837               	movf	___ftmul@f3_as_product+1,w
  2729  03B5  00A1               	movwf	___ftpack@arg+1
  2730  03B6  0838               	movf	___ftmul@f3_as_product+2,w
  2731  03B7  00A2               	movwf	___ftpack@arg+2
  2732  03B8  0835               	movf	___ftmul@exp,w
  2733  03B9  00B1               	movwf	??___ftmul
  2734  03BA  0831               	movf	??___ftmul,w
  2735  03BB  00A3               	movwf	___ftpack@exp
  2736  03BC  083A               	movf	___ftmul@sign,w
  2737  03BD  00B2               	movwf	??___ftmul+1
  2738  03BE  0832               	movf	??___ftmul+1,w
  2739  03BF  00A4               	movwf	___ftpack@sign
  2740  03C0  120A  118A  24CF   	fcall	___ftpack
  2741  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2742  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2743  03C5  0820               	movf	?___ftpack,w
  2744  03C6  00AB               	movwf	?___ftmul
  2745  03C7  0821               	movf	?___ftpack+1,w
  2746  03C8  00AC               	movwf	?___ftmul+1
  2747  03C9  0822               	movf	?___ftpack+2,w
  2748  03CA  00AD               	movwf	?___ftmul+2
  2749  03CB  0008               	return
  2750  03CC                     __end_of___ftmul:	
  2751                           
  2752                           	psect	text13
  2753  04CF                     __ptext13:	
  2754 ;; *************** function ___ftpack *****************
  2755 ;; Defined at:
  2756 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  arg             3    0[BANK0 ] unsigned um
  2759 ;;  exp             1    3[BANK0 ] unsigned char 
  2760 ;;  sign            1    4[BANK0 ] unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  3    0[BANK0 ] float 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2772 ;;      Params:         0       5       0       0       0
  2773 ;;      Locals:         0       0       0       0       0
  2774 ;;      Temps:          0       3       0       0       0
  2775 ;;      Totals:         0       8       0       0       0
  2776 ;;Total ram usage:        8 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    1
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		___ftmul
  2783 ;;		___lwtoft
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           
  2788                           ;psect for function ___ftpack
  2789  04CF                     ___ftpack:	
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2793  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2794  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2795  04D1  0823               	movf	___ftpack@exp,w
  2796  04D2  1903               	btfsc	3,2
  2797  04D3  2CD9               	goto	l1704
  2798  04D4  0822               	movf	___ftpack@arg+2,w
  2799  04D5  0421               	iorwf	___ftpack@arg+1,w
  2800  04D6  0420               	iorwf	___ftpack@arg,w
  2801  04D7  1D03               	skipz
  2802  04D8  2CEC               	goto	l1710
  2803  04D9                     l1704:	
  2804  04D9  3000               	movlw	0
  2805  04DA  00A0               	movwf	?___ftpack
  2806  04DB  3000               	movlw	0
  2807  04DC  00A1               	movwf	?___ftpack+1
  2808  04DD  3000               	movlw	0
  2809  04DE  00A2               	movwf	?___ftpack+2
  2810  04DF  0008               	return
  2811  04E0                     l1708:	
  2812  04E0  3001               	movlw	1
  2813  04E1  00A5               	movwf	??___ftpack
  2814  04E2  0825               	movf	??___ftpack,w
  2815  04E3  07A3               	addwf	___ftpack@exp,f
  2816  04E4  3001               	movlw	1
  2817  04E5                     u1735:	
  2818  04E5  1003               	clrc
  2819  04E6  0CA2               	rrf	___ftpack@arg+2,f
  2820  04E7  0CA1               	rrf	___ftpack@arg+1,f
  2821  04E8  0CA0               	rrf	___ftpack@arg,f
  2822  04E9  3EFF               	addlw	-1
  2823  04EA  1D03               	skipz
  2824  04EB  2CE5               	goto	u1735
  2825  04EC                     l1710:	
  2826  04EC  30FE               	movlw	254
  2827  04ED  0522               	andwf	___ftpack@arg+2,w
  2828  04EE  1903               	btfsc	3,2
  2829  04EF  2D07               	goto	l453
  2830  04F0  2CE0               	goto	l1708
  2831  04F1                     l1712:	
  2832  04F1  3001               	movlw	1
  2833  04F2  00A5               	movwf	??___ftpack
  2834  04F3  0825               	movf	??___ftpack,w
  2835  04F4  07A3               	addwf	___ftpack@exp,f
  2836  04F5  3001               	movlw	1
  2837  04F6  07A0               	addwf	___ftpack@arg,f
  2838  04F7  3000               	movlw	0
  2839  04F8  1803               	skipnc
  2840  04F9  3001               	movlw	1
  2841  04FA  07A1               	addwf	___ftpack@arg+1,f
  2842  04FB  3000               	movlw	0
  2843  04FC  1803               	skipnc
  2844  04FD  3001               	movlw	1
  2845  04FE  07A2               	addwf	___ftpack@arg+2,f
  2846  04FF  3001               	movlw	1
  2847  0500                     u1755:	
  2848  0500  1003               	clrc
  2849  0501  0CA2               	rrf	___ftpack@arg+2,f
  2850  0502  0CA1               	rrf	___ftpack@arg+1,f
  2851  0503  0CA0               	rrf	___ftpack@arg,f
  2852  0504  3EFF               	addlw	-1
  2853  0505  1D03               	skipz
  2854  0506  2D00               	goto	u1755
  2855  0507                     l453:	
  2856  0507  30FF               	movlw	255
  2857  0508  0522               	andwf	___ftpack@arg+2,w
  2858  0509  1903               	btfsc	3,2
  2859  050A  2D16               	goto	l1720
  2860  050B  2CF1               	goto	l1712
  2861  050C                     l1718:	
  2862  050C  3001               	movlw	1
  2863  050D  02A3               	subwf	___ftpack@exp,f
  2864  050E  3001               	movlw	1
  2865  050F                     u1775:	
  2866  050F  1003               	clrc
  2867  0510  0DA0               	rlf	___ftpack@arg,f
  2868  0511  0DA1               	rlf	___ftpack@arg+1,f
  2869  0512  0DA2               	rlf	___ftpack@arg+2,f
  2870  0513  3EFF               	addlw	-1
  2871  0514  1D03               	skipz
  2872  0515  2D0F               	goto	u1775
  2873  0516                     l1720:	
  2874  0516  1BA1               	btfsc	___ftpack@arg+1,7
  2875  0517  2D1C               	goto	l460
  2876  0518  3002               	movlw	2
  2877  0519  0223               	subwf	___ftpack@exp,w
  2878  051A  1803               	skipnc
  2879  051B  2D0C               	goto	l1718
  2880  051C                     l460:	
  2881  051C  1823               	btfsc	___ftpack@exp,0
  2882  051D  2D24               	goto	l461
  2883  051E  30FF               	movlw	255
  2884  051F  05A0               	andwf	___ftpack@arg,f
  2885  0520  307F               	movlw	127
  2886  0521  05A1               	andwf	___ftpack@arg+1,f
  2887  0522  30FF               	movlw	255
  2888  0523  05A2               	andwf	___ftpack@arg+2,f
  2889  0524                     l461:	
  2890  0524  1003               	clrc
  2891  0525  0CA3               	rrf	___ftpack@exp,f
  2892  0526  0823               	movf	___ftpack@exp,w
  2893  0527  00A5               	movwf	??___ftpack
  2894  0528  01A6               	clrf	??___ftpack+1
  2895  0529  01A7               	clrf	??___ftpack+2
  2896  052A  3010               	movlw	16
  2897  052B                     u1815:	
  2898  052B  1003               	clrc
  2899  052C  0DA5               	rlf	??___ftpack,f
  2900  052D  0DA6               	rlf	??___ftpack+1,f
  2901  052E  0DA7               	rlf	??___ftpack+2,f
  2902  052F  3EFF               	addlw	-1
  2903  0530  1D03               	skipz
  2904  0531  2D2B               	goto	u1815
  2905  0532  0825               	movf	??___ftpack,w
  2906  0533  04A0               	iorwf	___ftpack@arg,f
  2907  0534  0826               	movf	??___ftpack+1,w
  2908  0535  04A1               	iorwf	___ftpack@arg+1,f
  2909  0536  0827               	movf	??___ftpack+2,w
  2910  0537  04A2               	iorwf	___ftpack@arg+2,f
  2911  0538  0824               	movf	___ftpack@sign,w
  2912  0539  1903               	btfsc	3,2
  2913  053A  0008               	return
  2914  053B  17A2               	bsf	___ftpack@arg+2,7
  2915  053C  0008               	return
  2916  053D                     __end_of___ftpack:	
  2917                           
  2918                           	psect	text14
  2919  05F0                     __ptext14:	
  2920 ;; *************** function _Lcd_Write_String *****************
  2921 ;; Defined at:
  2922 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  a               2    3[BANK0 ] PTR unsigned char 
  2925 ;;		 -> g(10), STR_8(11), STR_7(17), t(10), 
  2926 ;;		 -> STR_5(8), STR_4(17), STR_3(17), STR_2(17), 
  2927 ;;		 -> STR_1(17), 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  i               2    8[BANK0 ] int 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2939 ;;      Params:         0       2       0       0       0
  2940 ;;      Locals:         0       2       0       0       0
  2941 ;;      Temps:          0       3       0       0       0
  2942 ;;      Totals:         0       7       0       0       0
  2943 ;;Total ram usage:        7 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    3
  2946 ;; This function calls:
  2947 ;;		_Lcd_Write_Char
  2948 ;; This function is called by:
  2949 ;;		_main
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           
  2954                           ;psect for function _Lcd_Write_String
  2955  05F0                     _Lcd_Write_String:	
  2956                           
  2957                           ;lcd.h: 94: int i;
  2958                           ;lcd.h: 95: for(i=0;a[i]!='\0';i++)
  2959                           
  2960                           ;incstack = 0
  2961                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2962  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2963  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2964  05F2  01A8               	clrf	Lcd_Write_String@i
  2965  05F3  01A9               	clrf	Lcd_Write_String@i+1
  2966  05F4                     l1796:	
  2967  05F4  0828               	movf	Lcd_Write_String@i,w
  2968  05F5  0723               	addwf	Lcd_Write_String@a,w
  2969  05F6  00A6               	movwf	??_Lcd_Write_String+1
  2970  05F7  0824               	movf	Lcd_Write_String@a+1,w
  2971  05F8  00A5               	movwf	??_Lcd_Write_String
  2972  05F9  1803               	skipnc
  2973  05FA  0AA5               	incf	??_Lcd_Write_String,f
  2974  05FB  1BA8               	btfsc	Lcd_Write_String@i,7
  2975  05FC  03A5               	decf	??_Lcd_Write_String,f
  2976  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2977  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2978  05FF  0825               	movf	??_Lcd_Write_String,w
  2979  0600  00A7               	movwf	??_Lcd_Write_String+2
  2980  0601  0827               	movf	??_Lcd_Write_String+2,w
  2981  0602  00FF               	movwf	127
  2982  0603  0826               	movf	??_Lcd_Write_String+1,w
  2983  0604  0084               	movwf	4
  2984  0605  120A  118A  245A  120A  118A  	fcall	stringtab
  2985  060A  3A00               	xorlw	0
  2986  060B  1903               	btfsc	3,2
  2987  060C  0008               	return
  2988                           
  2989                           ;lcd.h: 96: Lcd_Write_Char(a[i]);
  2990  060D  0828               	movf	Lcd_Write_String@i,w
  2991  060E  0723               	addwf	Lcd_Write_String@a,w
  2992  060F  00A6               	movwf	??_Lcd_Write_String+1
  2993  0610  0824               	movf	Lcd_Write_String@a+1,w
  2994  0611  00A5               	movwf	??_Lcd_Write_String
  2995  0612  1803               	skipnc
  2996  0613  0AA5               	incf	??_Lcd_Write_String,f
  2997  0614  1BA8               	btfsc	Lcd_Write_String@i,7
  2998  0615  03A5               	decf	??_Lcd_Write_String,f
  2999  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3000  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3001  0618  0825               	movf	??_Lcd_Write_String,w
  3002  0619  00A7               	movwf	??_Lcd_Write_String+2
  3003  061A  0827               	movf	??_Lcd_Write_String+2,w
  3004  061B  00FF               	movwf	127
  3005  061C  0826               	movf	??_Lcd_Write_String+1,w
  3006  061D  0084               	movwf	4
  3007  061E  120A  118A  245A  120A  118A  	fcall	stringtab
  3008  0623  120A  118A  266F  120A  118A  	fcall	_Lcd_Write_Char
  3009  0628  3001               	movlw	1
  3010  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3011  062A  1303               	bcf	3,6	;RP1=0, select bank0
  3012  062B  07A8               	addwf	Lcd_Write_String@i,f
  3013  062C  1803               	skipnc
  3014  062D  0AA9               	incf	Lcd_Write_String@i+1,f
  3015  062E  3000               	movlw	0
  3016  062F  07A9               	addwf	Lcd_Write_String@i+1,f
  3017  0630  2DF4               	goto	l1796
  3018  0631                     __end_of_Lcd_Write_String:	
  3019                           
  3020                           	psect	text15
  3021  066F                     __ptext15:	
  3022 ;; *************** function _Lcd_Write_Char *****************
  3023 ;; Defined at:
  3024 ;;		line 76 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  a               1    wreg     unsigned char 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  a               1    2[BANK0 ] unsigned char 
  3029 ;;  y               1    1[BANK0 ] unsigned char 
  3030 ;;  temp            1    0[BANK0 ] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         0       0       0       0       0
  3041 ;;      Locals:         0       3       0       0       0
  3042 ;;      Temps:          1       0       0       0       0
  3043 ;;      Totals:         1       3       0       0       0
  3044 ;;Total ram usage:        4 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    2
  3047 ;; This function calls:
  3048 ;;		_Lcd_Port
  3049 ;; This function is called by:
  3050 ;;		_Lcd_Write_String
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _Lcd_Write_Char
  3056  066F                     _Lcd_Write_Char:	
  3057                           
  3058                           ;incstack = 0
  3059                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3060                           ;Lcd_Write_Char@a stored from wreg
  3061  066F  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0670  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0671  00A2               	movwf	Lcd_Write_Char@a
  3064                           
  3065                           ;lcd.h: 78: char temp,y;
  3066                           ;lcd.h: 79: temp = a&0x0F;
  3067  0672  0822               	movf	Lcd_Write_Char@a,w
  3068  0673  390F               	andlw	15
  3069  0674  00F5               	movwf	??_Lcd_Write_Char
  3070  0675  0875               	movf	??_Lcd_Write_Char,w
  3071  0676  00A0               	movwf	Lcd_Write_Char@temp
  3072                           
  3073                           ;lcd.h: 80: y = a&0xF0;
  3074  0677  0822               	movf	Lcd_Write_Char@a,w
  3075  0678  39F0               	andlw	240
  3076  0679  00F5               	movwf	??_Lcd_Write_Char
  3077  067A  0875               	movf	??_Lcd_Write_Char,w
  3078  067B  00A1               	movwf	Lcd_Write_Char@y
  3079                           
  3080                           ;lcd.h: 81: RD2 = 1;
  3081  067C  1508               	bsf	8,2	;volatile
  3082                           
  3083                           ;lcd.h: 82: Lcd_Port(y>>4);
  3084  067D  0821               	movf	Lcd_Write_Char@y,w
  3085  067E  00F5               	movwf	??_Lcd_Write_Char
  3086  067F  3004               	movlw	4
  3087  0680                     u1675:	
  3088  0680  1003               	clrc
  3089  0681  0CF5               	rrf	??_Lcd_Write_Char,f
  3090  0682  3EFF               	addlw	-1
  3091  0683  1D03               	skipz
  3092  0684  2E80               	goto	u1675
  3093  0685  0875               	movf	??_Lcd_Write_Char,w
  3094  0686  120A  118A  2762  120A  118A  	fcall	_Lcd_Port
  3095                           
  3096                           ;lcd.h: 83: RD3 = 1;
  3097  068B  1283               	bcf	3,5	;RP0=0, select bank0
  3098  068C  1303               	bcf	3,6	;RP1=0, select bank0
  3099  068D  1588               	bsf	8,3	;volatile
  3100                           
  3101                           ;lcd.h: 84: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3102  068E  3042               	movlw	66
  3103  068F  00F5               	movwf	??_Lcd_Write_Char
  3104  0690                     u2367:	
  3105  0690  0BF5               	decfsz	??_Lcd_Write_Char,f
  3106  0691  2E90               	goto	u2367
  3107  0692  0000               	nop
  3108                           
  3109                           ;lcd.h: 85: RD3 = 0;
  3110  0693  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0694  1303               	bcf	3,6	;RP1=0, select bank0
  3112  0695  1188               	bcf	8,3	;volatile
  3113                           
  3114                           ;lcd.h: 86: Lcd_Port(temp);
  3115  0696  0820               	movf	Lcd_Write_Char@temp,w
  3116  0697  120A  118A  2762  120A  118A  	fcall	_Lcd_Port
  3117                           
  3118                           ;lcd.h: 87: RD3 = 1;
  3119  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3120  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3121  069E  1588               	bsf	8,3	;volatile
  3122                           
  3123                           ;lcd.h: 88: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3124  069F  3042               	movlw	66
  3125  06A0  00F5               	movwf	??_Lcd_Write_Char
  3126  06A1                     u2377:	
  3127  06A1  0BF5               	decfsz	??_Lcd_Write_Char,f
  3128  06A2  2EA1               	goto	u2377
  3129  06A3  0000               	nop
  3130                           
  3131                           ;lcd.h: 89: RD3 = 0;
  3132  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  3133  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  3134  06A6  1188               	bcf	8,3	;volatile
  3135  06A7  0008               	return
  3136  06A8                     __end_of_Lcd_Write_Char:	
  3137                           
  3138                           	psect	text16
  3139  059E                     __ptext16:	
  3140 ;; *************** function _Lcd_Set_Cursor *****************
  3141 ;; Defined at:
  3142 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  a               1    wreg     unsigned char 
  3145 ;;  b               1    2[BANK0 ] unsigned char 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  a               1    5[BANK0 ] unsigned char 
  3148 ;;  temp            1    8[BANK0 ] unsigned char 
  3149 ;;  y               1    7[BANK0 ] unsigned char 
  3150 ;;  z               1    6[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, pclath, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3160 ;;      Params:         0       1       0       0       0
  3161 ;;      Locals:         0       4       0       0       0
  3162 ;;      Temps:          0       2       0       0       0
  3163 ;;      Totals:         0       7       0       0       0
  3164 ;;Total ram usage:        7 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    3
  3167 ;; This function calls:
  3168 ;;		_Lcd_Cmd
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _Lcd_Set_Cursor
  3176  059E                     _Lcd_Set_Cursor:	
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3180                           ;Lcd_Set_Cursor@a stored from wreg
  3181  059E  1283               	bcf	3,5	;RP0=0, select bank0
  3182  059F  1303               	bcf	3,6	;RP1=0, select bank0
  3183  05A0  00A5               	movwf	Lcd_Set_Cursor@a
  3184                           
  3185                           ;lcd.h: 39: char temp,z,y;
  3186                           ;lcd.h: 40: if(a == 1)
  3187  05A1  0325               	decf	Lcd_Set_Cursor@a,w
  3188  05A2  1D03               	btfss	3,2
  3189  05A3  2DC7               	goto	l1770
  3190                           
  3191                           ;lcd.h: 41: {
  3192                           ;lcd.h: 42: temp = 0x80 + b - 1;
  3193  05A4  0822               	movf	Lcd_Set_Cursor@b,w
  3194  05A5  3E7F               	addlw	127
  3195  05A6  00A3               	movwf	??_Lcd_Set_Cursor
  3196  05A7  0823               	movf	??_Lcd_Set_Cursor,w
  3197  05A8  00A8               	movwf	Lcd_Set_Cursor@temp
  3198                           
  3199                           ;lcd.h: 43: z = temp>>4;
  3200  05A9  0828               	movf	Lcd_Set_Cursor@temp,w
  3201  05AA  00A3               	movwf	??_Lcd_Set_Cursor
  3202  05AB  3004               	movlw	4
  3203  05AC                     u1915:	
  3204  05AC  1003               	clrc
  3205  05AD  0CA3               	rrf	??_Lcd_Set_Cursor,f
  3206  05AE  3EFF               	addlw	-1
  3207  05AF  1D03               	skipz
  3208  05B0  2DAC               	goto	u1915
  3209  05B1  0823               	movf	??_Lcd_Set_Cursor,w
  3210  05B2  00A4               	movwf	??_Lcd_Set_Cursor+1
  3211  05B3  0824               	movf	??_Lcd_Set_Cursor+1,w
  3212  05B4  00A6               	movwf	Lcd_Set_Cursor@z
  3213                           
  3214                           ;lcd.h: 44: y = temp & 0x0F;
  3215  05B5  0828               	movf	Lcd_Set_Cursor@temp,w
  3216  05B6  390F               	andlw	15
  3217  05B7  00A3               	movwf	??_Lcd_Set_Cursor
  3218  05B8  0823               	movf	??_Lcd_Set_Cursor,w
  3219  05B9  00A7               	movwf	Lcd_Set_Cursor@y
  3220                           
  3221                           ;lcd.h: 45: Lcd_Cmd(z);
  3222  05BA  0826               	movf	Lcd_Set_Cursor@z,w
  3223  05BB  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3224                           
  3225                           ;lcd.h: 46: Lcd_Cmd(y);
  3226  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  3227  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  3228  05C2  0827               	movf	Lcd_Set_Cursor@y,w
  3229  05C3  120A  118A  272A   	fcall	_Lcd_Cmd
  3230                           
  3231                           ;lcd.h: 47: }
  3232  05C6  0008               	return
  3233  05C7                     l1770:	
  3234                           
  3235                           ;lcd.h: 48: else if(a == 2)
  3236  05C7  3002               	movlw	2
  3237  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  3238  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  3239  05CA  0625               	xorwf	Lcd_Set_Cursor@a,w
  3240  05CB  1D03               	btfss	3,2
  3241  05CC  0008               	return
  3242                           
  3243                           ;lcd.h: 49: {
  3244                           ;lcd.h: 50: temp = 0xC0 + b - 1;
  3245  05CD  0822               	movf	Lcd_Set_Cursor@b,w
  3246  05CE  3EBF               	addlw	191
  3247  05CF  00A3               	movwf	??_Lcd_Set_Cursor
  3248  05D0  0823               	movf	??_Lcd_Set_Cursor,w
  3249  05D1  00A8               	movwf	Lcd_Set_Cursor@temp
  3250                           
  3251                           ;lcd.h: 51: z = temp>>4;
  3252  05D2  0828               	movf	Lcd_Set_Cursor@temp,w
  3253  05D3  00A3               	movwf	??_Lcd_Set_Cursor
  3254  05D4  3004               	movlw	4
  3255  05D5                     u1935:	
  3256  05D5  1003               	clrc
  3257  05D6  0CA3               	rrf	??_Lcd_Set_Cursor,f
  3258  05D7  3EFF               	addlw	-1
  3259  05D8  1D03               	skipz
  3260  05D9  2DD5               	goto	u1935
  3261  05DA  0823               	movf	??_Lcd_Set_Cursor,w
  3262  05DB  00A4               	movwf	??_Lcd_Set_Cursor+1
  3263  05DC  0824               	movf	??_Lcd_Set_Cursor+1,w
  3264  05DD  00A6               	movwf	Lcd_Set_Cursor@z
  3265                           
  3266                           ;lcd.h: 52: y = temp & 0x0F;
  3267  05DE  0828               	movf	Lcd_Set_Cursor@temp,w
  3268  05DF  390F               	andlw	15
  3269  05E0  00A3               	movwf	??_Lcd_Set_Cursor
  3270  05E1  0823               	movf	??_Lcd_Set_Cursor,w
  3271  05E2  00A7               	movwf	Lcd_Set_Cursor@y
  3272                           
  3273                           ;lcd.h: 53: Lcd_Cmd(z);
  3274  05E3  0826               	movf	Lcd_Set_Cursor@z,w
  3275  05E4  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3276                           
  3277                           ;lcd.h: 54: Lcd_Cmd(y);
  3278  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  3279  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  3280  05EB  0827               	movf	Lcd_Set_Cursor@y,w
  3281  05EC  120A  118A  272A   	fcall	_Lcd_Cmd
  3282  05EF  0008               	return
  3283  05F0                     __end_of_Lcd_Set_Cursor:	
  3284                           
  3285                           	psect	text17
  3286  053D                     __ptext17:	
  3287 ;; *************** function _Lcd_Init *****************
  3288 ;; Defined at:
  3289 ;;		line 58 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0       0       0       0       0
  3304 ;;      Locals:         0       0       0       0       0
  3305 ;;      Temps:          0       2       0       0       0
  3306 ;;      Totals:         0       2       0       0       0
  3307 ;;Total ram usage:        2 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    3
  3310 ;; This function calls:
  3311 ;;		_Lcd_Cmd
  3312 ;;		_Lcd_Port
  3313 ;; This function is called by:
  3314 ;;		_main
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           
  3319                           ;psect for function _Lcd_Init
  3320  053D                     _Lcd_Init:	
  3321                           
  3322                           ;lcd.h: 60: Lcd_Port(0x00);
  3323                           
  3324                           ;incstack = 0
  3325                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3326  053D  3000               	movlw	0
  3327  053E  120A  118A  2762  120A  118A  	fcall	_Lcd_Port
  3328                           
  3329                           ;lcd.h: 61: _delay((unsigned long)((20)*(20000000/4000.0)));
  3330  0543  3082               	movlw	130
  3331  0544  1283               	bcf	3,5	;RP0=0, select bank0
  3332  0545  1303               	bcf	3,6	;RP1=0, select bank0
  3333  0546  00A3               	movwf	??_Lcd_Init+1
  3334  0547  30DD               	movlw	221
  3335  0548  00A2               	movwf	??_Lcd_Init
  3336  0549                     u2387:	
  3337  0549  0BA2               	decfsz	??_Lcd_Init,f
  3338  054A  2D49               	goto	u2387
  3339  054B  0BA3               	decfsz	??_Lcd_Init+1,f
  3340  054C  2D49               	goto	u2387
  3341                           
  3342                           ;lcd.h: 62: Lcd_Cmd(0x03);
  3343  054D  3003               	movlw	3
  3344  054E  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3345                           
  3346                           ;lcd.h: 63: _delay((unsigned long)((5)*(20000000/4000.0)));
  3347  0553  3021               	movlw	33
  3348  0554  1283               	bcf	3,5	;RP0=0, select bank0
  3349  0555  1303               	bcf	3,6	;RP1=0, select bank0
  3350  0556  00A3               	movwf	??_Lcd_Init+1
  3351  0557  3075               	movlw	117
  3352  0558  00A2               	movwf	??_Lcd_Init
  3353  0559                     u2397:	
  3354  0559  0BA2               	decfsz	??_Lcd_Init,f
  3355  055A  2D59               	goto	u2397
  3356  055B  0BA3               	decfsz	??_Lcd_Init+1,f
  3357  055C  2D59               	goto	u2397
  3358  055D  2D5E               	nop2
  3359                           
  3360                           ;lcd.h: 64: Lcd_Cmd(0x03);
  3361  055E  3003               	movlw	3
  3362  055F  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3363                           
  3364                           ;lcd.h: 65: _delay((unsigned long)((11)*(20000000/4000.0)));
  3365  0564  3048               	movlw	72
  3366  0565  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0566  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0567  00A3               	movwf	??_Lcd_Init+1
  3369  0568  306B               	movlw	107
  3370  0569  00A2               	movwf	??_Lcd_Init
  3371  056A                     u2407:	
  3372  056A  0BA2               	decfsz	??_Lcd_Init,f
  3373  056B  2D6A               	goto	u2407
  3374  056C  0BA3               	decfsz	??_Lcd_Init+1,f
  3375  056D  2D6A               	goto	u2407
  3376  056E  2D6F               	nop2
  3377                           
  3378                           ;lcd.h: 66: Lcd_Cmd(0x03);
  3379  056F  3003               	movlw	3
  3380  0570  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3381                           
  3382                           ;lcd.h: 67: Lcd_Cmd(0x02);
  3383  0575  3002               	movlw	2
  3384  0576  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3385                           
  3386                           ;lcd.h: 68: Lcd_Cmd(0x02);
  3387  057B  3002               	movlw	2
  3388  057C  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3389                           
  3390                           ;lcd.h: 69: Lcd_Cmd(0x08);
  3391  0581  3008               	movlw	8
  3392  0582  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3393                           
  3394                           ;lcd.h: 70: Lcd_Cmd(0x00);
  3395  0587  3000               	movlw	0
  3396  0588  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3397                           
  3398                           ;lcd.h: 71: Lcd_Cmd(0x0C);
  3399  058D  300C               	movlw	12
  3400  058E  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3401                           
  3402                           ;lcd.h: 72: Lcd_Cmd(0x00);
  3403  0593  3000               	movlw	0
  3404  0594  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3405                           
  3406                           ;lcd.h: 73: Lcd_Cmd(0x06);
  3407  0599  3006               	movlw	6
  3408  059A  120A  118A  272A   	fcall	_Lcd_Cmd
  3409  059D  0008               	return
  3410  059E                     __end_of_Lcd_Init:	
  3411                           
  3412                           	psect	text18
  3413  07CA                     __ptext18:	
  3414 ;; *************** function _Lcd_Clear *****************
  3415 ;; Defined at:
  3416 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  2   92[None  ] int 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0, pclath, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3430 ;;      Params:         0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0
  3433 ;;      Totals:         0       0       0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    3
  3437 ;; This function calls:
  3438 ;;		_Lcd_Cmd
  3439 ;; This function is called by:
  3440 ;;		_main
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function _Lcd_Clear
  3446  07CA                     _Lcd_Clear:	
  3447                           
  3448                           ;lcd.h: 33: Lcd_Cmd(0);
  3449                           
  3450                           ;incstack = 0
  3451                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3452  07CA  3000               	movlw	0
  3453  07CB  120A  118A  272A  120A  118A  	fcall	_Lcd_Cmd
  3454                           
  3455                           ;lcd.h: 34: Lcd_Cmd(1);
  3456  07D0  3001               	movlw	1
  3457  07D1  120A  118A  272A   	fcall	_Lcd_Cmd
  3458  07D4  0008               	return
  3459  07D5                     __end_of_Lcd_Clear:	
  3460                           
  3461                           	psect	text19
  3462  072A                     __ptext19:	
  3463 ;; *************** function _Lcd_Cmd *****************
  3464 ;; Defined at:
  3465 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  a               1    wreg     unsigned char 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  a               1    5[COMMON] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0, pclath, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3479 ;;      Params:         0       0       0       0       0
  3480 ;;      Locals:         1       0       0       0       0
  3481 ;;      Temps:          0       2       0       0       0
  3482 ;;      Totals:         1       2       0       0       0
  3483 ;;Total ram usage:        3 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    2
  3486 ;; This function calls:
  3487 ;;		_Lcd_Port
  3488 ;; This function is called by:
  3489 ;;		_Lcd_Clear
  3490 ;;		_Lcd_Set_Cursor
  3491 ;;		_Lcd_Init
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           
  3496                           ;psect for function _Lcd_Cmd
  3497  072A                     _Lcd_Cmd:	
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3501                           ;Lcd_Cmd@a stored from wreg
  3502  072A  00F5               	movwf	Lcd_Cmd@a
  3503                           
  3504                           ;lcd.h: 24: RD2 = 0;
  3505  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3506  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3507  072D  1108               	bcf	8,2	;volatile
  3508                           
  3509                           ;lcd.h: 25: Lcd_Port(a);
  3510  072E  0875               	movf	Lcd_Cmd@a,w
  3511  072F  120A  118A  2762  120A  118A  	fcall	_Lcd_Port
  3512                           
  3513                           ;lcd.h: 26: RD3 = 1;
  3514  0734  1283               	bcf	3,5	;RP0=0, select bank0
  3515  0735  1303               	bcf	3,6	;RP1=0, select bank0
  3516  0736  1588               	bsf	8,3	;volatile
  3517                           
  3518                           ;lcd.h: 27: _delay((unsigned long)((4)*(20000000/4000.0)));
  3519  0737  301A               	movlw	26
  3520  0738  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0739  1303               	bcf	3,6	;RP1=0, select bank0
  3522  073A  00A1               	movwf	??_Lcd_Cmd+1
  3523  073B  30F7               	movlw	247
  3524  073C  00A0               	movwf	??_Lcd_Cmd
  3525  073D                     u2417:	
  3526  073D  0BA0               	decfsz	??_Lcd_Cmd,f
  3527  073E  2F3D               	goto	u2417
  3528  073F  0BA1               	decfsz	??_Lcd_Cmd+1,f
  3529  0740  2F3D               	goto	u2417
  3530  0741  2F42               	nop2
  3531                           
  3532                           ;lcd.h: 28: RD3 = 0;
  3533  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3535  0744  1188               	bcf	8,3	;volatile
  3536  0745  0008               	return
  3537  0746                     __end_of_Lcd_Cmd:	
  3538                           
  3539                           	psect	text20
  3540  0762                     __ptext20:	
  3541 ;; *************** function _Lcd_Port *****************
  3542 ;; Defined at:
  3543 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  a               1    wreg     unsigned char 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;  a               1    4[COMMON] unsigned char 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3557 ;;      Params:         0       0       0       0       0
  3558 ;;      Locals:         1       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0
  3560 ;;      Totals:         1       0       0       0       0
  3561 ;;Total ram usage:        1 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    1
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_Lcd_Cmd
  3568 ;;		_Lcd_Init
  3569 ;;		_Lcd_Write_Char
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           
  3574                           ;psect for function _Lcd_Port
  3575  0762                     _Lcd_Port:	
  3576                           
  3577                           ;incstack = 0
  3578                           ; Regs used in _Lcd_Port: [wreg]
  3579                           ;Lcd_Port@a stored from wreg
  3580  0762  00F4               	movwf	Lcd_Port@a
  3581                           
  3582                           ;lcd.h: 2: if(a & 1)
  3583  0763  1C74               	btfss	Lcd_Port@a,0
  3584  0764  2F69               	goto	l79
  3585                           
  3586                           ;lcd.h: 3: RD4 = 1;
  3587  0765  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0766  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0767  1608               	bsf	8,4	;volatile
  3590  0768  2F6C               	goto	l80
  3591  0769                     l79:	
  3592                           
  3593                           ;lcd.h: 4: else
  3594                           ;lcd.h: 5: RD4 = 0;
  3595  0769  1283               	bcf	3,5	;RP0=0, select bank0
  3596  076A  1303               	bcf	3,6	;RP1=0, select bank0
  3597  076B  1208               	bcf	8,4	;volatile
  3598  076C                     l80:	
  3599                           
  3600                           ;lcd.h: 7: if(a & 2)
  3601  076C  1CF4               	btfss	Lcd_Port@a,1
  3602  076D  2F70               	goto	l81
  3603                           
  3604                           ;lcd.h: 8: RD5 = 1;
  3605  076E  1688               	bsf	8,5	;volatile
  3606  076F  2F71               	goto	l82
  3607  0770                     l81:	
  3608                           
  3609                           ;lcd.h: 9: else
  3610                           ;lcd.h: 10: RD5 = 0;
  3611  0770  1288               	bcf	8,5	;volatile
  3612  0771                     l82:	
  3613                           
  3614                           ;lcd.h: 12: if(a & 4)
  3615  0771  1D74               	btfss	Lcd_Port@a,2
  3616  0772  2F75               	goto	l83
  3617                           
  3618                           ;lcd.h: 13: RD6 = 1;
  3619  0773  1708               	bsf	8,6	;volatile
  3620  0774  2F76               	goto	l84
  3621  0775                     l83:	
  3622                           
  3623                           ;lcd.h: 14: else
  3624                           ;lcd.h: 15: RD6 = 0;
  3625  0775  1308               	bcf	8,6	;volatile
  3626  0776                     l84:	
  3627                           
  3628                           ;lcd.h: 17: if(a & 8)
  3629  0776  1DF4               	btfss	Lcd_Port@a,3
  3630  0777  2F7A               	goto	l85
  3631                           
  3632                           ;lcd.h: 18: RD7 = 1;
  3633  0778  1788               	bsf	8,7	;volatile
  3634  0779  0008               	return
  3635  077A                     l85:	
  3636                           
  3637                           ;lcd.h: 19: else
  3638                           ;lcd.h: 20: RD7 = 0;
  3639  077A  1388               	bcf	8,7	;volatile
  3640  077B  0008               	return
  3641  077C                     __end_of_Lcd_Port:	
  3642                           
  3643                           	psect	text21
  3644  0746                     __ptext21:	
  3645 ;; *************** function _T1 *****************
  3646 ;; Defined at:
  3647 ;;		line 155 in file "GAS_LEAK.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;		None
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3661 ;;      Params:         0       0       0       0       0
  3662 ;;      Locals:         0       0       0       0       0
  3663 ;;      Temps:          4       0       0       0       0
  3664 ;;      Totals:         4       0       0       0       0
  3665 ;;Total ram usage:        4 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; This function calls:
  3668 ;;		Nothing
  3669 ;; This function is called by:
  3670 ;;		Interrupt level 1
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           
  3675                           ;psect for function _T1
  3676  0746                     _T1:	
  3677                           
  3678                           ;GAS_LEAK.c: 157: if(TMR1IF)
  3679  0746  1C0C               	btfss	12,0	;volatile
  3680  0747  2F57               	goto	i1l180
  3681                           
  3682                           ;GAS_LEAK.c: 158: {
  3683                           ;GAS_LEAK.c: 159: TMR1IF = 0;
  3684  0748  100C               	bcf	12,0	;volatile
  3685                           
  3686                           ;GAS_LEAK.c: 160: count++;
  3687  0749  3001               	movlw	1
  3688  074A  07F8               	addwf	_count,f
  3689  074B  1803               	skipnc
  3690  074C  0AF9               	incf	_count+1,f
  3691  074D  3000               	movlw	0
  3692  074E  07F9               	addwf	_count+1,f
  3693                           
  3694                           ;GAS_LEAK.c: 161: if(count == 95)
  3695  074F  305F               	movlw	95
  3696  0750  0678               	xorwf	_count,w
  3697  0751  0479               	iorwf	_count+1,w
  3698  0752  1D03               	btfss	3,2
  3699  0753  2F57               	goto	i1l180
  3700                           
  3701                           ;GAS_LEAK.c: 162: {
  3702                           ;GAS_LEAK.c: 163: count = 0;
  3703  0754  01F8               	clrf	_count
  3704  0755  01F9               	clrf	_count+1
  3705                           
  3706                           ;GAS_LEAK.c: 164: TMR0 = 0;
  3707  0756  0181               	clrf	1	;volatile
  3708  0757                     i1l180:	
  3709  0757  0873               	movf	??_T1+3,w
  3710  0758  00FF               	movwf	127
  3711  0759  0872               	movf	??_T1+2,w
  3712  075A  008A               	movwf	10
  3713  075B  0871               	movf	??_T1+1,w
  3714  075C  0084               	movwf	4
  3715  075D  0E70               	swapf	??_T1^(0+-128),w
  3716  075E  0083               	movwf	3
  3717  075F  0EFE               	swapf	126,f
  3718  0760  0E7E               	swapf	126,w
  3719  0761  0009               	retfie
  3720  0762                     __end_of_T1:	
  3721  007E                     btemp	set	126	;btemp
  3722  007E                     wtemp0	set	126
  3723                           
  3724                           	psect	intentry
  3725  0004                     __pintentry:	
  3726                           ;incstack = 0
  3727                           ; Regs used in _T1: [wreg+status,2+status,0]
  3728                           
  3729  0004                     interrupt_function:	
  3730  007E                     saved_w	set	btemp
  3731  0004  00FE               	movwf	btemp
  3732  0005  0E03               	swapf	3,w
  3733  0006  00F0               	movwf	??_T1
  3734  0007  0804               	movf	4,w
  3735  0008  00F1               	movwf	??_T1+1
  3736  0009  080A               	movf	10,w
  3737  000A  00F2               	movwf	??_T1+2
  3738  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3739  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3740  000D  087F               	movf	btemp+1,w
  3741  000E  00F3               	movwf	??_T1+3
  3742  000F  120A  118A  2F46   	ljmp	_T1


Data Sizes:
    Strings     91
    Constant    10
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     44      70
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_9(CODE[4]), STR_6(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> g(BANK0[10]), t(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_txs@st	PTR unsigned char  size(1) Largest target is 10
		 -> g(BANK0[10]), t(BANK0[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> g(BANK0[10]), STR_8(CODE[11]), STR_7(CODE[17]), t(BANK0[10]), 
		 -> STR_5(CODE[8]), STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_adc_read
    _main->_uart_txs
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___lwtoft
    ___ftmul->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _T1 in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    _uart_txs->_uart_txc
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd

Critical Paths under _T1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _T1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _T1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _T1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    9290
                                             41 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                           ___lwtoft
                           _adc_init
                           _adc_read
                            _sprintf
                        _timer1_init
                          _uart_init
                           _uart_txc
                           _uart_txs
 ---------------------------------------------------------------------------------
 (1) _uart_txs                                             2     2      0     224
                                              4 COMMON     2     2      0
                           _uart_txc
 ---------------------------------------------------------------------------------
 (2) _uart_txc                                             3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1522
                                             12 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              5 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      62
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2044
                                              4 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             27 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2566
                                             11 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     969
                                              3 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     254
                                              5 COMMON     1     1      0
                                              0 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1065
                                              2 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              2 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     155
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _T1                                                   4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _adc_init
   _adc_read
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _timer1_init
   _uart_init
   _uart_txc
   _uart_txs
     _uart_txc

 _T1 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      50       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2C      46       5       87.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      50      12        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Apr 05 16:55:05 2018

                        _a 0050                          _b 004E                          _g 0052  
                        _t 005C                          pc 0002                __CFG_CP$OFF 0000  
                       l80 076C                         l81 0770                         l82 0771  
                       l83 0775                         l84 0776                         l85 077A  
                       _T1 0746                         l79 0769                         fsr 0004  
                      ?_T1 0070                        l131 0710                        l157 0704  
                      l460 051C                        l461 0524                        l453 0507  
                      l544 0440                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        _gas 004C  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
                     ??_T1 0070               __CFG_LVP$OFF 0000                       l1540 0451  
                     l1508 03E6                       l1292 06CC                       l1710 04EC  
                     l1534 0435                       l1526 0418                       l1286 06B0  
                     l1720 0516                       l1712 04F1                       l1704 04D9  
                     l1536 0443                       l1528 0428                       l1288 06BE  
                     l1296 06D7                       l1708 04E0                       l1812 06E6  
                     l1804 0795                       l1718 050C                       l1750 065F  
                     l1742 063B                       l1830 024A                       l1920 039E  
                     l1904 0366                       l1744 0649                       l1770 05C7  
                     l1754 066A                       l1916 038E                       l1908 0376  
                     l1852 027D                       l1836 0260                       l1846 0277  
                     l1872 02B1                       l1864 02AD                       l1858 029E  
                     l1874 022A                       l1796 05F4                       l1892 0327  
                     l1876 02F4                       l1972 0094                       l1886 0311  
                     l1984 00EE                       l1996 0141                       STR_1 0496  
                     STR_2 0496                       STR_3 04A7                       STR_4 0474  
                     STR_5 04C3                       STR_6 04CB                       STR_7 0485  
                     STR_8 04B8                       STR_9 04CB                       _BRGH 04C2  
                     _CREN 00C4                       u1125 06B3                       u1145 06C4  
                     u2115 0333                       u1155 06CD                       u2205 039F  
                     u2125 0345                       u2045 0294                       u2215 03A7  
                     u2155 0377                       u1515 03ED                       u2307 01CC  
                     u2165 037F                       u2317 01E0                       u2407 056A  
                     u2327 01F4                       u2417 073D                       u1545 0419  
                     u2337 0208                       u2347 021C                       u2267 0089  
                     u2357 06FD                       u2277 0190                       u2367 0690  
                     u1815 052B                       u1735 04E5                       u1575 0437  
                     u2287 01A4                       u2377 06A1                       u2297 01B8  
                     u2387 0549                       u1915 05AC                       u1675 0680  
                     u1755 0500                       u2397 0559                       u1845 063E  
                     u1935 05D5                       u1775 050F                       u1695 071F  
                     u1865 064A                       u1875 0656                       u1885 0660  
                     u1995 06ED                       _RCIF 0065                       _OERR 00C1  
                     _TMR0 0001                       _SPEN 00C7                       _TXEN 04C5  
                     _TXIF 0064                       _SYNC 04C4               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0023                       _main 0024               ___ftpack@arg 0020  
             ___ftpack@exp 0023                       _temp 0076                       btemp 007E  
                     start 0012         ??_Lcd_Write_String 0025            __end_of_Lcd_Cmd 0746  
             ___ftmul@cntr 0039               ___ftmul@sign 003A               ___fttol@exp1 0048  
             ___fttol@lval 0044                      ?_main 0070              __CFG_WDTE$OFF 0000  
          __end_of___ftmul 03CC            __end_of___fttol 045A            __end_of___lwdiv 066F  
                    i1l180 0757            __end_of___lwmod 06DC                      _RCREG 001A  
                    _TMR1H 000F                      _TMR1L 000E                      _SPBRG 0099  
  __size_of_Lcd_Set_Cursor 0052                      _TRISA 0085                      _TRISD 0088  
                    _TXREG 0019            __end_of_dpowers 0474                      _count 0078  
            ___ftpack@sign 0024             __CFG_BOREN$OFF 0000                      pclath 000A  
                    status 0003                      wtemp0 007E            __end_of_sprintf 02F9  
         __end_of_Lcd_Init 059E           __end_of_Lcd_Port 077C            __initialization 0015  
             __end_of_main 0223                     ??_main 0049              ___fttol@sign1 0043  
       __size_of_Lcd_Clear 000B                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           __end_of___ftpack 053D  
         __end_of_adc_init 07DE           __end_of_adc_read 070D                     _INTCON 000B  
         __end_of___lwtoft 0794                  ??_Lcd_Cmd 0020                     _TMR1IF 0060  
  __size_of_Lcd_Write_Char 0039                     _TRISB7 0437                     _TRISC6 043E  
                   _TRISC7 043F             __CFG_PWRTE$OFF 0000                  ??___ftmul 0031  
                ??___fttol 003F               ?_timer1_init 0070                  ??___lwdiv 0074  
                ??___lwmod 0075      ___ftmul@f3_as_product 0036                     saved_w 007E  
         __end_of_uart_txc 072A           __end_of_uart_txs 07A9                  ??_sprintf 002F  
          Lcd_Set_Cursor@a 0025            Lcd_Set_Cursor@b 0022            Lcd_Set_Cursor@y 0027  
          Lcd_Set_Cursor@z 0026    __end_of__initialization 0020          __end_of_Lcd_Clear 07D5  
               ___ftmul@f1 002B                 ___ftmul@f2 002E                 ___fttol@f1 003B  
           __pcstackCOMMON 0070                 __end_of_T1 0762                 ___lwtoft@c 0028  
           _Lcd_Set_Cursor 059E                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
               __pbssBANK0 004C                 __pmaintext 0024                 __pintentry 0004  
__size_of_Lcd_Write_String 0041                  ?___ftpack 0020     __end_of_Lcd_Set_Cursor 05F0  
                ?_adc_init 0070                  ?_adc_read 0074                  ?___lwtoft 0028  
       __size_of_uart_init 0012                 ??_Lcd_Init 0022                 ??_Lcd_Port 0074  
               __stringtab 045A             _Lcd_Write_Char 066F                    _Lcd_Cmd 072A  
                ?_uart_txc 0070                  ?_uart_txs 0070                    ___ftmul 02F9  
                  ___fttol 03CC                    ___lwdiv 0631                    ___lwmod 06A8  
               ??___ftpack 0025            ?_Lcd_Set_Cursor 0022                 ??_adc_init 0074  
               ??_adc_read 0020       __size_of_timer1_init 000F                    __ptext1 0794  
                  __ptext2 070D                    __ptext3 07A9                    __ptext4 07BB  
                  __ptext5 0223                    __ptext6 06A8                    __ptext7 0631  
                  __ptext8 06DC                    __ptext9 07D5                 ??___lwtoft 0074  
                _T1CONbits 0010                    _dpowers 046A                    _sprintf 0223  
                  clrloop0 07DF     __end_of_Lcd_Write_Char 06A8       end_of_initialization 0020  
        __end_of_uart_init 07BB                 ??_uart_txc 0074                 ??_uart_txs 0074  
                Lcd_Port@a 0074            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0023  
        Lcd_Write_String@i 0028                ___ftmul@exp 0035                  _Lcd_Clear 07CA  
         _Lcd_Write_String 05F0        start_initialization 0015          __size_of_Lcd_Init 0061  
        __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070            Lcd_Write_Char@a 0022  
          Lcd_Write_Char@y 0021          __size_of___ftpack 006E          __size_of_adc_init 0009  
        __size_of_adc_read 0031                __pbssCOMMON 0076            adc_read@channel 0022  
                ___latbits 0002          __size_of___lwtoft 0018              __pcstackBANK0 0020  
                 ?_Lcd_Cmd 0070                sprintf@flag 0033                sprintf@prec 0034  
         ___lwdiv@dividend 0022           ??_Lcd_Set_Cursor 0023                   ?___ftmul 002B  
                 ?___fttol 003B                   ?___lwdiv 0020                   ?___lwmod 0027  
        __size_of_uart_txc 001D          __size_of_uart_txs 0015                  __pstrings 045A  
         ___lwdiv@quotient 0025                   ?_sprintf 002C                __size_of_T1 001C  
        interrupt_function 0004                  clear_ram0 07DE                   _PIE1bits 008C  
                 Lcd_Cmd@a 0075                   _PIR1bits 000C                   _GO_nDONE 00FA  
              ??_Lcd_Clear 0076                  _uart_init 07A9              ??_timer1_init 0074  
               uart_txc@ch 0020                 uart_txs@st 0075                __stringbase 0469  
         ??_Lcd_Write_Char 0075                   _Lcd_Init 053D                   _Lcd_Port 0762  
 __end_of_Lcd_Write_String 0631           __size_of_Lcd_Cmd 001C                 ?_uart_init 0070  
         __size_of___ftmul 00D3           __size_of___fttol 008E           __size_of___lwdiv 003E  
         __size_of___lwmod 0034                   ___ftpack 04CF         __end_of__stringtab 046A  
                 _adc_init 07D5                   _adc_read 06DC                   ___lwtoft 077C  
      __end_of_timer1_init 07CA                 sprintf@val 0035            ___lwdiv@divisor 0020  
          ___lwdiv@counter 0024                   __ptext10 077C                   __ptext11 03CC  
                 __ptext20 0762                   __ptext12 02F9                   __ptext21 0746  
                 __ptext13 04CF                   __ptext14 05F0                   __ptext15 066F  
                 __ptext16 059E                   __ptext17 053D                   __ptext18 07CA  
                 __ptext19 072A           __size_of_sprintf 00D6              __size_of_main 01FF  
                 _uart_txc 070D                   _uart_txs 0794                  uart_txc@i 0021  
       Lcd_Write_Char@temp 0020                   intlevel1 0000                  sprintf@ap 0032  
                sprintf@sp 0037           ___lwmod@dividend 0029                  stringcode 0464  
              ??_uart_init 0074                _timer1_init 07BB         Lcd_Set_Cursor@temp 0028  
               _OPTION_REG 0081                   sprintf@c 0038                   sprintf@f 002C  
          ___lwmod@divisor 0027            ___lwmod@counter 002B                   stringdir 0464  
                 stringtab 045A  
