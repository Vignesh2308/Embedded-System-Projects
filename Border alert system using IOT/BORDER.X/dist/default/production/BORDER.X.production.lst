

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Apr 29 15:28:52 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.42
    32                           ; Generated 13/04/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  000B                     _INTCON	set	11
   126  0001                     _TMR0	set	1
   127  0010                     _T1CONbits	set	16
   128  000C                     _PIR1bits	set	12
   129  000E                     _TMR1L	set	14
   130  000F                     _TMR1H	set	15
   131  001E                     _ADRESH	set	30
   132  001F                     _ADCON0	set	31
   133  001A                     _RCREG	set	26
   134  0019                     _TXREG	set	25
   135  0060                     _TMR1IF	set	96
   136  0037                     _RB7	set	55
   137  0031                     _RB1	set	49
   138  0030                     _RB0	set	48
   139  0033                     _RB3	set	51
   140  0032                     _RB2	set	50
   141  00FA                     _GO_nDONE	set	250
   142  00C1                     _OERR	set	193
   143  0064                     _TXIF	set	100
   144  0065                     _RCIF	set	101
   145  00C4                     _CREN	set	196
   146  00C7                     _SPEN	set	199
   147  0046                     _RD6	set	70
   148  0047                     _RD7	set	71
   149  0042                     _RD2	set	66
   150  0043                     _RD3	set	67
   151  0044                     _RD4	set	68
   152  0045                     _RD5	set	69
   153  0081                     _OPTION_REG	set	129
   154  0085                     _TRISA	set	133
   155  0088                     _TRISD	set	136
   156  008C                     _PIE1bits	set	140
   157  009E                     _ADRESL	set	158
   158  009F                     _ADCON1	set	159
   159  0099                     _SPBRG	set	153
   160  0433                     _TRISB3	set	1075
   161  0432                     _TRISB2	set	1074
   162  0431                     _TRISB1	set	1073
   163  0430                     _TRISB0	set	1072
   164  0436                     _TRISB6	set	1078
   165  0437                     _TRISB7	set	1079
   166  0465                     _RCIE	set	1125
   167  04C5                     _TXEN	set	1221
   168  04C4                     _SYNC	set	1220
   169  04C2                     _BRGH	set	1218
   170  043F                     _TRISC7	set	1087
   171  043E                     _TRISC6	set	1086
   172                           
   173                           	psect	strings
   174  0400                     __pstrings:	
   175  0400                     stringtab:	
   176  0400                     __stringtab:	
   177                           
   178                           ;	String table - string pointers are 1 byte each
   179  0400  1BFF               	btfsc	btemp+1,7
   180  0401  2C0A               	ljmp	stringcode
   181  0402  1383               	bcf	3,7
   182  0403  187F               	btfsc	btemp+1,0
   183  0404  1783               	bsf	3,7
   184  0405  0800               	movf	0,w
   185  0406  0A84               	incf	4,f
   186  0407  1903               	skipnz
   187  0408  0AFF               	incf	btemp+1,f
   188  0409  0008               	return
   189  040A                     stringcode:	
   190  040A                     stringdir:	
   191  040A  3004               	movlw	high stringdir
   192  040B  008A               	movwf	10
   193  040C  0804               	movf	4,w
   194  040D  0A84               	incf	4,f
   195  040E  0782               	addwf	2,f
   196  040F                     __stringbase:	
   197  040F  3400               	retlw	0
   198  0410                     __end_of__stringtab:	
   199  0410                     STR_6:	
   200  0410  3420               	retlw	32	;' '
   201  0411  3420               	retlw	32	;' '
   202  0412  3420               	retlw	32	;' '
   203  0413  3420               	retlw	32	;' '
   204  0414  3420               	retlw	32	;' '
   205  0415  3420               	retlw	32	;' '
   206  0416  3420               	retlw	32	;' '
   207  0417  3420               	retlw	32	;' '
   208  0418  3420               	retlw	32	;' '
   209  0419  3420               	retlw	32	;' '
   210  041A  3420               	retlw	32	;' '
   211  041B  3420               	retlw	32	;' '
   212  041C  3420               	retlw	32	;' '
   213  041D  3420               	retlw	32	;' '
   214  041E  3420               	retlw	32	;' '
   215  041F  3420               	retlw	32	;' '
   216  0420  3400               	retlw	0
   217  0421                     STR_5:	
   218  0421  3442               	retlw	66	;'B'
   219  0422  344F               	retlw	79	;'O'
   220  0423  3452               	retlw	82	;'R'
   221  0424  3444               	retlw	68	;'D'
   222  0425  3445               	retlw	69	;'E'
   223  0426  3452               	retlw	82	;'R'
   224  0427  3420               	retlw	32	;' '
   225  0428  3443               	retlw	67	;'C'
   226  0429  3452               	retlw	82	;'R'
   227  042A  344F               	retlw	79	;'O'
   228  042B  3453               	retlw	83	;'S'
   229  042C  3453               	retlw	83	;'S'
   230  042D  3445               	retlw	69	;'E'
   231  042E  3444               	retlw	68	;'D'
   232  042F  3420               	retlw	32	;' '
   233  0430  3420               	retlw	32	;' '
   234  0431  3400               	retlw	0
   235  0432                     STR_3:	
   236  0432  344C               	retlw	76	;'L'
   237  0433  3441               	retlw	65	;'A'
   238  0434  3454               	retlw	84	;'T'
   239  0435  343A               	retlw	58	;':'
   240  0436  3431               	retlw	49	;'1'
   241  0437  3433               	retlw	51	;'3'
   242  0438  3430               	retlw	48	;'0'
   243  0439  3436               	retlw	54	;'6'
   244  043A  342E               	retlw	46	;'.'
   245  043B  3436               	retlw	54	;'6'
   246  043C  3432               	retlw	50	;'2'
   247  043D  3434               	retlw	52	;'4'
   248  043E  3433               	retlw	51	;'3'
   249  043F  344E               	retlw	78	;'N'
   250  0440  3420               	retlw	32	;' '
   251  0441  3420               	retlw	32	;' '
   252  0442  3400               	retlw	0
   253  0443                     STR_2:	
   254  0443  3420               	retlw	32	;' '
   255  0444  3453               	retlw	83	;'S'
   256  0445  3459               	retlw	89	;'Y'
   257  0446  3453               	retlw	83	;'S'
   258  0447  3420               	retlw	32	;' '
   259  0448  3455               	retlw	85	;'U'
   260  0449  3453               	retlw	83	;'S'
   261  044A  3449               	retlw	73	;'I'
   262  044B  344E               	retlw	78	;'N'
   263  044C  3447               	retlw	71	;'G'
   264  044D  3420               	retlw	32	;' '
   265  044E  3449               	retlw	73	;'I'
   266  044F  344F               	retlw	79	;'O'
   267  0450  3454               	retlw	84	;'T'
   268  0451  3420               	retlw	32	;' '
   269  0452  3420               	retlw	32	;' '
   270  0453  3400               	retlw	0
   271  0454                     STR_1:	
   272  0454  3420               	retlw	32	;' '
   273  0455  3420               	retlw	32	;' '
   274  0456  3442               	retlw	66	;'B'
   275  0457  344F               	retlw	79	;'O'
   276  0458  3452               	retlw	82	;'R'
   277  0459  3444               	retlw	68	;'D'
   278  045A  3445               	retlw	69	;'E'
   279  045B  3452               	retlw	82	;'R'
   280  045C  3420               	retlw	32	;' '
   281  045D  3441               	retlw	65	;'A'
   282  045E  344C               	retlw	76	;'L'
   283  045F  3445               	retlw	69	;'E'
   284  0460  3452               	retlw	82	;'R'
   285  0461  3454               	retlw	84	;'T'
   286  0462  3420               	retlw	32	;' '
   287  0463  3420               	retlw	32	;' '
   288  0464  3400               	retlw	0
   289  0465                     STR_4:	
   290  0465  344C               	retlw	76	;'L'
   291  0466  344F               	retlw	79	;'O'
   292  0467  344E               	retlw	78	;'N'
   293  0468  343A               	retlw	58	;':'
   294  0469  3430               	retlw	48	;'0'
   295  046A  3438               	retlw	56	;'8'
   296  046B  3430               	retlw	48	;'0'
   297  046C  3439               	retlw	57	;'9'
   298  046D  3436               	retlw	54	;'6'
   299  046E  342E               	retlw	46	;'.'
   300  046F  3436               	retlw	54	;'6'
   301  0470  3436               	retlw	54	;'6'
   302  0471  3430               	retlw	48	;'0'
   303  0472  3439               	retlw	57	;'9'
   304  0473  3445               	retlw	69	;'E'
   305  0474  3420               	retlw	32	;' '
   306  0475  3400               	retlw	0
   307  0476                     STR_9:	
   308  0476  3443               	retlw	67	;'C'
   309  0477  3452               	retlw	82	;'R'
   310  0478  344F               	retlw	79	;'O'
   311  0479  3453               	retlw	83	;'S'
   312  047A  3453               	retlw	83	;'S'
   313  047B  3445               	retlw	69	;'E'
   314  047C  3444               	retlw	68	;'D'
   315  047D  3420               	retlw	32	;' '
   316  047E  3442               	retlw	66	;'B'
   317  047F  344F               	retlw	79	;'O'
   318  0480  3452               	retlw	82	;'R'
   319  0481  3444               	retlw	68	;'D'
   320  0482  3445               	retlw	69	;'E'
   321  0483  3452               	retlw	82	;'R'
   322  0484  3400               	retlw	0
   323  0485                     STR_8:	
   324  0485  344C               	retlw	76	;'L'
   325  0486  344F               	retlw	79	;'O'
   326  0487  344E               	retlw	78	;'N'
   327  0488  343A               	retlw	58	;':'
   328  0489  3400               	retlw	0
   329  048A                     STR_7:	
   330  048A  344C               	retlw	76	;'L'
   331  048B  3441               	retlw	65	;'A'
   332  048C  3454               	retlw	84	;'T'
   333  048D  343A               	retlw	58	;':'
   334  048E  3400               	retlw	0
   335  048F                     STR_11:	
   336  048F  346C               	retlw	108	;'l'
   337  0490  346F               	retlw	111	;'o'
   338  0491  346E               	retlw	110	;'n'
   339  0492  343A               	retlw	58	;':'
   340  0493  3400               	retlw	0
   341  0494                     STR_10:	
   342  0494  346C               	retlw	108	;'l'
   343  0495  3461               	retlw	97	;'a'
   344  0496  3474               	retlw	116	;'t'
   345  0497  343A               	retlw	58	;':'
   346  0498  3400               	retlw	0
   347                           
   348                           ; #config settings
   349  0000                     
   350                           	psect	cinit
   351  0015                     start_initialization:	
   352  0015                     __initialization:	
   353                           
   354                           ; Clear objects allocated to COMMON
   355  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   356                           
   357                           ; Clear objects allocated to BANK0
   358  0016  1383               	bcf	3,7	;select IRP bank0
   359  0017  3020               	movlw	low __pbssBANK0
   360  0018  0084               	movwf	4
   361  0019  3058               	movlw	low (__pbssBANK0+56)
   362  001A  120A  118A  26B4  120A  118A  	fcall	clear_ram0
   363                           
   364                           ; Clear objects allocated to BANK1
   365  001F  30A0               	movlw	low __pbssBANK1
   366  0020  0084               	movwf	4
   367  0021  30C8               	movlw	low (__pbssBANK1+40)
   368  0022  120A  118A  26B4   	fcall	clear_ram0
   369  0025                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  0025                     __end_of__initialization:	
   373  0025  0183               	clrf	3
   374  0026  120A  118A  2A4B   	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	bssCOMMON
   377  007C                     __pbssCOMMON:	
   378  007C                     _Gpsdata:	
   379  007C                     	ds	1
   380                           
   381                           	psect	bssBANK0
   382  0020                     __pbssBANK0:	
   383  0020                     _g:	
   384  0020                     	ds	10
   385  002A                     _t:	
   386  002A                     	ds	10
   387  0034                     _lon_dir_cnt:	
   388  0034                     	ds	2
   389  0036                     _lat_dir_cnt:	
   390  0036                     	ds	2
   391  0038                     _com_cnt:	
   392  0038                     	ds	2
   393  003A                     _flg:	
   394  003A                     	ds	2
   395  003C                     _log_cnt:	
   396  003C                     	ds	2
   397  003E                     _lat_cnt:	
   398  003E                     	ds	2
   399  0040                     _pos_cnt:	
   400  0040                     	ds	2
   401  0042                     _finish:	
   402  0042                     	ds	2
   403  0044                     _z:	
   404  0044                     	ds	2
   405  0046                     _y:	
   406  0046                     	ds	2
   407  0048                     _x:	
   408  0048                     	ds	2
   409  004A                     _CNT:	
   410  004A                     	ds	2
   411  004C                     _count:	
   412  004C                     	ds	2
   413  004E                     _lon_dir:	
   414  004E                     	ds	5
   415  0053                     _lat_dir:	
   416  0053                     	ds	5
   417                           
   418                           	psect	bssBANK1
   419  00A0                     __pbssBANK1:	
   420  00A0                     _lon:	
   421  00A0                     	ds	20
   422  00B4                     _lat:	
   423  00B4                     	ds	20
   424                           
   425                           	psect	clrtext
   426  06B4                     clear_ram0:	
   427                           ;	Called with FSR containing the base address, and
   428                           ;	W with the last address+1
   429                           
   430  06B4  0064               	clrwdt	;clear the watchdog before getting into this loop
   431  06B5                     clrloop0:	
   432  06B5  0180               	clrf	0	;clear RAM location pointed to by FSR
   433  06B6  0A84               	incf	4,f	;increment pointer
   434  06B7  0604               	xorwf	4,w	;XOR with final address
   435  06B8  1903               	btfsc	3,2	;have we reached the end yet?
   436  06B9  3400               	retlw	0	;all done for this memory range, return
   437  06BA  0604               	xorwf	4,w	;XOR again to restore value
   438  06BB  2EB5               	goto	clrloop0	;do the next byte
   439                           
   440                           	psect	cstackCOMMON
   441  0070                     __pcstackCOMMON:	
   442  0070                     ?_Lcd_Port:	
   443  0070                     ?_Lcd_Cmd:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_Lcd_Init:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_Lcd_Write_Char:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_uart_init:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_uart_txc:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_uart_txc:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_uart_rx:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_uart_rx:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_adc_init:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_timer1_init:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_main:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_ISR:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_Lcd_Clear:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     uart_txc@ch:	
   483                           ; 2 bytes @ 0x0
   484                           
   485                           
   486                           ; 1 bytes @ 0x0
   487  0070                     	ds	1
   488  0071                     uart_txc@i:	
   489                           
   490                           ; 2 bytes @ 0x1
   491  0071                     	ds	2
   492  0073                     ?_uart_txs:	
   493  0073                     uart_txs@st:	
   494                           ; 1 bytes @ 0x3
   495                           
   496                           
   497                           ; 2 bytes @ 0x3
   498  0073                     	ds	2
   499  0075                     ??_uart_txs:	
   500  0075                     ??_ISR:	
   501                           ; 1 bytes @ 0x5
   502                           
   503                           
   504                           ; 1 bytes @ 0x5
   505  0075                     	ds	7
   506                           
   507                           	psect	cstackBANK0
   508  0058                     __pcstackBANK0:	
   509  0058                     ??_Lcd_Port:	
   510  0058                     ??_uart_init:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0058                     ??_adc_init:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0058                     ??_timer1_init:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0058                     ?_adc_read:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0058                     Lcd_Port@a:	
   523                           ; 2 bytes @ 0x0
   524                           
   525                           
   526                           ; 1 bytes @ 0x0
   527  0058                     	ds	1
   528  0059                     ??_Lcd_Cmd:	
   529  0059                     ??_Lcd_Write_Char:	
   530                           ; 1 bytes @ 0x1
   531                           
   532                           
   533                           ; 1 bytes @ 0x1
   534  0059                     	ds	1
   535  005A                     ??_adc_read:	
   536  005A                     Lcd_Write_Char@temp:	
   537                           ; 1 bytes @ 0x2
   538                           
   539                           
   540                           ; 1 bytes @ 0x2
   541  005A                     	ds	1
   542  005B                     Lcd_Cmd@a:	
   543  005B                     Lcd_Write_Char@y:	
   544                           ; 1 bytes @ 0x3
   545                           
   546                           
   547                           ; 1 bytes @ 0x3
   548  005B                     	ds	1
   549  005C                     ??_Lcd_Clear:	
   550  005C                     ?_Lcd_Set_Cursor:	
   551                           ; 1 bytes @ 0x4
   552                           
   553  005C                     ??_Lcd_Init:	
   554                           ; 1 bytes @ 0x4
   555                           
   556  005C                     Lcd_Set_Cursor@b:	
   557                           ; 1 bytes @ 0x4
   558                           
   559  005C                     Lcd_Write_Char@a:	
   560                           ; 1 bytes @ 0x4
   561                           
   562  005C                     adc_read@channel:	
   563                           ; 1 bytes @ 0x4
   564                           
   565                           
   566                           ; 1 bytes @ 0x4
   567  005C                     	ds	1
   568  005D                     ??_Lcd_Set_Cursor:	
   569  005D                     ?_Lcd_Write_String:	
   570                           ; 1 bytes @ 0x5
   571                           
   572  005D                     Lcd_Write_String@a:	
   573                           ; 1 bytes @ 0x5
   574                           
   575                           
   576                           ; 2 bytes @ 0x5
   577  005D                     	ds	2
   578  005F                     ??_Lcd_Write_String:	
   579  005F                     Lcd_Set_Cursor@a:	
   580                           ; 1 bytes @ 0x7
   581                           
   582                           
   583                           ; 1 bytes @ 0x7
   584  005F                     	ds	1
   585  0060                     Lcd_Set_Cursor@z:	
   586                           
   587                           ; 1 bytes @ 0x8
   588  0060                     	ds	1
   589  0061                     Lcd_Set_Cursor@y:	
   590                           
   591                           ; 1 bytes @ 0x9
   592  0061                     	ds	1
   593  0062                     Lcd_Set_Cursor@temp:	
   594  0062                     Lcd_Write_String@i:	
   595                           ; 1 bytes @ 0xA
   596                           
   597                           
   598                           ; 2 bytes @ 0xA
   599  0062                     	ds	2
   600  0064                     ??_main:	
   601                           
   602                           ; 1 bytes @ 0xC
   603  0064                     	ds	3
   604                           
   605                           	psect	maintext
   606  024B                     __pmaintext:	
   607 ;;
   608 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   609 ;;
   610 ;; *************** function _main *****************
   611 ;; Defined at:
   612 ;;		line 96 in file "BORDER.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : B00/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   626 ;;      Params:         0       0       0       0       0
   627 ;;      Locals:         0       0       0       0       0
   628 ;;      Temps:          0       3       0       0       0
   629 ;;      Totals:         0       3       0       0       0
   630 ;;Total ram usage:        3 bytes
   631 ;; Hardware stack levels required when called:    6
   632 ;; This function calls:
   633 ;;		_Lcd_Clear
   634 ;;		_Lcd_Init
   635 ;;		_Lcd_Set_Cursor
   636 ;;		_Lcd_Write_String
   637 ;;		_adc_init
   638 ;;		_adc_read
   639 ;;		_timer1_init
   640 ;;		_uart_init
   641 ;; This function is called by:
   642 ;;		Startup code after reset
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           
   647                           ;psect for function _main
   648  024B                     _main:	
   649                           
   650                           ;BORDER.c: 97: TRISD = 0x00;
   651                           
   652                           ;incstack = 0
   653                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   654  024B  1683               	bsf	3,5	;RP0=1, select bank1
   655  024C  1303               	bcf	3,6	;RP1=0, select bank1
   656  024D  0188               	clrf	8	;volatile
   657                           
   658                           ;BORDER.c: 98: TRISA = 0xFF;
   659  024E  30FF               	movlw	255
   660  024F  0085               	movwf	5	;volatile
   661                           
   662                           ;BORDER.c: 99: TRISB7 = 1;
   663  0250  1786               	bsf	6,7	;volatile
   664                           
   665                           ;BORDER.c: 100: TRISB6 = 1;
   666  0251  1706               	bsf	6,6	;volatile
   667                           
   668                           ;BORDER.c: 101: TRISB0 = 0;
   669  0252  1006               	bcf	6,0	;volatile
   670                           
   671                           ;BORDER.c: 102: TRISB1 = 0;
   672  0253  1086               	bcf	6,1	;volatile
   673                           
   674                           ;BORDER.c: 103: TRISB2 = 0;
   675  0254  1106               	bcf	6,2	;volatile
   676                           
   677                           ;BORDER.c: 104: TRISB3 = 0;
   678  0255  1186               	bcf	6,3	;volatile
   679                           
   680                           ;BORDER.c: 105: RB2 = 0;
   681  0256  1283               	bcf	3,5	;RP0=0, select bank0
   682  0257  1303               	bcf	3,6	;RP1=0, select bank0
   683  0258  1106               	bcf	6,2	;volatile
   684                           
   685                           ;BORDER.c: 106: RB3 = 0;
   686  0259  1186               	bcf	6,3	;volatile
   687                           
   688                           ;BORDER.c: 107: RB0 = 0;
   689  025A  1006               	bcf	6,0	;volatile
   690                           
   691                           ;BORDER.c: 108: RB1 = 0;
   692  025B  1086               	bcf	6,1	;volatile
   693                           
   694                           ;BORDER.c: 109: timer1_init();
   695  025C  120A  118A  2687  120A  118A  	fcall	_timer1_init
   696                           
   697                           ;BORDER.c: 110: OPTION_REG = 0b00101000;
   698  0261  3028               	movlw	40
   699  0262  1683               	bsf	3,5	;RP0=1, select bank1
   700  0263  1303               	bcf	3,6	;RP1=0, select bank1
   701  0264  0081               	movwf	1	;volatile
   702                           
   703                           ;BORDER.c: 111: TMR0 = 0;
   704  0265  1283               	bcf	3,5	;RP0=0, select bank0
   705  0266  1303               	bcf	3,6	;RP1=0, select bank0
   706  0267  0181               	clrf	1	;volatile
   707                           
   708                           ;BORDER.c: 112: INTCON = 0xC0;
   709  0268  30C0               	movlw	192
   710  0269  008B               	movwf	11	;volatile
   711                           
   712                           ;BORDER.c: 113: uart_init();
   713  026A  120A  118A  2657  120A  118A  	fcall	_uart_init
   714                           
   715                           ;BORDER.c: 114: Lcd_Init();
   716  026F  120A  118A  2499  120A  118A  	fcall	_Lcd_Init
   717                           
   718                           ;BORDER.c: 115: adc_init();
   719  0274  120A  118A  26AB  120A  118A  	fcall	_adc_init
   720                           
   721                           ;BORDER.c: 116: Lcd_Clear();
   722  0279  120A  118A  2696  120A  118A  	fcall	_Lcd_Clear
   723                           
   724                           ;BORDER.c: 117: Lcd_Set_Cursor(1,1);
   725  027E  1283               	bcf	3,5	;RP0=0, select bank0
   726  027F  1303               	bcf	3,6	;RP1=0, select bank0
   727  0280  01DC               	clrf	Lcd_Set_Cursor@b
   728  0281  0ADC               	incf	Lcd_Set_Cursor@b,f
   729  0282  3001               	movlw	1
   730  0283  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
   731                           
   732                           ;BORDER.c: 118: Lcd_Write_String("  BORDER ALERT  ");
   733  0288  3045               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   734  0289  1283               	bcf	3,5	;RP0=0, select bank0
   735  028A  1303               	bcf	3,6	;RP1=0, select bank0
   736  028B  00DD               	movwf	Lcd_Write_String@a
   737  028C  3080               	movlw	128
   738  028D  00DE               	movwf	Lcd_Write_String@a+1
   739  028E  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
   740                           
   741                           ;BORDER.c: 119: Lcd_Set_Cursor(2,1);
   742  0293  1283               	bcf	3,5	;RP0=0, select bank0
   743  0294  1303               	bcf	3,6	;RP1=0, select bank0
   744  0295  01DC               	clrf	Lcd_Set_Cursor@b
   745  0296  0ADC               	incf	Lcd_Set_Cursor@b,f
   746  0297  3002               	movlw	2
   747  0298  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
   748                           
   749                           ;BORDER.c: 120: Lcd_Write_String(" SYS USING IOT  ");
   750  029D  3034               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   751  029E  1283               	bcf	3,5	;RP0=0, select bank0
   752  029F  1303               	bcf	3,6	;RP1=0, select bank0
   753  02A0  00DD               	movwf	Lcd_Write_String@a
   754  02A1  3080               	movlw	128
   755  02A2  00DE               	movwf	Lcd_Write_String@a+1
   756  02A3  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
   757                           
   758                           ;BORDER.c: 121: _delay((unsigned long)((3000)*(20000000/4000.0)));
   759  02A8  304D               	movlw	77
   760  02A9  1283               	bcf	3,5	;RP0=0, select bank0
   761  02AA  1303               	bcf	3,6	;RP1=0, select bank0
   762  02AB  00E6               	movwf	??_main+2
   763  02AC  3019               	movlw	25
   764  02AD  00E5               	movwf	??_main+1
   765  02AE  304F               	movlw	79
   766  02AF  00E4               	movwf	??_main
   767  02B0                     u1117:	
   768  02B0  0BE4               	decfsz	??_main,f
   769  02B1  2AB0               	goto	u1117
   770  02B2  0BE5               	decfsz	??_main+1,f
   771  02B3  2AB0               	goto	u1117
   772  02B4  0BE6               	decfsz	??_main+2,f
   773  02B5  2AB0               	goto	u1117
   774  02B6                     L1:	
   775                           
   776                           ;BORDER.c: 122: Lcd_Clear();
   777  02B6  120A  118A  2696  120A  118A  	fcall	_Lcd_Clear
   778  02BB                     l1351:	
   779                           ;BORDER.c: 123: while(1){
   780                           
   781                           
   782                           ;BORDER.c: 124: x = adc_read(0);
   783  02BB  3000               	movlw	0
   784  02BC  120A  118A  25CA  120A  118A  	fcall	_adc_read
   785  02C1  1283               	bcf	3,5	;RP0=0, select bank0
   786  02C2  1303               	bcf	3,6	;RP1=0, select bank0
   787  02C3  0859               	movf	?_adc_read+1,w
   788  02C4  00C9               	movwf	_x+1
   789  02C5  0858               	movf	?_adc_read,w
   790  02C6  00C8               	movwf	_x
   791                           
   792                           ;BORDER.c: 125: y = adc_read(1);
   793  02C7  3001               	movlw	1
   794  02C8  120A  118A  25CA  120A  118A  	fcall	_adc_read
   795  02CD  1283               	bcf	3,5	;RP0=0, select bank0
   796  02CE  1303               	bcf	3,6	;RP1=0, select bank0
   797  02CF  0859               	movf	?_adc_read+1,w
   798  02D0  00C7               	movwf	_y+1
   799  02D1  0858               	movf	?_adc_read,w
   800  02D2  00C6               	movwf	_y
   801                           
   802                           ;BORDER.c: 126: z = adc_read(2);
   803  02D3  3002               	movlw	2
   804  02D4  120A  118A  25CA  120A  118A  	fcall	_adc_read
   805  02D9  1283               	bcf	3,5	;RP0=0, select bank0
   806  02DA  1303               	bcf	3,6	;RP1=0, select bank0
   807  02DB  0859               	movf	?_adc_read+1,w
   808  02DC  00C5               	movwf	_z+1
   809  02DD  0858               	movf	?_adc_read,w
   810  02DE  00C4               	movwf	_z
   811                           
   812                           ;BORDER.c: 127: RB0 = 1;
   813  02DF  1406               	bsf	6,0	;volatile
   814                           
   815                           ;BORDER.c: 128: RB1 = 0;
   816  02E0  1086               	bcf	6,1	;volatile
   817                           
   818                           ;BORDER.c: 129: RB2 = 0;
   819  02E1  1106               	bcf	6,2	;volatile
   820                           
   821                           ;BORDER.c: 130: if(x <= 290){RB3 = 1;}
   822  02E2  3001               	movlw	1
   823  02E3  0249               	subwf	_x+1,w
   824  02E4  3023               	movlw	35
   825  02E5  1903               	skipnz
   826  02E6  0248               	subwf	_x,w
   827  02E7  1803               	skipnc
   828  02E8  2AEB               	goto	l214
   829  02E9  1586               	bsf	6,3	;volatile
   830  02EA  2AEC               	goto	l1367
   831  02EB                     l214:	
   832                           
   833                           ;BORDER.c: 131: else{RB3 = 0;}
   834  02EB  1186               	bcf	6,3	;volatile
   835  02EC                     l1367:	
   836                           ;BORDER.c: 132: while(finish!=1);
   837                           
   838  02EC  0342               	decf	_finish,w
   839  02ED  0443               	iorwf	_finish+1,w
   840  02EE  1D03               	btfss	3,2
   841  02EF  2AEC               	goto	l1367
   842                           
   843                           ;BORDER.c: 133: if(RB7 == 0){
   844  02F0  1B86               	btfsc	6,7	;volatile
   845  02F1  2B7D               	goto	l219
   846                           
   847                           ;BORDER.c: 134: _delay((unsigned long)((100)*(20000000/4000.0)));
   848  02F2  3003               	movlw	3
   849  02F3  1283               	bcf	3,5	;RP0=0, select bank0
   850  02F4  1303               	bcf	3,6	;RP1=0, select bank0
   851  02F5  00E6               	movwf	??_main+2
   852  02F6  308A               	movlw	138
   853  02F7  00E5               	movwf	??_main+1
   854  02F8  3055               	movlw	85
   855  02F9  00E4               	movwf	??_main
   856  02FA                     u1127:	
   857  02FA  0BE4               	decfsz	??_main,f
   858  02FB  2AFA               	goto	u1127
   859  02FC  0BE5               	decfsz	??_main+1,f
   860  02FD  2AFA               	goto	u1127
   861  02FE  0BE6               	decfsz	??_main+2,f
   862  02FF  2AFA               	goto	u1127
   863                           
   864                           ;BORDER.c: 135: if(RB7 == 0){
   865  0300  1283               	bcf	3,5	;RP0=0, select bank0
   866  0301  1303               	bcf	3,6	;RP1=0, select bank0
   867  0302  1B86               	btfsc	6,7	;volatile
   868  0303  2ABB               	goto	l1351
   869                           
   870                           ;BORDER.c: 136: CNT = 1;
   871  0304  3001               	movlw	1
   872  0305  00CA               	movwf	_CNT
   873  0306  3000               	movlw	0
   874  0307  00CB               	movwf	_CNT+1
   875                           
   876                           ;BORDER.c: 137: RB2 = 1;
   877  0308  1506               	bsf	6,2	;volatile
   878                           
   879                           ;BORDER.c: 138: RB0 = 0;
   880  0309  1006               	bcf	6,0	;volatile
   881                           
   882                           ;BORDER.c: 139: RB1 = 0;
   883  030A  1086               	bcf	6,1	;volatile
   884                           
   885                           ;BORDER.c: 140: Lcd_Set_Cursor(1,1);
   886  030B  01DC               	clrf	Lcd_Set_Cursor@b
   887  030C  0ADC               	incf	Lcd_Set_Cursor@b,f
   888  030D  3001               	movlw	1
   889  030E  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
   890                           
   891                           ;BORDER.c: 141: Lcd_Write_String("LAT:1306.6243N  ");
   892  0313  3023               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   893  0314  1283               	bcf	3,5	;RP0=0, select bank0
   894  0315  1303               	bcf	3,6	;RP1=0, select bank0
   895  0316  00DD               	movwf	Lcd_Write_String@a
   896  0317  3080               	movlw	128
   897  0318  00DE               	movwf	Lcd_Write_String@a+1
   898  0319  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
   899                           
   900                           ;BORDER.c: 142: Lcd_Set_Cursor(2,1);
   901  031E  1283               	bcf	3,5	;RP0=0, select bank0
   902  031F  1303               	bcf	3,6	;RP1=0, select bank0
   903  0320  01DC               	clrf	Lcd_Set_Cursor@b
   904  0321  0ADC               	incf	Lcd_Set_Cursor@b,f
   905  0322  3002               	movlw	2
   906  0323  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
   907                           
   908                           ;BORDER.c: 143: Lcd_Write_String("LON:08096.6609E ");
   909  0328  3056               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   910  0329  1283               	bcf	3,5	;RP0=0, select bank0
   911  032A  1303               	bcf	3,6	;RP1=0, select bank0
   912  032B  00DD               	movwf	Lcd_Write_String@a
   913  032C  3080               	movlw	128
   914  032D  00DE               	movwf	Lcd_Write_String@a+1
   915  032E  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
   916                           
   917                           ;BORDER.c: 144: _delay((unsigned long)((2000)*(20000000/4000.0)));
   918  0333  3033               	movlw	51
   919  0334  1283               	bcf	3,5	;RP0=0, select bank0
   920  0335  1303               	bcf	3,6	;RP1=0, select bank0
   921  0336  00E6               	movwf	??_main+2
   922  0337  30BB               	movlw	187
   923  0338  00E5               	movwf	??_main+1
   924  0339  30DF               	movlw	223
   925  033A  00E4               	movwf	??_main
   926  033B                     u1137:	
   927  033B  0BE4               	decfsz	??_main,f
   928  033C  2B3B               	goto	u1137
   929  033D  0BE5               	decfsz	??_main+1,f
   930  033E  2B3B               	goto	u1137
   931  033F  0BE6               	decfsz	??_main+2,f
   932  0340  2B3B               	goto	u1137
   933                           
   934                           ;BORDER.c: 145: Lcd_Set_Cursor(1,1);
   935  0341  1283               	bcf	3,5	;RP0=0, select bank0
   936  0342  1303               	bcf	3,6	;RP1=0, select bank0
   937  0343  01DC               	clrf	Lcd_Set_Cursor@b
   938  0344  0ADC               	incf	Lcd_Set_Cursor@b,f
   939  0345  3001               	movlw	1
   940  0346  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
   941                           
   942                           ;BORDER.c: 146: Lcd_Write_String("BORDER CROSSED  ");
   943  034B  3012               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   944  034C  1283               	bcf	3,5	;RP0=0, select bank0
   945  034D  1303               	bcf	3,6	;RP1=0, select bank0
   946  034E  00DD               	movwf	Lcd_Write_String@a
   947  034F  3080               	movlw	128
   948  0350  00DE               	movwf	Lcd_Write_String@a+1
   949  0351  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
   950                           
   951                           ;BORDER.c: 147: Lcd_Set_Cursor(2,1);
   952  0356  1283               	bcf	3,5	;RP0=0, select bank0
   953  0357  1303               	bcf	3,6	;RP1=0, select bank0
   954  0358  01DC               	clrf	Lcd_Set_Cursor@b
   955  0359  0ADC               	incf	Lcd_Set_Cursor@b,f
   956  035A  3002               	movlw	2
   957  035B  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
   958                           
   959                           ;BORDER.c: 148: Lcd_Write_String("                ");
   960  0360  3001               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   961  0361  1283               	bcf	3,5	;RP0=0, select bank0
   962  0362  1303               	bcf	3,6	;RP1=0, select bank0
   963  0363  00DD               	movwf	Lcd_Write_String@a
   964  0364  3080               	movlw	128
   965  0365  00DE               	movwf	Lcd_Write_String@a+1
   966  0366  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
   967                           
   968                           ;BORDER.c: 149: _delay((unsigned long)((2000)*(20000000/4000.0)));
   969  036B  3033               	movlw	51
   970  036C  1283               	bcf	3,5	;RP0=0, select bank0
   971  036D  1303               	bcf	3,6	;RP1=0, select bank0
   972  036E  00E6               	movwf	??_main+2
   973  036F  30BB               	movlw	187
   974  0370  00E5               	movwf	??_main+1
   975  0371  30DF               	movlw	223
   976  0372  00E4               	movwf	??_main
   977  0373                     u1147:	
   978  0373  0BE4               	decfsz	??_main,f
   979  0374  2B73               	goto	u1147
   980  0375  0BE5               	decfsz	??_main+1,f
   981  0376  2B73               	goto	u1147
   982  0377  0BE6               	decfsz	??_main+2,f
   983  0378  2B73               	goto	u1147
   984                           
   985                           ;BORDER.c: 150: RB2 = 0;
   986  0379  1283               	bcf	3,5	;RP0=0, select bank0
   987  037A  1303               	bcf	3,6	;RP1=0, select bank0
   988  037B  1106               	bcf	6,2	;volatile
   989  037C  2AB6               	goto	L1
   990  037D                     l219:	
   991                           ;BORDER.c: 152: }
   992                           ;BORDER.c: 153: }
   993                           
   994                           ;BORDER.c: 151: Lcd_Clear();
   995                           
   996                           
   997                           ;BORDER.c: 154: else{
   998                           ;BORDER.c: 155: RB2 = 0;
   999  037D  1106               	bcf	6,2	;volatile
  1000                           
  1001                           ;BORDER.c: 156: Lcd_Set_Cursor(1,1);
  1002  037E  01DC               	clrf	Lcd_Set_Cursor@b
  1003  037F  0ADC               	incf	Lcd_Set_Cursor@b,f
  1004  0380  3001               	movlw	1
  1005  0381  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
  1006                           
  1007                           ;BORDER.c: 157: Lcd_Write_String("LAT:");
  1008  0386  307B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1009  0387  1283               	bcf	3,5	;RP0=0, select bank0
  1010  0388  1303               	bcf	3,6	;RP1=0, select bank0
  1011  0389  00DD               	movwf	Lcd_Write_String@a
  1012  038A  3080               	movlw	128
  1013  038B  00DE               	movwf	Lcd_Write_String@a+1
  1014  038C  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
  1015                           
  1016                           ;BORDER.c: 158: Lcd_Set_Cursor(1,5);
  1017  0391  3005               	movlw	5
  1018  0392  1283               	bcf	3,5	;RP0=0, select bank0
  1019  0393  1303               	bcf	3,6	;RP1=0, select bank0
  1020  0394  00E4               	movwf	??_main
  1021  0395  0864               	movf	??_main,w
  1022  0396  00DC               	movwf	Lcd_Set_Cursor@b
  1023  0397  3001               	movlw	1
  1024  0398  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
  1025                           
  1026                           ;BORDER.c: 159: Lcd_Write_String(lat);
  1027  039D  30B4               	movlw	(low (_lat| 0))& (0+255)
  1028  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1029  039F  1303               	bcf	3,6	;RP1=0, select bank0
  1030  03A0  00DD               	movwf	Lcd_Write_String@a
  1031  03A1  3000               	movlw	0
  1032  03A2  00DE               	movwf	Lcd_Write_String@a+1
  1033  03A3  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
  1034                           
  1035                           ;BORDER.c: 160: Lcd_Write_String(lat_dir);
  1036  03A8  3053               	movlw	(low (_lat_dir| 0))& (0+255)
  1037  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1038  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  1039  03AB  00DD               	movwf	Lcd_Write_String@a
  1040  03AC  3000               	movlw	0
  1041  03AD  00DE               	movwf	Lcd_Write_String@a+1
  1042  03AE  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
  1043                           
  1044                           ;BORDER.c: 161: Lcd_Set_Cursor(2,1);
  1045  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  1046  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  1047  03B5  01DC               	clrf	Lcd_Set_Cursor@b
  1048  03B6  0ADC               	incf	Lcd_Set_Cursor@b,f
  1049  03B7  3002               	movlw	2
  1050  03B8  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
  1051                           
  1052                           ;BORDER.c: 162: Lcd_Write_String("LON:");
  1053  03BD  3076               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1054  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  1055  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  1056  03C0  00DD               	movwf	Lcd_Write_String@a
  1057  03C1  3080               	movlw	128
  1058  03C2  00DE               	movwf	Lcd_Write_String@a+1
  1059  03C3  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
  1060                           
  1061                           ;BORDER.c: 163: Lcd_Set_Cursor(2,5);
  1062  03C8  3005               	movlw	5
  1063  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1064  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  1065  03CB  00E4               	movwf	??_main
  1066  03CC  0864               	movf	??_main,w
  1067  03CD  00DC               	movwf	Lcd_Set_Cursor@b
  1068  03CE  3002               	movlw	2
  1069  03CF  120A  118A  24FA  120A  118A  	fcall	_Lcd_Set_Cursor
  1070                           
  1071                           ;BORDER.c: 164: Lcd_Write_String(lon);
  1072  03D4  30A0               	movlw	(low (_lon| 0))& (0+255)
  1073  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  1074  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  1075  03D7  00DD               	movwf	Lcd_Write_String@a
  1076  03D8  3000               	movlw	0
  1077  03D9  00DE               	movwf	Lcd_Write_String@a+1
  1078  03DA  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
  1079                           
  1080                           ;BORDER.c: 165: Lcd_Write_String(lon_dir);
  1081  03DF  304E               	movlw	(low (_lon_dir| 0))& (0+255)
  1082  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1083  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1084  03E2  00DD               	movwf	Lcd_Write_String@a
  1085  03E3  3000               	movlw	0
  1086  03E4  00DE               	movwf	Lcd_Write_String@a+1
  1087  03E5  120A  118A  254C  120A  118A  	fcall	_Lcd_Write_String
  1088                           
  1089                           ;BORDER.c: 166: RB0 = 1;
  1090  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1091  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1092  03EC  1406               	bsf	6,0	;volatile
  1093                           
  1094                           ;BORDER.c: 167: RB1 = 0;
  1095  03ED  1086               	bcf	6,1	;volatile
  1096                           
  1097                           ;BORDER.c: 168: finish = 0;
  1098  03EE  01C2               	clrf	_finish
  1099  03EF  01C3               	clrf	_finish+1
  1100                           
  1101                           ;BORDER.c: 169: pos_cnt = 0;
  1102  03F0  01C0               	clrf	_pos_cnt
  1103  03F1  01C1               	clrf	_pos_cnt+1
  1104  03F2  2ABB               	goto	l1351
  1105  03F3                     __end_of_main:	
  1106                           
  1107                           	psect	text1
  1108  0657                     __ptext1:	
  1109 ;; *************** function _uart_init *****************
  1110 ;; Defined at:
  1111 ;;		line 38 in file "BORDER.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;		None
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1125 ;;      Params:         0       0       0       0       0
  1126 ;;      Locals:         0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0
  1128 ;;      Totals:         0       0       0       0       0
  1129 ;;Total ram usage:        0 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    3
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           
  1140                           ;psect for function _uart_init
  1141  0657                     _uart_init:	
  1142                           
  1143                           ;BORDER.c: 39: TRISC6 = 0;
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _uart_init: [wreg]
  1147  0657  1683               	bsf	3,5	;RP0=1, select bank1
  1148  0658  1303               	bcf	3,6	;RP1=0, select bank1
  1149  0659  1307               	bcf	7,6	;volatile
  1150                           
  1151                           ;BORDER.c: 40: TRISC7 = 1;
  1152  065A  1787               	bsf	7,7	;volatile
  1153                           
  1154                           ;BORDER.c: 41: SPBRG = ((20000000/16)/9600) - 1;
  1155  065B  3081               	movlw	129
  1156  065C  0099               	movwf	25	;volatile
  1157                           
  1158                           ;BORDER.c: 42: BRGH = 1;
  1159  065D  1518               	bsf	24,2	;volatile
  1160                           
  1161                           ;BORDER.c: 43: SYNC = 0;
  1162  065E  1218               	bcf	24,4	;volatile
  1163                           
  1164                           ;BORDER.c: 44: SPEN = 1;
  1165  065F  1283               	bcf	3,5	;RP0=0, select bank0
  1166  0660  1303               	bcf	3,6	;RP1=0, select bank0
  1167  0661  1798               	bsf	24,7	;volatile
  1168                           
  1169                           ;BORDER.c: 45: TXEN = 1;
  1170  0662  1683               	bsf	3,5	;RP0=1, select bank1
  1171  0663  1303               	bcf	3,6	;RP1=0, select bank1
  1172  0664  1698               	bsf	24,5	;volatile
  1173                           
  1174                           ;BORDER.c: 46: CREN = 1;
  1175  0665  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0666  1303               	bcf	3,6	;RP1=0, select bank0
  1177  0667  1618               	bsf	24,4	;volatile
  1178                           
  1179                           ;BORDER.c: 47: RCIE = 1;
  1180  0668  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0669  1303               	bcf	3,6	;RP1=0, select bank1
  1182  066A  168C               	bsf	12,5	;volatile
  1183                           
  1184                           ;BORDER.c: 48: RCIF = 0;
  1185  066B  1283               	bcf	3,5	;RP0=0, select bank0
  1186  066C  1303               	bcf	3,6	;RP1=0, select bank0
  1187  066D  128C               	bcf	12,5	;volatile
  1188  066E  0008               	return
  1189  066F                     __end_of_uart_init:	
  1190                           
  1191                           	psect	text2
  1192  0687                     __ptext2:	
  1193 ;; *************** function _timer1_init *****************
  1194 ;; Defined at:
  1195 ;;		line 85 in file "BORDER.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		status,2
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1209 ;;      Params:         0       0       0       0       0
  1210 ;;      Locals:         0       0       0       0       0
  1211 ;;      Temps:          0       0       0       0       0
  1212 ;;      Totals:         0       0       0       0       0
  1213 ;;Total ram usage:        0 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    3
  1216 ;; This function calls:
  1217 ;;		Nothing
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           
  1224                           ;psect for function _timer1_init
  1225  0687                     _timer1_init:	
  1226                           
  1227                           ;BORDER.c: 86: TMR1H = 0x00;
  1228                           
  1229                           ;incstack = 0
  1230                           ; Regs used in _timer1_init: [status,2]
  1231  0687  1283               	bcf	3,5	;RP0=0, select bank0
  1232  0688  1303               	bcf	3,6	;RP1=0, select bank0
  1233  0689  018F               	clrf	15	;volatile
  1234                           
  1235                           ;BORDER.c: 87: TMR1L = 0x00;
  1236  068A  018E               	clrf	14	;volatile
  1237                           
  1238                           ;BORDER.c: 88: PIR1bits.TMR1IF = 0;
  1239  068B  100C               	bcf	12,0	;volatile
  1240                           
  1241                           ;BORDER.c: 89: T1CONbits.TMR1CS = 0;
  1242  068C  1090               	bcf	16,1	;volatile
  1243                           
  1244                           ;BORDER.c: 90: T1CONbits.T1CKPS0 = 1;
  1245  068D  1610               	bsf	16,4	;volatile
  1246                           
  1247                           ;BORDER.c: 91: T1CONbits.T1CKPS1 = 1;
  1248  068E  1690               	bsf	16,5	;volatile
  1249                           
  1250                           ;BORDER.c: 92: PIE1bits.TMR1IE = 1;
  1251  068F  1683               	bsf	3,5	;RP0=1, select bank1
  1252  0690  1303               	bcf	3,6	;RP1=0, select bank1
  1253  0691  140C               	bsf	12,0	;volatile
  1254                           
  1255                           ;BORDER.c: 93: T1CONbits.TMR1ON = 1;
  1256  0692  1283               	bcf	3,5	;RP0=0, select bank0
  1257  0693  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0694  1410               	bsf	16,0	;volatile
  1259  0695  0008               	return
  1260  0696                     __end_of_timer1_init:	
  1261                           
  1262                           	psect	text3
  1263  05CA                     __ptext3:	
  1264 ;; *************** function _adc_read *****************
  1265 ;; Defined at:
  1266 ;;		line 74 in file "BORDER.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  channel         1    wreg     unsigned char 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  channel         1    4[BANK0 ] unsigned char 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  2    0[BANK0 ] unsigned int 
  1273 ;; Registers used:
  1274 ;;		wreg, status,2, status,0
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1280 ;;      Params:         0       2       0       0       0
  1281 ;;      Locals:         0       1       0       0       0
  1282 ;;      Temps:          0       2       0       0       0
  1283 ;;      Totals:         0       5       0       0       0
  1284 ;;Total ram usage:        5 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    3
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           
  1295                           ;psect for function _adc_read
  1296  05CA                     _adc_read:	
  1297                           
  1298                           ;incstack = 0
  1299                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  1300                           ;adc_read@channel stored from wreg
  1301  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1302  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1303  05CC  00DC               	movwf	adc_read@channel
  1304                           
  1305                           ;BORDER.c: 75: if(channel > 7)
  1306  05CD  3008               	movlw	8
  1307  05CE  025C               	subwf	adc_read@channel,w
  1308  05CF  1C03               	skipc
  1309  05D0  2DD4               	goto	l1287
  1310                           
  1311                           ;BORDER.c: 76: return 0;
  1312  05D1  01D8               	clrf	?_adc_read
  1313  05D2  01D9               	clrf	?_adc_read+1
  1314  05D3  0008               	return
  1315  05D4                     l1287:	
  1316                           
  1317                           ;BORDER.c: 78: ADCON0 &= 0xC5;
  1318  05D4  30C5               	movlw	197
  1319  05D5  00DA               	movwf	??_adc_read
  1320  05D6  085A               	movf	??_adc_read,w
  1321  05D7  059F               	andwf	31,f	;volatile
  1322                           
  1323                           ;BORDER.c: 79: ADCON0 |= channel<<3;
  1324  05D8  085C               	movf	adc_read@channel,w
  1325  05D9  00DA               	movwf	??_adc_read
  1326  05DA  3002               	movlw	2
  1327  05DB                     u755:	
  1328  05DB  1003               	clrc
  1329  05DC  0DDA               	rlf	??_adc_read,f
  1330  05DD  3EFF               	addlw	-1
  1331  05DE  1D03               	skipz
  1332  05DF  2DDB               	goto	u755
  1333  05E0  1003               	clrc
  1334  05E1  0D5A               	rlf	??_adc_read,w
  1335  05E2  00DB               	movwf	??_adc_read+1
  1336  05E3  085B               	movf	??_adc_read+1,w
  1337  05E4  049F               	iorwf	31,f	;volatile
  1338                           
  1339                           ;BORDER.c: 80: _delay((unsigned long)((2)*(20000000/4000.0)));
  1340  05E5  300D               	movlw	13
  1341  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  1342  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  1343  05E8  00DB               	movwf	??_adc_read+1
  1344  05E9  30FB               	movlw	251
  1345  05EA  00DA               	movwf	??_adc_read
  1346  05EB                     u1157:	
  1347  05EB  0BDA               	decfsz	??_adc_read,f
  1348  05EC  2DEB               	goto	u1157
  1349  05ED  0BDB               	decfsz	??_adc_read+1,f
  1350  05EE  2DEB               	goto	u1157
  1351                           
  1352                           ;BORDER.c: 81: GO_nDONE = 1;
  1353  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  1354  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  1355  05F1  151F               	bsf	31,2	;volatile
  1356  05F2                     l203:	
  1357                           ;BORDER.c: 82: while(GO_nDONE);
  1358                           
  1359  05F2  191F               	btfsc	31,2	;volatile
  1360  05F3  2DF2               	goto	l203
  1361                           
  1362                           ;BORDER.c: 83: return ((ADRESH<<8)+ADRESL);
  1363  05F4  081E               	movf	30,w	;volatile
  1364  05F5  00D9               	movwf	?_adc_read+1
  1365  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  1366  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  1367  05F8  081E               	movf	30,w	;volatile
  1368  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  1369  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  1370  05FB  00D8               	movwf	?_adc_read
  1371  05FC  0008               	return
  1372  05FD                     __end_of_adc_read:	
  1373                           
  1374                           	psect	text4
  1375  06AB                     __ptext4:	
  1376 ;; *************** function _adc_init *****************
  1377 ;; Defined at:
  1378 ;;		line 70 in file "BORDER.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1392 ;;      Params:         0       0       0       0       0
  1393 ;;      Locals:         0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0
  1395 ;;      Totals:         0       0       0       0       0
  1396 ;;Total ram usage:        0 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    3
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function _adc_init
  1408  06AB                     _adc_init:	
  1409                           
  1410                           ;BORDER.c: 71: ADCON0 = 0x81;
  1411                           
  1412                           ;incstack = 0
  1413                           ; Regs used in _adc_init: [wreg]
  1414  06AB  3081               	movlw	129
  1415  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1416  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1417  06AE  009F               	movwf	31	;volatile
  1418                           
  1419                           ;BORDER.c: 72: ADCON1 = 0xC0;
  1420  06AF  30C0               	movlw	192
  1421  06B0  1683               	bsf	3,5	;RP0=1, select bank1
  1422  06B1  1303               	bcf	3,6	;RP1=0, select bank1
  1423  06B2  009F               	movwf	31	;volatile
  1424  06B3  0008               	return
  1425  06B4                     __end_of_adc_init:	
  1426                           
  1427                           	psect	text5
  1428  054C                     __ptext5:	
  1429 ;; *************** function _Lcd_Write_String *****************
  1430 ;; Defined at:
  1431 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;  a               2    5[BANK0 ] PTR unsigned char 
  1434 ;;		 -> lon_dir(5), lon(20), STR_8(5), lat_dir(5), 
  1435 ;;		 -> lat(20), STR_7(5), STR_6(17), STR_5(17), 
  1436 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  i               2   10[BANK0 ] int 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1448 ;;      Params:         0       2       0       0       0
  1449 ;;      Locals:         0       2       0       0       0
  1450 ;;      Temps:          0       3       0       0       0
  1451 ;;      Totals:         0       7       0       0       0
  1452 ;;Total ram usage:        7 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    5
  1455 ;; This function calls:
  1456 ;;		_Lcd_Write_Char
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           
  1463                           ;psect for function _Lcd_Write_String
  1464  054C                     _Lcd_Write_String:	
  1465                           
  1466                           ;lcd.h: 94: int i;
  1467                           ;lcd.h: 95: for(i=0;a[i]!='\0';i++)
  1468                           
  1469                           ;incstack = 0
  1470                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1471  054C  1283               	bcf	3,5	;RP0=0, select bank0
  1472  054D  1303               	bcf	3,6	;RP1=0, select bank0
  1473  054E  01E2               	clrf	Lcd_Write_String@i
  1474  054F  01E3               	clrf	Lcd_Write_String@i+1
  1475  0550                     l1243:	
  1476  0550  0862               	movf	Lcd_Write_String@i,w
  1477  0551  075D               	addwf	Lcd_Write_String@a,w
  1478  0552  00E0               	movwf	??_Lcd_Write_String+1
  1479  0553  085E               	movf	Lcd_Write_String@a+1,w
  1480  0554  00DF               	movwf	??_Lcd_Write_String
  1481  0555  1803               	skipnc
  1482  0556  0ADF               	incf	??_Lcd_Write_String,f
  1483  0557  1BE2               	btfsc	Lcd_Write_String@i,7
  1484  0558  03DF               	decf	??_Lcd_Write_String,f
  1485  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1486  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1487  055B  085F               	movf	??_Lcd_Write_String,w
  1488  055C  00E1               	movwf	??_Lcd_Write_String+2
  1489  055D  0861               	movf	??_Lcd_Write_String+2,w
  1490  055E  00FF               	movwf	127
  1491  055F  0860               	movf	??_Lcd_Write_String+1,w
  1492  0560  0084               	movwf	4
  1493  0561  120A  118A  2400  120A  118A  	fcall	stringtab
  1494  0566  3A00               	xorlw	0
  1495  0567  1903               	btfsc	3,2
  1496  0568  0008               	return
  1497                           
  1498                           ;lcd.h: 96: Lcd_Write_Char(a[i]);
  1499  0569  0862               	movf	Lcd_Write_String@i,w
  1500  056A  075D               	addwf	Lcd_Write_String@a,w
  1501  056B  00E0               	movwf	??_Lcd_Write_String+1
  1502  056C  085E               	movf	Lcd_Write_String@a+1,w
  1503  056D  00DF               	movwf	??_Lcd_Write_String
  1504  056E  1803               	skipnc
  1505  056F  0ADF               	incf	??_Lcd_Write_String,f
  1506  0570  1BE2               	btfsc	Lcd_Write_String@i,7
  1507  0571  03DF               	decf	??_Lcd_Write_String,f
  1508  0572  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0573  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0574  085F               	movf	??_Lcd_Write_String,w
  1511  0575  00E1               	movwf	??_Lcd_Write_String+2
  1512  0576  0861               	movf	??_Lcd_Write_String+2,w
  1513  0577  00FF               	movwf	127
  1514  0578  0860               	movf	??_Lcd_Write_String+1,w
  1515  0579  0084               	movwf	4
  1516  057A  120A  118A  2400  120A  118A  	fcall	stringtab
  1517  057F  120A  118A  258D  120A  118A  	fcall	_Lcd_Write_Char
  1518  0584  3001               	movlw	1
  1519  0585  1283               	bcf	3,5	;RP0=0, select bank0
  1520  0586  1303               	bcf	3,6	;RP1=0, select bank0
  1521  0587  07E2               	addwf	Lcd_Write_String@i,f
  1522  0588  1803               	skipnc
  1523  0589  0AE3               	incf	Lcd_Write_String@i+1,f
  1524  058A  3000               	movlw	0
  1525  058B  07E3               	addwf	Lcd_Write_String@i+1,f
  1526  058C  2D50               	goto	l1243
  1527  058D                     __end_of_Lcd_Write_String:	
  1528                           
  1529                           	psect	text6
  1530  058D                     __ptext6:	
  1531 ;; *************** function _Lcd_Write_Char *****************
  1532 ;; Defined at:
  1533 ;;		line 76 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  a               1    wreg     unsigned char 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  a               1    4[BANK0 ] unsigned char 
  1538 ;;  y               1    3[BANK0 ] unsigned char 
  1539 ;;  temp            1    2[BANK0 ] unsigned char 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0, pclath, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1549 ;;      Params:         0       0       0       0       0
  1550 ;;      Locals:         0       3       0       0       0
  1551 ;;      Temps:          0       1       0       0       0
  1552 ;;      Totals:         0       4       0       0       0
  1553 ;;Total ram usage:        4 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    4
  1556 ;; This function calls:
  1557 ;;		_Lcd_Port
  1558 ;; This function is called by:
  1559 ;;		_Lcd_Write_String
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           
  1564                           ;psect for function _Lcd_Write_Char
  1565  058D                     _Lcd_Write_Char:	
  1566                           
  1567                           ;incstack = 0
  1568                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1569                           ;Lcd_Write_Char@a stored from wreg
  1570  058D  1283               	bcf	3,5	;RP0=0, select bank0
  1571  058E  1303               	bcf	3,6	;RP1=0, select bank0
  1572  058F  00DC               	movwf	Lcd_Write_Char@a
  1573                           
  1574                           ;lcd.h: 78: char temp,y;
  1575                           ;lcd.h: 79: temp = a&0x0F;
  1576  0590  085C               	movf	Lcd_Write_Char@a,w
  1577  0591  390F               	andlw	15
  1578  0592  00D9               	movwf	??_Lcd_Write_Char
  1579  0593  0859               	movf	??_Lcd_Write_Char,w
  1580  0594  00DA               	movwf	Lcd_Write_Char@temp
  1581                           
  1582                           ;lcd.h: 80: y = a&0xF0;
  1583  0595  085C               	movf	Lcd_Write_Char@a,w
  1584  0596  39F0               	andlw	240
  1585  0597  00D9               	movwf	??_Lcd_Write_Char
  1586  0598  0859               	movf	??_Lcd_Write_Char,w
  1587  0599  00DB               	movwf	Lcd_Write_Char@y
  1588                           
  1589                           ;lcd.h: 81: RD7 = 1;
  1590  059A  1788               	bsf	8,7	;volatile
  1591                           
  1592                           ;lcd.h: 82: Lcd_Port(y>>4);
  1593  059B  085B               	movf	Lcd_Write_Char@y,w
  1594  059C  00D9               	movwf	??_Lcd_Write_Char
  1595  059D  3004               	movlw	4
  1596  059E                     u605:	
  1597  059E  1003               	clrc
  1598  059F  0CD9               	rrf	??_Lcd_Write_Char,f
  1599  05A0  3EFF               	addlw	-1
  1600  05A1  1D03               	skipz
  1601  05A2  2D9E               	goto	u605
  1602  05A3  0859               	movf	??_Lcd_Write_Char,w
  1603  05A4  120A  118A  266F  120A  118A  	fcall	_Lcd_Port
  1604                           
  1605                           ;lcd.h: 83: RD6 = 1;
  1606  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  1607  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  1608  05AB  1708               	bsf	8,6	;volatile
  1609                           
  1610                           ;lcd.h: 84: _delay((unsigned long)((40)*(20000000/4000000.0)));
  1611  05AC  3041               	movlw	65
  1612  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1613  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1614  05AF  00D9               	movwf	??_Lcd_Write_Char
  1615  05B0                     u1167:	
  1616  05B0  0BD9               	decfsz	??_Lcd_Write_Char,f
  1617  05B1  2DB0               	goto	u1167
  1618  05B2  2DB3               	nop2
  1619                           
  1620                           ;lcd.h: 85: RD6 = 0;
  1621  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1622  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1623  05B5  1308               	bcf	8,6	;volatile
  1624                           
  1625                           ;lcd.h: 86: Lcd_Port(temp);
  1626  05B6  085A               	movf	Lcd_Write_Char@temp,w
  1627  05B7  120A  118A  266F  120A  118A  	fcall	_Lcd_Port
  1628                           
  1629                           ;lcd.h: 87: RD6 = 1;
  1630  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1631  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1632  05BE  1708               	bsf	8,6	;volatile
  1633                           
  1634                           ;lcd.h: 88: _delay((unsigned long)((40)*(20000000/4000000.0)));
  1635  05BF  3041               	movlw	65
  1636  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1637  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1638  05C2  00D9               	movwf	??_Lcd_Write_Char
  1639  05C3                     u1177:	
  1640  05C3  0BD9               	decfsz	??_Lcd_Write_Char,f
  1641  05C4  2DC3               	goto	u1177
  1642  05C5  2DC6               	nop2
  1643                           
  1644                           ;lcd.h: 89: RD6 = 0;
  1645  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  1646  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  1647  05C8  1308               	bcf	8,6	;volatile
  1648  05C9  0008               	return
  1649  05CA                     __end_of_Lcd_Write_Char:	
  1650                           
  1651                           	psect	text7
  1652  04FA                     __ptext7:	
  1653 ;; *************** function _Lcd_Set_Cursor *****************
  1654 ;; Defined at:
  1655 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  a               1    wreg     unsigned char 
  1658 ;;  b               1    4[BANK0 ] unsigned char 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  a               1    7[BANK0 ] unsigned char 
  1661 ;;  temp            1   10[BANK0 ] unsigned char 
  1662 ;;  y               1    9[BANK0 ] unsigned char 
  1663 ;;  z               1    8[BANK0 ] unsigned char 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg, status,2, status,0, pclath, cstack
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1673 ;;      Params:         0       1       0       0       0
  1674 ;;      Locals:         0       4       0       0       0
  1675 ;;      Temps:          0       2       0       0       0
  1676 ;;      Totals:         0       7       0       0       0
  1677 ;;Total ram usage:        7 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    5
  1680 ;; This function calls:
  1681 ;;		_Lcd_Cmd
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           
  1688                           ;psect for function _Lcd_Set_Cursor
  1689  04FA                     _Lcd_Set_Cursor:	
  1690                           
  1691                           ;incstack = 0
  1692                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1693                           ;Lcd_Set_Cursor@a stored from wreg
  1694  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1695  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1696  04FC  00DF               	movwf	Lcd_Set_Cursor@a
  1697                           
  1698                           ;lcd.h: 39: char temp,z,y;
  1699                           ;lcd.h: 40: if(a == 1)
  1700  04FD  035F               	decf	Lcd_Set_Cursor@a,w
  1701  04FE  1D03               	btfss	3,2
  1702  04FF  2D23               	goto	l1217
  1703                           
  1704                           ;lcd.h: 41: {
  1705                           ;lcd.h: 42: temp = 0x80 + b - 1;
  1706  0500  085C               	movf	Lcd_Set_Cursor@b,w
  1707  0501  3E7F               	addlw	127
  1708  0502  00DD               	movwf	??_Lcd_Set_Cursor
  1709  0503  085D               	movf	??_Lcd_Set_Cursor,w
  1710  0504  00E2               	movwf	Lcd_Set_Cursor@temp
  1711                           
  1712                           ;lcd.h: 43: z = temp>>4;
  1713  0505  0862               	movf	Lcd_Set_Cursor@temp,w
  1714  0506  00DD               	movwf	??_Lcd_Set_Cursor
  1715  0507  3004               	movlw	4
  1716  0508                     u655:	
  1717  0508  1003               	clrc
  1718  0509  0CDD               	rrf	??_Lcd_Set_Cursor,f
  1719  050A  3EFF               	addlw	-1
  1720  050B  1D03               	skipz
  1721  050C  2D08               	goto	u655
  1722  050D  085D               	movf	??_Lcd_Set_Cursor,w
  1723  050E  00DE               	movwf	??_Lcd_Set_Cursor+1
  1724  050F  085E               	movf	??_Lcd_Set_Cursor+1,w
  1725  0510  00E0               	movwf	Lcd_Set_Cursor@z
  1726                           
  1727                           ;lcd.h: 44: y = temp & 0x0F;
  1728  0511  0862               	movf	Lcd_Set_Cursor@temp,w
  1729  0512  390F               	andlw	15
  1730  0513  00DD               	movwf	??_Lcd_Set_Cursor
  1731  0514  085D               	movf	??_Lcd_Set_Cursor,w
  1732  0515  00E1               	movwf	Lcd_Set_Cursor@y
  1733                           
  1734                           ;lcd.h: 45: Lcd_Cmd(z);
  1735  0516  0860               	movf	Lcd_Set_Cursor@z,w
  1736  0517  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1737                           
  1738                           ;lcd.h: 46: Lcd_Cmd(y);
  1739  051C  1283               	bcf	3,5	;RP0=0, select bank0
  1740  051D  1303               	bcf	3,6	;RP1=0, select bank0
  1741  051E  0861               	movf	Lcd_Set_Cursor@y,w
  1742  051F  120A  118A  2620   	fcall	_Lcd_Cmd
  1743                           
  1744                           ;lcd.h: 47: }
  1745  0522  0008               	return
  1746  0523                     l1217:	
  1747                           
  1748                           ;lcd.h: 48: else if(a == 2)
  1749  0523  3002               	movlw	2
  1750  0524  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0525  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0526  065F               	xorwf	Lcd_Set_Cursor@a,w
  1753  0527  1D03               	btfss	3,2
  1754  0528  0008               	return
  1755                           
  1756                           ;lcd.h: 49: {
  1757                           ;lcd.h: 50: temp = 0xC0 + b - 1;
  1758  0529  085C               	movf	Lcd_Set_Cursor@b,w
  1759  052A  3EBF               	addlw	191
  1760  052B  00DD               	movwf	??_Lcd_Set_Cursor
  1761  052C  085D               	movf	??_Lcd_Set_Cursor,w
  1762  052D  00E2               	movwf	Lcd_Set_Cursor@temp
  1763                           
  1764                           ;lcd.h: 51: z = temp>>4;
  1765  052E  0862               	movf	Lcd_Set_Cursor@temp,w
  1766  052F  00DD               	movwf	??_Lcd_Set_Cursor
  1767  0530  3004               	movlw	4
  1768  0531                     u675:	
  1769  0531  1003               	clrc
  1770  0532  0CDD               	rrf	??_Lcd_Set_Cursor,f
  1771  0533  3EFF               	addlw	-1
  1772  0534  1D03               	skipz
  1773  0535  2D31               	goto	u675
  1774  0536  085D               	movf	??_Lcd_Set_Cursor,w
  1775  0537  00DE               	movwf	??_Lcd_Set_Cursor+1
  1776  0538  085E               	movf	??_Lcd_Set_Cursor+1,w
  1777  0539  00E0               	movwf	Lcd_Set_Cursor@z
  1778                           
  1779                           ;lcd.h: 52: y = temp & 0x0F;
  1780  053A  0862               	movf	Lcd_Set_Cursor@temp,w
  1781  053B  390F               	andlw	15
  1782  053C  00DD               	movwf	??_Lcd_Set_Cursor
  1783  053D  085D               	movf	??_Lcd_Set_Cursor,w
  1784  053E  00E1               	movwf	Lcd_Set_Cursor@y
  1785                           
  1786                           ;lcd.h: 53: Lcd_Cmd(z);
  1787  053F  0860               	movf	Lcd_Set_Cursor@z,w
  1788  0540  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1789                           
  1790                           ;lcd.h: 54: Lcd_Cmd(y);
  1791  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0547  0861               	movf	Lcd_Set_Cursor@y,w
  1794  0548  120A  118A  2620   	fcall	_Lcd_Cmd
  1795  054B  0008               	return
  1796  054C                     __end_of_Lcd_Set_Cursor:	
  1797                           
  1798                           	psect	text8
  1799  0499                     __ptext8:	
  1800 ;; *************** function _Lcd_Init *****************
  1801 ;; Defined at:
  1802 ;;		line 58 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, pclath, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1816 ;;      Params:         0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0
  1818 ;;      Temps:          0       2       0       0       0
  1819 ;;      Totals:         0       2       0       0       0
  1820 ;;Total ram usage:        2 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    5
  1823 ;; This function calls:
  1824 ;;		_Lcd_Cmd
  1825 ;;		_Lcd_Port
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function _Lcd_Init
  1833  0499                     _Lcd_Init:	
  1834                           
  1835                           ;lcd.h: 60: Lcd_Port(0x00);
  1836                           
  1837                           ;incstack = 0
  1838                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1839  0499  3000               	movlw	0
  1840  049A  120A  118A  266F  120A  118A  	fcall	_Lcd_Port
  1841                           
  1842                           ;lcd.h: 61: _delay((unsigned long)((20)*(20000000/4000.0)));
  1843  049F  3082               	movlw	130
  1844  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1845  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1846  04A2  00DD               	movwf	??_Lcd_Init+1
  1847  04A3  30DD               	movlw	221
  1848  04A4  00DC               	movwf	??_Lcd_Init
  1849  04A5                     u1187:	
  1850  04A5  0BDC               	decfsz	??_Lcd_Init,f
  1851  04A6  2CA5               	goto	u1187
  1852  04A7  0BDD               	decfsz	??_Lcd_Init+1,f
  1853  04A8  2CA5               	goto	u1187
  1854                           
  1855                           ;lcd.h: 62: Lcd_Cmd(0x03);
  1856  04A9  3003               	movlw	3
  1857  04AA  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1858                           
  1859                           ;lcd.h: 63: _delay((unsigned long)((5)*(20000000/4000.0)));
  1860  04AF  3021               	movlw	33
  1861  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  1862  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  1863  04B2  00DD               	movwf	??_Lcd_Init+1
  1864  04B3  3075               	movlw	117
  1865  04B4  00DC               	movwf	??_Lcd_Init
  1866  04B5                     u1197:	
  1867  04B5  0BDC               	decfsz	??_Lcd_Init,f
  1868  04B6  2CB5               	goto	u1197
  1869  04B7  0BDD               	decfsz	??_Lcd_Init+1,f
  1870  04B8  2CB5               	goto	u1197
  1871  04B9  2CBA               	nop2
  1872                           
  1873                           ;lcd.h: 64: Lcd_Cmd(0x03);
  1874  04BA  3003               	movlw	3
  1875  04BB  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1876                           
  1877                           ;lcd.h: 65: _delay((unsigned long)((11)*(20000000/4000.0)));
  1878  04C0  3048               	movlw	72
  1879  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  1880  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  1881  04C3  00DD               	movwf	??_Lcd_Init+1
  1882  04C4  306B               	movlw	107
  1883  04C5  00DC               	movwf	??_Lcd_Init
  1884  04C6                     u1207:	
  1885  04C6  0BDC               	decfsz	??_Lcd_Init,f
  1886  04C7  2CC6               	goto	u1207
  1887  04C8  0BDD               	decfsz	??_Lcd_Init+1,f
  1888  04C9  2CC6               	goto	u1207
  1889  04CA  2CCB               	nop2
  1890                           
  1891                           ;lcd.h: 66: Lcd_Cmd(0x03);
  1892  04CB  3003               	movlw	3
  1893  04CC  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1894                           
  1895                           ;lcd.h: 67: Lcd_Cmd(0x02);
  1896  04D1  3002               	movlw	2
  1897  04D2  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1898                           
  1899                           ;lcd.h: 68: Lcd_Cmd(0x02);
  1900  04D7  3002               	movlw	2
  1901  04D8  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1902                           
  1903                           ;lcd.h: 69: Lcd_Cmd(0x08);
  1904  04DD  3008               	movlw	8
  1905  04DE  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1906                           
  1907                           ;lcd.h: 70: Lcd_Cmd(0x00);
  1908  04E3  3000               	movlw	0
  1909  04E4  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1910                           
  1911                           ;lcd.h: 71: Lcd_Cmd(0x0C);
  1912  04E9  300C               	movlw	12
  1913  04EA  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1914                           
  1915                           ;lcd.h: 72: Lcd_Cmd(0x00);
  1916  04EF  3000               	movlw	0
  1917  04F0  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1918                           
  1919                           ;lcd.h: 73: Lcd_Cmd(0x06);
  1920  04F5  3006               	movlw	6
  1921  04F6  120A  118A  2620   	fcall	_Lcd_Cmd
  1922  04F9  0008               	return
  1923  04FA                     __end_of_Lcd_Init:	
  1924                           
  1925                           	psect	text9
  1926  0696                     __ptext9:	
  1927 ;; *************** function _Lcd_Clear *****************
  1928 ;; Defined at:
  1929 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  2  112[None  ] int 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, pclath, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1943 ;;      Params:         0       0       0       0       0
  1944 ;;      Locals:         0       0       0       0       0
  1945 ;;      Temps:          0       0       0       0       0
  1946 ;;      Totals:         0       0       0       0       0
  1947 ;;Total ram usage:        0 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    5
  1950 ;; This function calls:
  1951 ;;		_Lcd_Cmd
  1952 ;; This function is called by:
  1953 ;;		_main
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           
  1958                           ;psect for function _Lcd_Clear
  1959  0696                     _Lcd_Clear:	
  1960                           
  1961                           ;lcd.h: 33: Lcd_Cmd(0);
  1962                           
  1963                           ;incstack = 0
  1964                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1965  0696  3000               	movlw	0
  1966  0697  120A  118A  2620  120A  118A  	fcall	_Lcd_Cmd
  1967                           
  1968                           ;lcd.h: 34: Lcd_Cmd(1);
  1969  069C  3001               	movlw	1
  1970  069D  120A  118A  2620   	fcall	_Lcd_Cmd
  1971  06A0  0008               	return
  1972  06A1                     __end_of_Lcd_Clear:	
  1973                           
  1974                           	psect	text10
  1975  0620                     __ptext10:	
  1976 ;; *************** function _Lcd_Cmd *****************
  1977 ;; Defined at:
  1978 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  a               1    wreg     unsigned char 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  a               1    3[BANK0 ] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, pclath, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         0       0       0       0       0
  1993 ;;      Locals:         0       1       0       0       0
  1994 ;;      Temps:          0       2       0       0       0
  1995 ;;      Totals:         0       3       0       0       0
  1996 ;;Total ram usage:        3 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    4
  1999 ;; This function calls:
  2000 ;;		_Lcd_Port
  2001 ;; This function is called by:
  2002 ;;		_Lcd_Clear
  2003 ;;		_Lcd_Set_Cursor
  2004 ;;		_Lcd_Init
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           
  2009                           ;psect for function _Lcd_Cmd
  2010  0620                     _Lcd_Cmd:	
  2011                           
  2012                           ;incstack = 0
  2013                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2014                           ;Lcd_Cmd@a stored from wreg
  2015  0620  1283               	bcf	3,5	;RP0=0, select bank0
  2016  0621  1303               	bcf	3,6	;RP1=0, select bank0
  2017  0622  00DB               	movwf	Lcd_Cmd@a
  2018                           
  2019                           ;lcd.h: 24: RD7 = 0;
  2020  0623  1388               	bcf	8,7	;volatile
  2021                           
  2022                           ;lcd.h: 25: Lcd_Port(a);
  2023  0624  085B               	movf	Lcd_Cmd@a,w
  2024  0625  120A  118A  266F  120A  118A  	fcall	_Lcd_Port
  2025                           
  2026                           ;lcd.h: 26: RD6 = 1;
  2027  062A  1283               	bcf	3,5	;RP0=0, select bank0
  2028  062B  1303               	bcf	3,6	;RP1=0, select bank0
  2029  062C  1708               	bsf	8,6	;volatile
  2030                           
  2031                           ;lcd.h: 27: _delay((unsigned long)((4)*(20000000/4000.0)));
  2032  062D  301A               	movlw	26
  2033  062E  1283               	bcf	3,5	;RP0=0, select bank0
  2034  062F  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0630  00DA               	movwf	??_Lcd_Cmd+1
  2036  0631  30F7               	movlw	247
  2037  0632  00D9               	movwf	??_Lcd_Cmd
  2038  0633                     u1217:	
  2039  0633  0BD9               	decfsz	??_Lcd_Cmd,f
  2040  0634  2E33               	goto	u1217
  2041  0635  0BDA               	decfsz	??_Lcd_Cmd+1,f
  2042  0636  2E33               	goto	u1217
  2043  0637  2E38               	nop2
  2044                           
  2045                           ;lcd.h: 28: RD6 = 0;
  2046  0638  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0639  1303               	bcf	3,6	;RP1=0, select bank0
  2048  063A  1308               	bcf	8,6	;volatile
  2049  063B  0008               	return
  2050  063C                     __end_of_Lcd_Cmd:	
  2051                           
  2052                           	psect	text11
  2053  066F                     __ptext11:	
  2054 ;; *************** function _Lcd_Port *****************
  2055 ;; Defined at:
  2056 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  a               1    wreg     unsigned char 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  a               1    0[BANK0 ] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2070 ;;      Params:         0       0       0       0       0
  2071 ;;      Locals:         0       1       0       0       0
  2072 ;;      Temps:          0       0       0       0       0
  2073 ;;      Totals:         0       1       0       0       0
  2074 ;;Total ram usage:        1 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    3
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_Lcd_Cmd
  2081 ;;		_Lcd_Init
  2082 ;;		_Lcd_Write_Char
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           
  2087                           ;psect for function _Lcd_Port
  2088  066F                     _Lcd_Port:	
  2089                           
  2090                           ;incstack = 0
  2091                           ; Regs used in _Lcd_Port: [wreg]
  2092                           ;Lcd_Port@a stored from wreg
  2093  066F  1283               	bcf	3,5	;RP0=0, select bank0
  2094  0670  1303               	bcf	3,6	;RP1=0, select bank0
  2095  0671  00D8               	movwf	Lcd_Port@a
  2096                           
  2097                           ;lcd.h: 2: if(a & 1)
  2098  0672  1C58               	btfss	Lcd_Port@a,0
  2099  0673  2E76               	goto	l99
  2100                           
  2101                           ;lcd.h: 3: RD5 = 1;
  2102  0674  1688               	bsf	8,5	;volatile
  2103  0675  2E77               	goto	l100
  2104  0676                     l99:	
  2105                           
  2106                           ;lcd.h: 4: else
  2107                           ;lcd.h: 5: RD5 = 0;
  2108  0676  1288               	bcf	8,5	;volatile
  2109  0677                     l100:	
  2110                           
  2111                           ;lcd.h: 7: if(a & 2)
  2112  0677  1CD8               	btfss	Lcd_Port@a,1
  2113  0678  2E7B               	goto	l101
  2114                           
  2115                           ;lcd.h: 8: RD4 = 1;
  2116  0679  1608               	bsf	8,4	;volatile
  2117  067A  2E7C               	goto	l102
  2118  067B                     l101:	
  2119                           
  2120                           ;lcd.h: 9: else
  2121                           ;lcd.h: 10: RD4 = 0;
  2122  067B  1208               	bcf	8,4	;volatile
  2123  067C                     l102:	
  2124                           
  2125                           ;lcd.h: 12: if(a & 4)
  2126  067C  1D58               	btfss	Lcd_Port@a,2
  2127  067D  2E80               	goto	l103
  2128                           
  2129                           ;lcd.h: 13: RD3 = 1;
  2130  067E  1588               	bsf	8,3	;volatile
  2131  067F  2E81               	goto	l104
  2132  0680                     l103:	
  2133                           
  2134                           ;lcd.h: 14: else
  2135                           ;lcd.h: 15: RD3 = 0;
  2136  0680  1188               	bcf	8,3	;volatile
  2137  0681                     l104:	
  2138                           
  2139                           ;lcd.h: 17: if(a & 8)
  2140  0681  1DD8               	btfss	Lcd_Port@a,3
  2141  0682  2E85               	goto	l105
  2142                           
  2143                           ;lcd.h: 18: RD2 = 1;
  2144  0683  1508               	bsf	8,2	;volatile
  2145  0684  0008               	return
  2146  0685                     l105:	
  2147                           
  2148                           ;lcd.h: 19: else
  2149                           ;lcd.h: 20: RD2 = 0;
  2150  0685  1108               	bcf	8,2	;volatile
  2151  0686  0008               	return
  2152  0687                     __end_of_Lcd_Port:	
  2153                           
  2154                           	psect	text12
  2155  0029                     __ptext12:	
  2156 ;; *************** function _ISR *****************
  2157 ;; Defined at:
  2158 ;;		line 174 in file "BORDER.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  1    wreg      void 
  2165 ;; Registers used:
  2166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2172 ;;      Params:         0       0       0       0       0
  2173 ;;      Locals:         0       0       0       0       0
  2174 ;;      Temps:          7       0       0       0       0
  2175 ;;      Totals:         7       0       0       0       0
  2176 ;;Total ram usage:        7 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    2
  2179 ;; This function calls:
  2180 ;;		_uart_rx
  2181 ;;		_uart_txc
  2182 ;;		_uart_txs
  2183 ;; This function is called by:
  2184 ;;		Interrupt level 1
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function _ISR
  2190  0029                     _ISR:	
  2191                           
  2192                           ;BORDER.c: 175: if(TMR1IF)
  2193  0029  1C0C               	btfss	12,0	;volatile
  2194  002A  293E               	goto	i1l1483
  2195                           
  2196                           ;BORDER.c: 176: {
  2197                           ;BORDER.c: 177: TMR1IF = 0;
  2198  002B  100C               	bcf	12,0	;volatile
  2199                           
  2200                           ;BORDER.c: 178: count++;
  2201  002C  3001               	movlw	1
  2202  002D  07CC               	addwf	_count,f
  2203  002E  1803               	skipnc
  2204  002F  0ACD               	incf	_count+1,f
  2205  0030  3000               	movlw	0
  2206  0031  07CD               	addwf	_count+1,f
  2207                           
  2208                           ;BORDER.c: 179: if(count == 95)
  2209  0032  305F               	movlw	95
  2210  0033  064C               	xorwf	_count,w
  2211  0034  044D               	iorwf	_count+1,w
  2212  0035  1D03               	btfss	3,2
  2213  0036  293E               	goto	i1l1483
  2214                           
  2215                           ;BORDER.c: 180: {
  2216                           ;BORDER.c: 181: if(CNT == 1){
  2217  0037  034A               	decf	_CNT,w
  2218  0038  044B               	iorwf	_CNT+1,w
  2219  0039  1D03               	btfss	3,2
  2220  003A  287C               	goto	i1l1447
  2221                           
  2222                           ;BORDER.c: 182: uart_txc('*');
  2223  003B  302A               	movlw	42
  2224  003C  120A  118A  263C  120A  118A  	fcall	_uart_txc
  2225                           
  2226                           ;BORDER.c: 183: _delay((unsigned long)((100)*(20000000/4000.0)));
  2227  0041  3003               	movlw	3
  2228  0042  00F7               	movwf	??_ISR+2
  2229  0043  308A               	movlw	138
  2230  0044  00F6               	movwf	??_ISR+1
  2231  0045  3055               	movlw	85
  2232  0046  00F5               	movwf	??_ISR
  2233  0047                     u122_27:	
  2234  0047  0BF5               	decfsz	??_ISR,f
  2235  0048  2847               	goto	u122_27
  2236  0049  0BF6               	decfsz	??_ISR+1,f
  2237  004A  2847               	goto	u122_27
  2238  004B  0BF7               	decfsz	??_ISR+2,f
  2239  004C  2847               	goto	u122_27
  2240  004D  284E               	nop2
  2241                           
  2242                           ;BORDER.c: 184: uart_txs("CROSSED BORDER");
  2243  004E  3067               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2244  004F  00F3               	movwf	uart_txs@st
  2245  0050  3080               	movlw	128
  2246  0051  00F4               	movwf	uart_txs@st+1
  2247  0052  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2248                           
  2249                           ;BORDER.c: 185: _delay((unsigned long)((100)*(20000000/4000.0)));
  2250  0057  3003               	movlw	3
  2251  0058  00F7               	movwf	??_ISR+2
  2252  0059  308A               	movlw	138
  2253  005A  00F6               	movwf	??_ISR+1
  2254  005B  3055               	movlw	85
  2255  005C  00F5               	movwf	??_ISR
  2256  005D                     u123_27:	
  2257  005D  0BF5               	decfsz	??_ISR,f
  2258  005E  285D               	goto	u123_27
  2259  005F  0BF6               	decfsz	??_ISR+1,f
  2260  0060  285D               	goto	u123_27
  2261  0061  0BF7               	decfsz	??_ISR+2,f
  2262  0062  285D               	goto	u123_27
  2263  0063  2864               	nop2
  2264                           
  2265                           ;BORDER.c: 186: uart_txc('#');
  2266  0064  3023               	movlw	35
  2267  0065  120A  118A  263C  120A  118A  	fcall	_uart_txc
  2268                           
  2269                           ;BORDER.c: 187: _delay((unsigned long)((100)*(20000000/4000.0)));
  2270  006A  3003               	movlw	3
  2271  006B  00F7               	movwf	??_ISR+2
  2272  006C  308A               	movlw	138
  2273  006D  00F6               	movwf	??_ISR+1
  2274  006E  3055               	movlw	85
  2275  006F  00F5               	movwf	??_ISR
  2276  0070                     u124_27:	
  2277  0070  0BF5               	decfsz	??_ISR,f
  2278  0071  2870               	goto	u124_27
  2279  0072  0BF6               	decfsz	??_ISR+1,f
  2280  0073  2870               	goto	u124_27
  2281  0074  0BF7               	decfsz	??_ISR+2,f
  2282  0075  2870               	goto	u124_27
  2283  0076  2877               	nop2
  2284                           
  2285                           ;BORDER.c: 188: CNT = 0;
  2286  0077  1283               	bcf	3,5	;RP0=0, select bank0
  2287  0078  1303               	bcf	3,6	;RP1=0, select bank0
  2288  0079  01CA               	clrf	_CNT
  2289  007A  01CB               	clrf	_CNT+1
  2290                           
  2291                           ;BORDER.c: 189: }
  2292  007B  293E               	goto	i1l1483
  2293  007C                     i1l1447:	
  2294                           
  2295                           ;BORDER.c: 190: else{
  2296                           ;BORDER.c: 191: uart_txc('*');
  2297  007C  302A               	movlw	42
  2298  007D  120A  118A  263C  120A  118A  	fcall	_uart_txc
  2299                           
  2300                           ;BORDER.c: 192: _delay((unsigned long)((100)*(20000000/4000.0)));
  2301  0082  3003               	movlw	3
  2302  0083  00F7               	movwf	??_ISR+2
  2303  0084  308A               	movlw	138
  2304  0085  00F6               	movwf	??_ISR+1
  2305  0086  3055               	movlw	85
  2306  0087  00F5               	movwf	??_ISR
  2307  0088                     u125_27:	
  2308  0088  0BF5               	decfsz	??_ISR,f
  2309  0089  2888               	goto	u125_27
  2310  008A  0BF6               	decfsz	??_ISR+1,f
  2311  008B  2888               	goto	u125_27
  2312  008C  0BF7               	decfsz	??_ISR+2,f
  2313  008D  2888               	goto	u125_27
  2314  008E  288F               	nop2
  2315                           
  2316                           ;BORDER.c: 193: uart_txs("lat:");
  2317  008F  3085               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2318  0090  00F3               	movwf	uart_txs@st
  2319  0091  3080               	movlw	128
  2320  0092  00F4               	movwf	uart_txs@st+1
  2321  0093  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2322                           
  2323                           ;BORDER.c: 194: _delay((unsigned long)((100)*(20000000/4000.0)));
  2324  0098  3003               	movlw	3
  2325  0099  00F7               	movwf	??_ISR+2
  2326  009A  308A               	movlw	138
  2327  009B  00F6               	movwf	??_ISR+1
  2328  009C  3055               	movlw	85
  2329  009D  00F5               	movwf	??_ISR
  2330  009E                     u126_27:	
  2331  009E  0BF5               	decfsz	??_ISR,f
  2332  009F  289E               	goto	u126_27
  2333  00A0  0BF6               	decfsz	??_ISR+1,f
  2334  00A1  289E               	goto	u126_27
  2335  00A2  0BF7               	decfsz	??_ISR+2,f
  2336  00A3  289E               	goto	u126_27
  2337  00A4  28A5               	nop2
  2338                           
  2339                           ;BORDER.c: 195: uart_txs(lat);
  2340  00A5  30B4               	movlw	(low (_lat| 0))& (0+255)
  2341  00A6  00F3               	movwf	uart_txs@st
  2342  00A7  3000               	movlw	0
  2343  00A8  00F4               	movwf	uart_txs@st+1
  2344  00A9  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2345                           
  2346                           ;BORDER.c: 196: _delay((unsigned long)((100)*(20000000/4000.0)));
  2347  00AE  3003               	movlw	3
  2348  00AF  00F7               	movwf	??_ISR+2
  2349  00B0  308A               	movlw	138
  2350  00B1  00F6               	movwf	??_ISR+1
  2351  00B2  3055               	movlw	85
  2352  00B3  00F5               	movwf	??_ISR
  2353  00B4                     u127_27:	
  2354  00B4  0BF5               	decfsz	??_ISR,f
  2355  00B5  28B4               	goto	u127_27
  2356  00B6  0BF6               	decfsz	??_ISR+1,f
  2357  00B7  28B4               	goto	u127_27
  2358  00B8  0BF7               	decfsz	??_ISR+2,f
  2359  00B9  28B4               	goto	u127_27
  2360  00BA  28BB               	nop2
  2361                           
  2362                           ;BORDER.c: 197: uart_txs(lat_dir);
  2363  00BB  3053               	movlw	(low (_lat_dir| 0))& (0+255)
  2364  00BC  00F3               	movwf	uart_txs@st
  2365  00BD  3000               	movlw	0
  2366  00BE  00F4               	movwf	uart_txs@st+1
  2367  00BF  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2368                           
  2369                           ;BORDER.c: 198: _delay((unsigned long)((100)*(20000000/4000.0)));
  2370  00C4  3003               	movlw	3
  2371  00C5  00F7               	movwf	??_ISR+2
  2372  00C6  308A               	movlw	138
  2373  00C7  00F6               	movwf	??_ISR+1
  2374  00C8  3055               	movlw	85
  2375  00C9  00F5               	movwf	??_ISR
  2376  00CA                     u128_27:	
  2377  00CA  0BF5               	decfsz	??_ISR,f
  2378  00CB  28CA               	goto	u128_27
  2379  00CC  0BF6               	decfsz	??_ISR+1,f
  2380  00CD  28CA               	goto	u128_27
  2381  00CE  0BF7               	decfsz	??_ISR+2,f
  2382  00CF  28CA               	goto	u128_27
  2383  00D0  28D1               	nop2
  2384                           
  2385                           ;BORDER.c: 199: uart_txc('_');
  2386  00D1  305F               	movlw	95
  2387  00D2  120A  118A  263C  120A  118A  	fcall	_uart_txc
  2388                           
  2389                           ;BORDER.c: 200: _delay((unsigned long)((100)*(20000000/4000.0)));
  2390  00D7  3003               	movlw	3
  2391  00D8  00F7               	movwf	??_ISR+2
  2392  00D9  308A               	movlw	138
  2393  00DA  00F6               	movwf	??_ISR+1
  2394  00DB  3055               	movlw	85
  2395  00DC  00F5               	movwf	??_ISR
  2396  00DD                     u129_27:	
  2397  00DD  0BF5               	decfsz	??_ISR,f
  2398  00DE  28DD               	goto	u129_27
  2399  00DF  0BF6               	decfsz	??_ISR+1,f
  2400  00E0  28DD               	goto	u129_27
  2401  00E1  0BF7               	decfsz	??_ISR+2,f
  2402  00E2  28DD               	goto	u129_27
  2403  00E3  28E4               	nop2
  2404                           
  2405                           ;BORDER.c: 201: uart_txs("lon:");
  2406  00E4  3080               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2407  00E5  00F3               	movwf	uart_txs@st
  2408  00E6  3080               	movlw	128
  2409  00E7  00F4               	movwf	uart_txs@st+1
  2410  00E8  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2411                           
  2412                           ;BORDER.c: 202: _delay((unsigned long)((100)*(20000000/4000.0)));
  2413  00ED  3003               	movlw	3
  2414  00EE  00F7               	movwf	??_ISR+2
  2415  00EF  308A               	movlw	138
  2416  00F0  00F6               	movwf	??_ISR+1
  2417  00F1  3055               	movlw	85
  2418  00F2  00F5               	movwf	??_ISR
  2419  00F3                     u130_27:	
  2420  00F3  0BF5               	decfsz	??_ISR,f
  2421  00F4  28F3               	goto	u130_27
  2422  00F5  0BF6               	decfsz	??_ISR+1,f
  2423  00F6  28F3               	goto	u130_27
  2424  00F7  0BF7               	decfsz	??_ISR+2,f
  2425  00F8  28F3               	goto	u130_27
  2426  00F9  28FA               	nop2
  2427                           
  2428                           ;BORDER.c: 203: uart_txs(lon);
  2429  00FA  30A0               	movlw	(low (_lon| 0))& (0+255)
  2430  00FB  00F3               	movwf	uart_txs@st
  2431  00FC  3000               	movlw	0
  2432  00FD  00F4               	movwf	uart_txs@st+1
  2433  00FE  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2434                           
  2435                           ;BORDER.c: 204: _delay((unsigned long)((100)*(20000000/4000.0)));
  2436  0103  3003               	movlw	3
  2437  0104  00F7               	movwf	??_ISR+2
  2438  0105  308A               	movlw	138
  2439  0106  00F6               	movwf	??_ISR+1
  2440  0107  3055               	movlw	85
  2441  0108  00F5               	movwf	??_ISR
  2442  0109                     u131_27:	
  2443  0109  0BF5               	decfsz	??_ISR,f
  2444  010A  2909               	goto	u131_27
  2445  010B  0BF6               	decfsz	??_ISR+1,f
  2446  010C  2909               	goto	u131_27
  2447  010D  0BF7               	decfsz	??_ISR+2,f
  2448  010E  2909               	goto	u131_27
  2449  010F  2910               	nop2
  2450                           
  2451                           ;BORDER.c: 205: uart_txs(lon_dir);
  2452  0110  304E               	movlw	(low (_lon_dir| 0))& (0+255)
  2453  0111  00F3               	movwf	uart_txs@st
  2454  0112  3000               	movlw	0
  2455  0113  00F4               	movwf	uart_txs@st+1
  2456  0114  120A  118A  25FD  120A  118A  	fcall	_uart_txs
  2457                           
  2458                           ;BORDER.c: 206: _delay((unsigned long)((100)*(20000000/4000.0)));
  2459  0119  3003               	movlw	3
  2460  011A  00F7               	movwf	??_ISR+2
  2461  011B  308A               	movlw	138
  2462  011C  00F6               	movwf	??_ISR+1
  2463  011D  3055               	movlw	85
  2464  011E  00F5               	movwf	??_ISR
  2465  011F                     u132_27:	
  2466  011F  0BF5               	decfsz	??_ISR,f
  2467  0120  291F               	goto	u132_27
  2468  0121  0BF6               	decfsz	??_ISR+1,f
  2469  0122  291F               	goto	u132_27
  2470  0123  0BF7               	decfsz	??_ISR+2,f
  2471  0124  291F               	goto	u132_27
  2472  0125  2926               	nop2
  2473                           
  2474                           ;BORDER.c: 207: uart_txc('#');
  2475  0126  3023               	movlw	35
  2476  0127  120A  118A  263C  120A  118A  	fcall	_uart_txc
  2477                           
  2478                           ;BORDER.c: 208: _delay((unsigned long)((100)*(20000000/4000.0)));
  2479  012C  3003               	movlw	3
  2480  012D  00F7               	movwf	??_ISR+2
  2481  012E  308A               	movlw	138
  2482  012F  00F6               	movwf	??_ISR+1
  2483  0130  3055               	movlw	85
  2484  0131  00F5               	movwf	??_ISR
  2485  0132                     u133_27:	
  2486  0132  0BF5               	decfsz	??_ISR,f
  2487  0133  2932               	goto	u133_27
  2488  0134  0BF6               	decfsz	??_ISR+1,f
  2489  0135  2932               	goto	u133_27
  2490  0136  0BF7               	decfsz	??_ISR+2,f
  2491  0137  2932               	goto	u133_27
  2492  0138  2939               	nop2
  2493                           
  2494                           ;BORDER.c: 209: count = 0;
  2495  0139  1283               	bcf	3,5	;RP0=0, select bank0
  2496  013A  1303               	bcf	3,6	;RP1=0, select bank0
  2497  013B  01CC               	clrf	_count
  2498  013C  01CD               	clrf	_count+1
  2499                           
  2500                           ;BORDER.c: 210: TMR0 = 0;
  2501  013D  0181               	clrf	1	;volatile
  2502  013E                     i1l1483:	
  2503                           
  2504                           ;BORDER.c: 211: }
  2505                           ;BORDER.c: 212: }
  2506                           ;BORDER.c: 213: }
  2507                           ;BORDER.c: 214: if(RCIF){
  2508  013E  1E8C               	btfss	12,5	;volatile
  2509  013F  2A40               	goto	i1l247
  2510                           
  2511                           ;BORDER.c: 215: RCIF = 0;
  2512  0140  128C               	bcf	12,5	;volatile
  2513                           
  2514                           ;BORDER.c: 216: Gpsdata = uart_rx();
  2515  0141  120A  118A  26A1  120A  118A  	fcall	_uart_rx
  2516  0146  00F5               	movwf	??_ISR
  2517  0147  0875               	movf	??_ISR,w
  2518  0148  00FC               	movwf	_Gpsdata
  2519                           
  2520                           ;BORDER.c: 217: flg = 1;
  2521  0149  3001               	movlw	1
  2522  014A  1283               	bcf	3,5	;RP0=0, select bank0
  2523  014B  1303               	bcf	3,6	;RP1=0, select bank0
  2524  014C  00BA               	movwf	_flg
  2525  014D  3000               	movlw	0
  2526  014E  00BB               	movwf	_flg+1
  2527                           
  2528                           ;BORDER.c: 218: if(finish == 0){
  2529  014F  0842               	movf	_finish,w
  2530  0150  0443               	iorwf	_finish+1,w
  2531  0151  1D03               	btfss	3,2
  2532  0152  2A40               	goto	i1l247
  2533                           
  2534                           ;BORDER.c: 219: if( Gpsdata=='$' && pos_cnt == 0)
  2535  0153  3024               	movlw	36
  2536  0154  067C               	xorwf	_Gpsdata,w
  2537  0155  1D03               	btfss	3,2
  2538  0156  295F               	goto	i1l1499
  2539  0157  0840               	movf	_pos_cnt,w
  2540  0158  0441               	iorwf	_pos_cnt+1,w
  2541  0159  1D03               	btfss	3,2
  2542  015A  295F               	goto	i1l1499
  2543                           
  2544                           ;BORDER.c: 220: pos_cnt=1;
  2545  015B  3001               	movlw	1
  2546  015C  00C0               	movwf	_pos_cnt
  2547  015D  3000               	movlw	0
  2548  015E  00C1               	movwf	_pos_cnt+1
  2549  015F                     i1l1499:	
  2550                           
  2551                           ;BORDER.c: 221: if( Gpsdata=='G' && pos_cnt == 1)
  2552  015F  3047               	movlw	71
  2553  0160  067C               	xorwf	_Gpsdata,w
  2554  0161  1D03               	btfss	3,2
  2555  0162  296B               	goto	i1l1505
  2556  0163  0340               	decf	_pos_cnt,w
  2557  0164  0441               	iorwf	_pos_cnt+1,w
  2558  0165  1D03               	btfss	3,2
  2559  0166  296B               	goto	i1l1505
  2560                           
  2561                           ;BORDER.c: 222: pos_cnt=2;
  2562  0167  3002               	movlw	2
  2563  0168  00C0               	movwf	_pos_cnt
  2564  0169  3000               	movlw	0
  2565  016A  00C1               	movwf	_pos_cnt+1
  2566  016B                     i1l1505:	
  2567                           
  2568                           ;BORDER.c: 223: if( Gpsdata=='P' && pos_cnt == 2)
  2569  016B  3050               	movlw	80
  2570  016C  067C               	xorwf	_Gpsdata,w
  2571  016D  1D03               	btfss	3,2
  2572  016E  2978               	goto	i1l1511
  2573  016F  3002               	movlw	2
  2574  0170  0640               	xorwf	_pos_cnt,w
  2575  0171  0441               	iorwf	_pos_cnt+1,w
  2576  0172  1D03               	btfss	3,2
  2577  0173  2978               	goto	i1l1511
  2578                           
  2579                           ;BORDER.c: 224: pos_cnt=3;
  2580  0174  3003               	movlw	3
  2581  0175  00C0               	movwf	_pos_cnt
  2582  0176  3000               	movlw	0
  2583  0177  00C1               	movwf	_pos_cnt+1
  2584  0178                     i1l1511:	
  2585                           
  2586                           ;BORDER.c: 225: if( Gpsdata=='R' && pos_cnt == 3)
  2587  0178  3052               	movlw	82
  2588  0179  067C               	xorwf	_Gpsdata,w
  2589  017A  1D03               	btfss	3,2
  2590  017B  2985               	goto	i1l1517
  2591  017C  3003               	movlw	3
  2592  017D  0640               	xorwf	_pos_cnt,w
  2593  017E  0441               	iorwf	_pos_cnt+1,w
  2594  017F  1D03               	btfss	3,2
  2595  0180  2985               	goto	i1l1517
  2596                           
  2597                           ;BORDER.c: 226: pos_cnt=4;
  2598  0181  3004               	movlw	4
  2599  0182  00C0               	movwf	_pos_cnt
  2600  0183  3000               	movlw	0
  2601  0184  00C1               	movwf	_pos_cnt+1
  2602  0185                     i1l1517:	
  2603                           
  2604                           ;BORDER.c: 227: if( Gpsdata=='M' && pos_cnt == 4)
  2605  0185  304D               	movlw	77
  2606  0186  067C               	xorwf	_Gpsdata,w
  2607  0187  1D03               	btfss	3,2
  2608  0188  2992               	goto	i1l1523
  2609  0189  3004               	movlw	4
  2610  018A  0640               	xorwf	_pos_cnt,w
  2611  018B  0441               	iorwf	_pos_cnt+1,w
  2612  018C  1D03               	btfss	3,2
  2613  018D  2992               	goto	i1l1523
  2614                           
  2615                           ;BORDER.c: 228: pos_cnt=5;
  2616  018E  3005               	movlw	5
  2617  018F  00C0               	movwf	_pos_cnt
  2618  0190  3000               	movlw	0
  2619  0191  00C1               	movwf	_pos_cnt+1
  2620  0192                     i1l1523:	
  2621                           
  2622                           ;BORDER.c: 229: if(Gpsdata=='C' && pos_cnt == 5 )
  2623  0192  3043               	movlw	67
  2624  0193  067C               	xorwf	_Gpsdata,w
  2625  0194  1D03               	btfss	3,2
  2626  0195  299F               	goto	i1l1529
  2627  0196  3005               	movlw	5
  2628  0197  0640               	xorwf	_pos_cnt,w
  2629  0198  0441               	iorwf	_pos_cnt+1,w
  2630  0199  1D03               	btfss	3,2
  2631  019A  299F               	goto	i1l1529
  2632                           
  2633                           ;BORDER.c: 230: pos_cnt=6;
  2634  019B  3006               	movlw	6
  2635  019C  00C0               	movwf	_pos_cnt
  2636  019D  3000               	movlw	0
  2637  019E  00C1               	movwf	_pos_cnt+1
  2638  019F                     i1l1529:	
  2639                           
  2640                           ;BORDER.c: 231: if(pos_cnt==6 && Gpsdata ==','){
  2641  019F  3006               	movlw	6
  2642  01A0  0640               	xorwf	_pos_cnt,w
  2643  01A1  0441               	iorwf	_pos_cnt+1,w
  2644  01A2  1D03               	btfss	3,2
  2645  01A3  29B0               	goto	i1l1537
  2646  01A4  302C               	movlw	44
  2647  01A5  067C               	xorwf	_Gpsdata,w
  2648  01A6  1D03               	btfss	3,2
  2649  01A7  29B0               	goto	i1l1537
  2650                           
  2651                           ;BORDER.c: 232: com_cnt++;
  2652  01A8  3001               	movlw	1
  2653  01A9  07B8               	addwf	_com_cnt,f
  2654  01AA  1803               	skipnc
  2655  01AB  0AB9               	incf	_com_cnt+1,f
  2656  01AC  3000               	movlw	0
  2657  01AD  07B9               	addwf	_com_cnt+1,f
  2658                           
  2659                           ;BORDER.c: 233: flg=0;
  2660  01AE  01BA               	clrf	_flg
  2661  01AF  01BB               	clrf	_flg+1
  2662  01B0                     i1l1537:	
  2663                           
  2664                           ;BORDER.c: 234: }
  2665                           ;BORDER.c: 235: if(com_cnt==3 && flg==1){
  2666  01B0  3003               	movlw	3
  2667  01B1  0638               	xorwf	_com_cnt,w
  2668  01B2  0439               	iorwf	_com_cnt+1,w
  2669  01B3  1D03               	btfss	3,2
  2670  01B4  29C9               	goto	i1l1547
  2671  01B5  033A               	decf	_flg,w
  2672  01B6  043B               	iorwf	_flg+1,w
  2673  01B7  1D03               	btfss	3,2
  2674  01B8  29C9               	goto	i1l1547
  2675                           
  2676                           ;BORDER.c: 236: lat[lat_cnt++] = Gpsdata;
  2677  01B9  087C               	movf	_Gpsdata,w
  2678  01BA  00F5               	movwf	??_ISR
  2679  01BB  083E               	movf	_lat_cnt,w
  2680  01BC  3EB4               	addlw	(low (_lat| 0))& (0+255)
  2681  01BD  0084               	movwf	4
  2682  01BE  0875               	movf	??_ISR,w
  2683  01BF  1383               	bcf	3,7	;select IRP bank1
  2684  01C0  0080               	movwf	0
  2685  01C1  3001               	movlw	1
  2686  01C2  07BE               	addwf	_lat_cnt,f
  2687  01C3  1803               	skipnc
  2688  01C4  0ABF               	incf	_lat_cnt+1,f
  2689  01C5  3000               	movlw	0
  2690  01C6  07BF               	addwf	_lat_cnt+1,f
  2691                           
  2692                           ;BORDER.c: 237: flg=0;
  2693  01C7  01BA               	clrf	_flg
  2694  01C8  01BB               	clrf	_flg+1
  2695  01C9                     i1l1547:	
  2696                           
  2697                           ;BORDER.c: 238: }
  2698                           ;BORDER.c: 239: if(com_cnt==4 && flg==1){
  2699  01C9  3004               	movlw	4
  2700  01CA  0638               	xorwf	_com_cnt,w
  2701  01CB  0439               	iorwf	_com_cnt+1,w
  2702  01CC  1D03               	btfss	3,2
  2703  01CD  29E0               	goto	i1l1555
  2704  01CE  033A               	decf	_flg,w
  2705  01CF  043B               	iorwf	_flg+1,w
  2706  01D0  1D03               	btfss	3,2
  2707  01D1  29E0               	goto	i1l1555
  2708                           
  2709                           ;BORDER.c: 240: lat_dir[lat_dir_cnt++] = Gpsdata;
  2710  01D2  087C               	movf	_Gpsdata,w
  2711  01D3  00F5               	movwf	??_ISR
  2712  01D4  0836               	movf	_lat_dir_cnt,w
  2713  01D5  3E53               	addlw	(low (_lat_dir| 0))& (0+255)
  2714  01D6  0084               	movwf	4
  2715  01D7  0875               	movf	??_ISR,w
  2716  01D8  1383               	bcf	3,7	;select IRP bank0
  2717  01D9  0080               	movwf	0
  2718  01DA  3001               	movlw	1
  2719  01DB  07B6               	addwf	_lat_dir_cnt,f
  2720  01DC  1803               	skipnc
  2721  01DD  0AB7               	incf	_lat_dir_cnt+1,f
  2722  01DE  3000               	movlw	0
  2723  01DF  07B7               	addwf	_lat_dir_cnt+1,f
  2724  01E0                     i1l1555:	
  2725                           
  2726                           ;BORDER.c: 241: }
  2727                           ;BORDER.c: 242: if(com_cnt==5 && flg==1){
  2728  01E0  3005               	movlw	5
  2729  01E1  0638               	xorwf	_com_cnt,w
  2730  01E2  0439               	iorwf	_com_cnt+1,w
  2731  01E3  1D03               	btfss	3,2
  2732  01E4  29F9               	goto	i1l1565
  2733  01E5  033A               	decf	_flg,w
  2734  01E6  043B               	iorwf	_flg+1,w
  2735  01E7  1D03               	btfss	3,2
  2736  01E8  29F9               	goto	i1l1565
  2737                           
  2738                           ;BORDER.c: 243: lon[log_cnt++] = Gpsdata;
  2739  01E9  087C               	movf	_Gpsdata,w
  2740  01EA  00F5               	movwf	??_ISR
  2741  01EB  083C               	movf	_log_cnt,w
  2742  01EC  3EA0               	addlw	(low (_lon| 0))& (0+255)
  2743  01ED  0084               	movwf	4
  2744  01EE  0875               	movf	??_ISR,w
  2745  01EF  1383               	bcf	3,7	;select IRP bank1
  2746  01F0  0080               	movwf	0
  2747  01F1  3001               	movlw	1
  2748  01F2  07BC               	addwf	_log_cnt,f
  2749  01F3  1803               	skipnc
  2750  01F4  0ABD               	incf	_log_cnt+1,f
  2751  01F5  3000               	movlw	0
  2752  01F6  07BD               	addwf	_log_cnt+1,f
  2753                           
  2754                           ;BORDER.c: 244: flg=0;
  2755  01F7  01BA               	clrf	_flg
  2756  01F8  01BB               	clrf	_flg+1
  2757  01F9                     i1l1565:	
  2758                           
  2759                           ;BORDER.c: 245: }
  2760                           ;BORDER.c: 246: if(com_cnt==6 && flg==1){
  2761  01F9  3006               	movlw	6
  2762  01FA  0638               	xorwf	_com_cnt,w
  2763  01FB  0439               	iorwf	_com_cnt+1,w
  2764  01FC  1D03               	btfss	3,2
  2765  01FD  2A10               	goto	i1l1573
  2766  01FE  033A               	decf	_flg,w
  2767  01FF  043B               	iorwf	_flg+1,w
  2768  0200  1D03               	btfss	3,2
  2769  0201  2A10               	goto	i1l1573
  2770                           
  2771                           ;BORDER.c: 247: lon_dir[lon_dir_cnt++] = Gpsdata;
  2772  0202  087C               	movf	_Gpsdata,w
  2773  0203  00F5               	movwf	??_ISR
  2774  0204  0834               	movf	_lon_dir_cnt,w
  2775  0205  3E4E               	addlw	(low (_lon_dir| 0))& (0+255)
  2776  0206  0084               	movwf	4
  2777  0207  0875               	movf	??_ISR,w
  2778  0208  1383               	bcf	3,7	;select IRP bank0
  2779  0209  0080               	movwf	0
  2780  020A  3001               	movlw	1
  2781  020B  07B4               	addwf	_lon_dir_cnt,f
  2782  020C  1803               	skipnc
  2783  020D  0AB5               	incf	_lon_dir_cnt+1,f
  2784  020E  3000               	movlw	0
  2785  020F  07B5               	addwf	_lon_dir_cnt+1,f
  2786  0210                     i1l1573:	
  2787                           
  2788                           ;BORDER.c: 248: }
  2789                           ;BORDER.c: 249: if( Gpsdata == '*' && com_cnt >= 5 && flg == 1){
  2790  0210  302A               	movlw	42
  2791  0211  067C               	xorwf	_Gpsdata,w
  2792  0212  1D03               	btfss	3,2
  2793  0213  2A40               	goto	i1l247
  2794  0214  3000               	movlw	0
  2795  0215  0239               	subwf	_com_cnt+1,w
  2796  0216  3005               	movlw	5
  2797  0217  1903               	skipnz
  2798  0218  0238               	subwf	_com_cnt,w
  2799  0219  1C03               	skipc
  2800  021A  2A40               	goto	i1l247
  2801  021B  033A               	decf	_flg,w
  2802  021C  043B               	iorwf	_flg+1,w
  2803  021D  1D03               	btfss	3,2
  2804  021E  2A40               	goto	i1l247
  2805                           
  2806                           ;BORDER.c: 250: lat[lat_cnt] ='\0';
  2807  021F  083E               	movf	_lat_cnt,w
  2808  0220  3EB4               	addlw	(low (_lat| 0))& (0+255)
  2809  0221  0084               	movwf	4
  2810  0222  1383               	bcf	3,7	;select IRP bank1
  2811  0223  0180               	clrf	0
  2812                           
  2813                           ;BORDER.c: 251: lon[log_cnt] = '\0';
  2814  0224  083C               	movf	_log_cnt,w
  2815  0225  3EA0               	addlw	(low (_lon| 0))& (0+255)
  2816  0226  0084               	movwf	4
  2817  0227  0180               	clrf	0
  2818                           
  2819                           ;BORDER.c: 252: lat_dir[lat_dir_cnt]='\0';
  2820  0228  0836               	movf	_lat_dir_cnt,w
  2821  0229  3E53               	addlw	(low (_lat_dir| 0))& (0+255)
  2822  022A  0084               	movwf	4
  2823  022B  0180               	clrf	0
  2824                           
  2825                           ;BORDER.c: 253: lon_dir[lon_dir_cnt]='\0';
  2826  022C  0834               	movf	_lon_dir_cnt,w
  2827  022D  3E4E               	addlw	(low (_lon_dir| 0))& (0+255)
  2828  022E  0084               	movwf	4
  2829  022F  0180               	clrf	0
  2830                           
  2831                           ;BORDER.c: 254: lat_dir_cnt=0;
  2832  0230  01B6               	clrf	_lat_dir_cnt
  2833  0231  01B7               	clrf	_lat_dir_cnt+1
  2834                           
  2835                           ;BORDER.c: 255: lon_dir_cnt=0;
  2836  0232  01B4               	clrf	_lon_dir_cnt
  2837  0233  01B5               	clrf	_lon_dir_cnt+1
  2838                           
  2839                           ;BORDER.c: 256: lat_cnt = 0;
  2840  0234  01BE               	clrf	_lat_cnt
  2841  0235  01BF               	clrf	_lat_cnt+1
  2842                           
  2843                           ;BORDER.c: 257: log_cnt = 0;
  2844  0236  01BC               	clrf	_log_cnt
  2845  0237  01BD               	clrf	_log_cnt+1
  2846                           
  2847                           ;BORDER.c: 258: flg = 0;
  2848  0238  01BA               	clrf	_flg
  2849  0239  01BB               	clrf	_flg+1
  2850                           
  2851                           ;BORDER.c: 259: finish = 1;
  2852  023A  3001               	movlw	1
  2853  023B  00C2               	movwf	_finish
  2854  023C  3000               	movlw	0
  2855  023D  00C3               	movwf	_finish+1
  2856                           
  2857                           ;BORDER.c: 260: com_cnt = 0;
  2858  023E  01B8               	clrf	_com_cnt
  2859  023F  01B9               	clrf	_com_cnt+1
  2860  0240                     i1l247:	
  2861  0240  087B               	movf	??_ISR+6,w
  2862  0241  00FF               	movwf	127
  2863  0242  087A               	movf	??_ISR+5,w
  2864  0243  008A               	movwf	10
  2865  0244  0879               	movf	??_ISR+4,w
  2866  0245  0084               	movwf	4
  2867  0246  0E78               	swapf	(??_ISR+3)^(0+-128),w
  2868  0247  0083               	movwf	3
  2869  0248  0EFE               	swapf	126,f
  2870  0249  0E7E               	swapf	126,w
  2871  024A  0009               	retfie
  2872  024B                     __end_of_ISR:	
  2873                           
  2874                           	psect	intentry
  2875  0004                     __pintentry:	
  2876                           ;incstack = 0
  2877                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2878                           
  2879  0004                     interrupt_function:	
  2880  007E                     saved_w	set	btemp
  2881  0004  00FE               	movwf	btemp
  2882  0005  0E03               	swapf	3,w
  2883  0006  00F8               	movwf	??_ISR+3
  2884  0007  0804               	movf	4,w
  2885  0008  00F9               	movwf	??_ISR+4
  2886  0009  080A               	movf	10,w
  2887  000A  00FA               	movwf	??_ISR+5
  2888  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2889  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2890  000D  087F               	movf	btemp+1,w
  2891  000E  00FB               	movwf	??_ISR+6
  2892  000F  120A  118A  2829   	ljmp	_ISR
  2893                           
  2894                           	psect	text13
  2895  05FD                     __ptext13:	
  2896 ;; *************** function _uart_txs *****************
  2897 ;; Defined at:
  2898 ;;		line 57 in file "BORDER.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  st              2    3[COMMON] PTR unsigned char 
  2901 ;;		 -> STR_11(5), STR_10(5), STR_9(15), lon_dir(5), 
  2902 ;;		 -> lon(20), lat_dir(5), lat(20), 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;		None
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2914 ;;      Params:         2       0       0       0       0
  2915 ;;      Locals:         0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0
  2917 ;;      Totals:         2       0       0       0       0
  2918 ;;Total ram usage:        2 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    1
  2921 ;; This function calls:
  2922 ;;		_uart_txc
  2923 ;; This function is called by:
  2924 ;;		_ISR
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           
  2929                           ;psect for function _uart_txs
  2930  05FD                     _uart_txs:	
  2931  05FD                     i1l1269:	
  2932                           ;BORDER.c: 58: while(*st)
  2933                           
  2934                           ;incstack = 0
  2935                           ; Regs used in _uart_txs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2936                           
  2937  05FD  0874               	movf	uart_txs@st+1,w
  2938  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  2939  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  2940  0600  00FF               	movwf	127
  2941  0601  0873               	movf	uart_txs@st,w
  2942  0602  0084               	movwf	4
  2943  0603  120A  118A  2400  120A  118A  	fcall	stringtab
  2944  0608  3A00               	xorlw	0
  2945  0609  1903               	btfsc	3,2
  2946  060A  0008               	return
  2947                           
  2948                           ;BORDER.c: 59: uart_txc(*st++);
  2949  060B  0874               	movf	uart_txs@st+1,w
  2950  060C  1283               	bcf	3,5	;RP0=0, select bank0
  2951  060D  1303               	bcf	3,6	;RP1=0, select bank0
  2952  060E  00FF               	movwf	127
  2953  060F  0873               	movf	uart_txs@st,w
  2954  0610  0084               	movwf	4
  2955  0611  120A  118A  2400  120A  118A  	fcall	stringtab
  2956  0616  120A  118A  263C  120A  118A  	fcall	_uart_txc
  2957  061B  3001               	movlw	1
  2958  061C  07F3               	addwf	uart_txs@st,f
  2959  061D  1803               	skipnc
  2960  061E  0AF4               	incf	uart_txs@st+1,f
  2961  061F  2DFD               	goto	i1l1269
  2962  0620                     __end_of_uart_txs:	
  2963                           
  2964                           	psect	text14
  2965  063C                     __ptext14:	
  2966 ;; *************** function _uart_txc *****************
  2967 ;; Defined at:
  2968 ;;		line 50 in file "BORDER.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  ch              1    wreg     unsigned char 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  ch              1    0[COMMON] unsigned char 
  2973 ;;  i               2    1[COMMON] int 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, btemp+1
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2983 ;;      Params:         0       0       0       0       0
  2984 ;;      Locals:         3       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0
  2986 ;;      Totals:         3       0       0       0       0
  2987 ;;Total ram usage:        3 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_uart_txs
  2993 ;;		_ISR
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           
  2998                           ;psect for function _uart_txc
  2999  063C                     _uart_txc:	
  3000                           
  3001                           ;incstack = 0
  3002                           ; Regs used in _uart_txc: [wreg+status,2+btemp+1]
  3003                           ;uart_txc@ch stored from wreg
  3004  063C  00F0               	movwf	uart_txc@ch
  3005  063D                     i1l177:	
  3006                           ;BORDER.c: 53: continue;
  3007                           
  3008                           ;BORDER.c: 51: int i;
  3009                           ;BORDER.c: 52: while(!TXIF)
  3010                           
  3011  063D  1283               	bcf	3,5	;RP0=0, select bank0
  3012  063E  1303               	bcf	3,6	;RP1=0, select bank0
  3013  063F  1E0C               	btfss	12,4	;volatile
  3014  0640  2E3D               	goto	i1l177
  3015                           
  3016                           ;BORDER.c: 54: TXREG=ch;
  3017  0641  0870               	movf	uart_txc@ch,w
  3018  0642  0099               	movwf	25	;volatile
  3019                           
  3020                           ;BORDER.c: 55: for(i=0;i<500;i++);
  3021  0643  01F1               	clrf	uart_txc@i
  3022  0644  01F2               	clrf	uart_txc@i+1
  3023  0645                     L2:	
  3024  0645  0872               	movf	uart_txc@i+1,w
  3025  0646  3A80               	xorlw	128
  3026  0647  00FF               	movwf	127
  3027  0648  3081               	movlw	129
  3028  0649  027F               	subwf	127,w
  3029  064A  1D03               	skipz
  3030  064B  2E4E               	goto	u62_25
  3031  064C  30F4               	movlw	244
  3032  064D  0271               	subwf	uart_txc@i,w
  3033  064E                     u62_25:	
  3034  064E  1803               	btfsc	3,0
  3035  064F  0008               	return
  3036  0650  3001               	movlw	1
  3037  0651  07F1               	addwf	uart_txc@i,f
  3038  0652  1803               	skipnc
  3039  0653  0AF2               	incf	uart_txc@i+1,f
  3040  0654  3000               	movlw	0
  3041  0655  07F2               	addwf	uart_txc@i+1,f
  3042  0656  2E45               	goto	L2
  3043  0657                     __end_of_uart_txc:	
  3044                           
  3045                           	psect	text15
  3046  06A1                     __ptext15:	
  3047 ;; *************** function _uart_rx *****************
  3048 ;; Defined at:
  3049 ;;		line 61 in file "BORDER.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      unsigned char 
  3056 ;; Registers used:
  3057 ;;		wreg
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3063 ;;      Params:         0       0       0       0       0
  3064 ;;      Locals:         0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0
  3066 ;;      Totals:         0       0       0       0       0
  3067 ;;Total ram usage:        0 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_ISR
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _uart_rx
  3078  06A1                     _uart_rx:	
  3079                           
  3080                           ;BORDER.c: 62: if(OERR)
  3081                           
  3082                           ;incstack = 0
  3083                           ; Regs used in _uart_rx: [wreg]
  3084  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  3085  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  3086  06A3  1C98               	btfss	24,1	;volatile
  3087  06A4  2EA7               	goto	i1l192
  3088                           
  3089                           ;BORDER.c: 63: {
  3090                           ;BORDER.c: 64: CREN = 0;
  3091  06A5  1218               	bcf	24,4	;volatile
  3092                           
  3093                           ;BORDER.c: 65: CREN = 1;
  3094  06A6  1618               	bsf	24,4	;volatile
  3095  06A7                     i1l192:	
  3096                           ;BORDER.c: 66: }
  3097                           ;BORDER.c: 67: while(!RCIF);
  3098                           
  3099  06A7  1E8C               	btfss	12,5	;volatile
  3100  06A8  2EA7               	goto	i1l192
  3101                           
  3102                           ;BORDER.c: 68: return RCREG;
  3103  06A9  081A               	movf	26,w	;volatile
  3104  06AA  0008               	return
  3105  06AB                     __end_of_uart_rx:	
  3106  007E                     btemp	set	126	;btemp
  3107  007E                     wtemp0	set	126


Data Sizes:
    Strings     137
    Constant    0
    Data        0
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     15      71
    BANK1            80      0      40
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    uart_txs@st	PTR unsigned char  size(2) Largest target is 20
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[15]), lon_dir(BANK0[5]), 
		 -> lon(BANK1[20]), lat_dir(BANK0[5]), lat(BANK1[20]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> lon_dir(BANK0[5]), lon(BANK1[20]), STR_8(CODE[5]), lat_dir(BANK0[5]), 
		 -> lat(BANK1[20]), STR_7(CODE[5]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_uart_txs
    _uart_txs->_uart_txc

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2166
                                             12 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _adc_init
                           _adc_read
                        _timer1_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      44
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     904
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     910
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  7     7      0     552
                                              5 COMMON     7     7      0
                            _uart_rx
                           _uart_txc
                           _uart_txs
 ---------------------------------------------------------------------------------
 (5) _uart_txs                                             2     0      2     484
                                              3 COMMON     2     0      2
                           _uart_txc
 ---------------------------------------------------------------------------------
 (6) _uart_txc                                             3     3      0      68
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _uart_rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _adc_init
   _adc_read
   _timer1_init
   _uart_init

 _ISR (ROOT)
   _uart_rx
   _uart_txc
   _uart_txs
     _uart_txc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      7C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      28       7       50.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      7C      12        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Apr 29 15:28:52 2018

                        _g 0020                          _t 002A                          _x 0048  
                        _y 0046                          _z 0044                          pc 0002  
              __CFG_CP$OFF 0000                         l99 0676                         fsr 0004  
                      l100 0677                        l101 067B                        l102 067C  
                      l103 0680                        l104 0681                        l105 0685  
                      l203 05F2                        l214 02EB                        l219 037D  
                      _RB0 0030                        _CNT 004A                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RD2 0042  
                      _RD3 0043                        _RB7 0037                        _RD4 0044  
                      _RD5 0045                        _RD6 0046                        _RD7 0047  
             __CFG_CPD$OFF 0000                        _ISR 0029                        u605 059E  
                      u655 0508                        u675 0531                        u755 05DB  
                      _flg 003A                        _lat 00B4                        _lon 00A0  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
             __CFG_LVP$OFF 0000                       ?_ISR 0070                       l1217 0523  
                     l1243 0550                       l1351 02BB                       l1287 05D4  
                     l1367 02EC                       STR_1 0454                       STR_2 0443  
                     STR_3 0432                       STR_4 0465                       STR_5 0421  
                     STR_6 0410                       STR_7 048A                       STR_8 0485  
                     STR_9 0476                       _BRGH 04C2                       _CREN 00C4  
                     u1117 02B0                       u1207 04C6                       u1127 02FA  
                     u1217 0633                       u1137 033B                       u1147 0373  
                     u1157 05EB                       u1167 05B0                       u1177 05C3  
                     u1187 04A5                       u1197 04B5                       _RCIE 0465  
                     _RCIF 0065                       _OERR 00C1                       _TMR0 0001  
                     _SPEN 00C7                       _TXEN 04C5                       _TXIF 0064  
                     _SYNC 04C4               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 005D  
                     _main 024B                       btemp 007E                       start 0012  
       ??_Lcd_Write_String 005F            __end_of_Lcd_Cmd 063C                      ??_ISR 0075  
                    ?_main 0070                      STR_10 0494                      STR_11 048F  
            __CFG_WDTE$OFF 0000                      i1l247 0240                      i1l192 06A7  
                    i1l177 063D                      _RCREG 001A                      _TMR1H 000F  
                    _TMR1L 000E                      _SPBRG 0099                      u62_25 064E  
  __size_of_Lcd_Set_Cursor 0052                      _TRISA 0085                      _TRISD 0088  
                    _TXREG 0019                      _count 004C             __CFG_BOREN$OFF 0000  
                    pclath 000A            __end_of_uart_rx 06AB                      status 0003  
                    wtemp0 007E           __end_of_Lcd_Init 04FA           __end_of_Lcd_Port 0687  
          __initialization 0015               __end_of_main 03F3                     ??_main 0064  
       __size_of_Lcd_Clear 000B                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           __end_of_adc_init 06B4  
         __end_of_adc_read 05FD                     i1l1511 0178                     i1l1505 016B  
                   i1l1523 0192                     i1l1269 05FD                     i1l1517 0185  
                   i1l1447 007C                     i1l1537 01B0                     i1l1529 019F  
                   i1l1555 01E0                     i1l1547 01C9                     i1l1483 013E  
                   i1l1573 0210                     i1l1565 01F9                     i1l1499 015F  
                   u130_27 00F3                     u122_27 0047                     u131_27 0109  
                   u123_27 005D                     u132_27 011F                     u124_27 0070  
                   u133_27 0132                     u125_27 0088                     u126_27 009E  
                   u127_27 00B4                     u128_27 00CA                     _INTCON 000B  
                   u129_27 00DD                  ??_Lcd_Cmd 0059                     _TMR1IF 0060  
  __size_of_Lcd_Write_Char 003D                     _TRISB0 0430                     _TRISB1 0431  
                   _TRISB2 0432                     _TRISB3 0433                     _TRISB6 0436  
                   _TRISB7 0437                     _TRISC6 043E                     _TRISC7 043F  
           __CFG_PWRTE$OFF 0000               ?_timer1_init 0070                     _finish 0042  
                   saved_w 007E           __end_of_uart_txc 0657           __end_of_uart_txs 0620  
                ??_uart_rx 0070            Lcd_Set_Cursor@a 005F            Lcd_Set_Cursor@b 005C  
          Lcd_Set_Cursor@y 0061            Lcd_Set_Cursor@z 0060    __end_of__initialization 0025  
        __end_of_Lcd_Clear 06A1             __pcstackCOMMON 0070             _Lcd_Set_Cursor 04FA  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pbssBANK0 0020  
               __pbssBANK1 00A0                 __pmaintext 024B                 __pintentry 0004  
__size_of_Lcd_Write_String 0041     __end_of_Lcd_Set_Cursor 054C                  ?_adc_init 0070  
                ?_adc_read 0058         __size_of_uart_init 0018                 ??_Lcd_Init 005C  
               ??_Lcd_Port 0058                 __stringtab 0400             _Lcd_Write_Char 058D  
                  _Lcd_Cmd 0620                    _Gpsdata 007C                  ?_uart_txc 0070  
                ?_uart_txs 0073            ?_Lcd_Set_Cursor 005C                 ??_adc_init 0058  
               ??_adc_read 005A       __size_of_timer1_init 000F                    __ptext1 0657  
                  __ptext2 0687                    __ptext3 05CA                    __ptext4 06AB  
                  __ptext5 054C                    __ptext6 058D                    __ptext7 04FA  
                  __ptext8 0499                    __ptext9 0696                    _com_cnt 0038  
             __size_of_ISR 0222                    _lat_dir 0053                    _lat_cnt 003E  
                _T1CONbits 0010                    _log_cnt 003C                    _lon_dir 004E  
                  _pos_cnt 0040                    _uart_rx 06A1                    clrloop0 06B5  
   __end_of_Lcd_Write_Char 05CA       end_of_initialization 0025          __end_of_uart_init 066F  
               ??_uart_txc 0070                 ??_uart_txs 0075                  Lcd_Port@a 0058  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 005D          Lcd_Write_String@i 0062  
                _Lcd_Clear 0696           _Lcd_Write_String 054C        start_initialization 0015  
              __end_of_ISR 024B          __size_of_Lcd_Init 0061          __size_of_Lcd_Port 0018  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 005C            Lcd_Write_Char@y 005B  
        __size_of_adc_init 0009          __size_of_adc_read 0033                __pbssCOMMON 007C  
          adc_read@channel 005C                  ___latbits 0002              __pcstackBANK0 0058  
                 ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 005D          __size_of_uart_txc 001B  
        __size_of_uart_txs 0023                  __pstrings 0400                   ?_uart_rx 0070  
        interrupt_function 0004                  clear_ram0 06B4                   _PIE1bits 008C  
                 Lcd_Cmd@a 005B                   _PIR1bits 000C                   _GO_nDONE 00FA  
              ??_Lcd_Clear 005C                  _uart_init 0657              ??_timer1_init 0058  
               uart_txc@ch 0070                 uart_txs@st 0073                __stringbase 040F  
         ??_Lcd_Write_Char 0059                   _Lcd_Init 0499                   _Lcd_Port 066F  
              _lat_dir_cnt 0036   __end_of_Lcd_Write_String 058D           __size_of_Lcd_Cmd 001C  
               ?_uart_init 0070         __end_of__stringtab 0410                   _adc_init 06AB  
                 _adc_read 05CA        __end_of_timer1_init 0696                   __ptext10 0620  
                 __ptext11 066F                   __ptext12 0029                   __ptext13 05FD  
                 __ptext14 063C                   __ptext15 06A1           __size_of_uart_rx 000A  
            __size_of_main 01A8                _lon_dir_cnt 0034                   _uart_txc 063C  
                 _uart_txs 05FD                  uart_txc@i 0071         Lcd_Write_Char@temp 005A  
                 intlevel1 0000                  stringcode 040A                ??_uart_init 0058  
              _timer1_init 0687         Lcd_Set_Cursor@temp 0062                 _OPTION_REG 0081  
                 stringdir 040A                   stringtab 0400  
