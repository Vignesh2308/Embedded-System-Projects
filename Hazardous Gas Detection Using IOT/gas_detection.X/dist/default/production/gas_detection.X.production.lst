

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Apr 01 16:39:38 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.42
    41                           ; Generated 13/04/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134                           
   135                           	psect	idataBANK1
   136  0029                     __pidataBANK1:	
   137                           
   138                           ;initializer for uart_response@F1322
   139  0029  34F6               	retlw	low (STR_1| (0+32768))
   140  002A  3488               	retlw	high (STR_1| (0+32768))
   141  002B  340D               	retlw	low (STR_2| (0+32768))
   142  002C  3489               	retlw	high (STR_2| (0+32768))
   143  002D  34FC               	retlw	low (STR_3| (0+32768))
   144  002E  3488               	retlw	high (STR_3| (0+32768))
   145  002F  3412               	retlw	low (STR_4| (0+32768))
   146  0030  3489               	retlw	high (STR_4| (0+32768))
   147  0031  3408               	retlw	low (STR_5| (0+32768))
   148  0032  3489               	retlw	high (STR_5| (0+32768))
   149  0033  3402               	retlw	low (STR_6| (0+32768))
   150  0034  3489               	retlw	high (STR_6| (0+32768))
   151                           
   152                           	psect	stringtext
   153  0800                     __pstringtext:	
   154  0800                     stringtab:	
   155  0800                     __stringtab:	
   156                           
   157                           ;	String table - string pointers are 2 bytes each
   158  0800  1BFF               	btfsc	btemp+1,7
   159  0801  280A               	ljmp	stringcode
   160  0802  1383               	bcf	3,7
   161  0803  187F               	btfsc	btemp+1,0
   162  0804  1783               	bsf	3,7
   163  0805  0800               	movf	0,w
   164  0806  0A84               	incf	4,f
   165  0807  1903               	skipnz
   166  0808  0AFF               	incf	btemp+1,f
   167  0809  0008               	return
   168  080A                     stringcode:	
   169  080A  087F               	movf	btemp+1,w
   170  080B  397F               	andlw	127
   171  080C  008A               	movwf	10
   172  080D  0804               	movf	4,w
   173  080E  0A84               	incf	4,f
   174  080F  1903               	skipnz
   175  0810  0AFF               	incf	btemp+1,f
   176  0811  0082               	movwf	2
   177  0812                     __stringbase:	
   178  0812                     __end_of__stringtab:	
   179  0812                     _dpowers:	
   180  0812  3401               	retlw	1
   181  0813  3400               	retlw	0
   182  0814  340A               	retlw	10
   183  0815  3400               	retlw	0
   184  0816  3464               	retlw	100
   185  0817  3400               	retlw	0
   186  0818  34E8               	retlw	232
   187  0819  3403               	retlw	3
   188  081A  3410               	retlw	16
   189  081B  3427               	retlw	39
   190  081C                     __end_of_dpowers:	
   191  081C                     uart_response@responses:	
   192  081C  3401               	retlw	1
   193  081D  3402               	retlw	2
   194  081E  3403               	retlw	3
   195  081F  3404               	retlw	4
   196  0820  3405               	retlw	5
   197  0821  3406               	retlw	6
   198  0822                     __end_ofuart_response@responses:	
   199  0822                     uart_response@lengths:	
   200  0822  3405               	retlw	5
   201  0823  3404               	retlw	4
   202  0824  3405               	retlw	5
   203  0825  3404               	retlw	4
   204  0826  3404               	retlw	4
   205  0827  3405               	retlw	5
   206  0828                     __end_ofuart_response@lengths:	
   207  001E                     _ADRESH	set	30
   208  001F                     _ADCON0	set	31
   209  001A                     _RCREG	set	26
   210  0019                     _TXREG	set	25
   211  0037                     _RB7	set	55
   212  00FA                     _GO_nDONE	set	250
   213  0065                     _RCIF	set	101
   214  00C1                     _OERR	set	193
   215  0064                     _TXIF	set	100
   216  00C4                     _CREN	set	196
   217  00C7                     _SPEN	set	199
   218  0046                     _RD6	set	70
   219  0047                     _RD7	set	71
   220  0042                     _RD2	set	66
   221  0043                     _RD3	set	67
   222  0044                     _RD4	set	68
   223  0045                     _RD5	set	69
   224  0085                     _TRISA	set	133
   225  0088                     _TRISD	set	136
   226  009E                     _ADRESL	set	158
   227  009F                     _ADCON1	set	159
   228  0099                     _SPBRG	set	153
   229  0437                     _TRISB7	set	1079
   230  04C1                     _TRMT	set	1217
   231  04C5                     _TXEN	set	1221
   232  04C4                     _SYNC	set	1220
   233  04C2                     _BRGH	set	1218
   234  043F                     _TRISC7	set	1087
   235  043E                     _TRISC6	set	1086
   236  0828                     STR_19:	
   237  0828  3420               	retlw	32	;' '
   238  0829  3473               	retlw	115	;'s'
   239  082A  3465               	retlw	101	;'e'
   240  082B  346E               	retlw	110	;'n'
   241  082C  3464               	retlw	100	;'d'
   242  082D  3469               	retlw	105	;'i'
   243  082E  346E               	retlw	110	;'n'
   244  082F  3467               	retlw	103	;'g'
   245  0830  3420               	retlw	32	;' '
   246  0831  3467               	retlw	103	;'g'
   247  0832  3461               	retlw	97	;'a'
   248  0833  3473               	retlw	115	;'s'
   249  0834  342E               	retlw	46	;'.'
   250  0835  342E               	retlw	46	;'.'
   251  0836  342E               	retlw	46	;'.'
   252  0837  3420               	retlw	32	;' '
   253  0838  3420               	retlw	32	;' '
   254  0839  3400               	retlw	0
   255  083A                     STR_21:	
   256  083A  3420               	retlw	32	;' '
   257  083B  3420               	retlw	32	;' '
   258  083C  3420               	retlw	32	;' '
   259  083D  3420               	retlw	32	;' '
   260  083E  3420               	retlw	32	;' '
   261  083F  3420               	retlw	32	;' '
   262  0840  3420               	retlw	32	;' '
   263  0841  3420               	retlw	32	;' '
   264  0842  3420               	retlw	32	;' '
   265  0843  3420               	retlw	32	;' '
   266  0844  3420               	retlw	32	;' '
   267  0845  3420               	retlw	32	;' '
   268  0846  3420               	retlw	32	;' '
   269  0847  3420               	retlw	32	;' '
   270  0848  3420               	retlw	32	;' '
   271  0849  3420               	retlw	32	;' '
   272  084A  3400               	retlw	0
   273  084B                     STR_10:	
   274  084B  3420               	retlw	32	;' '
   275  084C  3420               	retlw	32	;' '
   276  084D  3420               	retlw	32	;' '
   277  084E  3449               	retlw	73	;'I'
   278  084F  344F               	retlw	79	;'O'
   279  0850  3454               	retlw	84	;'T'
   280  0851  3420               	retlw	32	;' '
   281  0852  344D               	retlw	77	;'M'
   282  0853  344F               	retlw	79	;'O'
   283  0854  3444               	retlw	68	;'D'
   284  0855  3445               	retlw	69	;'E'
   285  0856  344D               	retlw	77	;'M'
   286  0857  3420               	retlw	32	;' '
   287  0858  3420               	retlw	32	;' '
   288  0859  3420               	retlw	32	;' '
   289  085A  3420               	retlw	32	;' '
   290  085B  3400               	retlw	0
   291  085C                     STR_20:	
   292  085C  3420               	retlw	32	;' '
   293  085D  3420               	retlw	32	;' '
   294  085E  3420               	retlw	32	;' '
   295  085F  3420               	retlw	32	;' '
   296  0860  3455               	retlw	85	;'U'
   297  0861  3470               	retlw	112	;'p'
   298  0862  346C               	retlw	108	;'l'
   299  0863  346F               	retlw	111	;'o'
   300  0864  3461               	retlw	97	;'a'
   301  0865  3464               	retlw	100	;'d'
   302  0866  3465               	retlw	101	;'e'
   303  0867  3464               	retlw	100	;'d'
   304  0868  3420               	retlw	32	;' '
   305  0869  3420               	retlw	32	;' '
   306  086A  3420               	retlw	32	;' '
   307  086B  3420               	retlw	32	;' '
   308  086C  3400               	retlw	0
   309  086D                     STR_17:	
   310  086D  3420               	retlw	32	;' '
   311  086E  3420               	retlw	32	;' '
   312  086F  3455               	retlw	85	;'U'
   313  0870  3470               	retlw	112	;'p'
   314  0871  346C               	retlw	108	;'l'
   315  0872  346F               	retlw	111	;'o'
   316  0873  3461               	retlw	97	;'a'
   317  0874  3464               	retlw	100	;'d'
   318  0875  3469               	retlw	105	;'i'
   319  0876  346E               	retlw	110	;'n'
   320  0877  3467               	retlw	103	;'g'
   321  0878  342E               	retlw	46	;'.'
   322  0879  342E               	retlw	46	;'.'
   323  087A  342E               	retlw	46	;'.'
   324  087B  3420               	retlw	32	;' '
   325  087C  3420               	retlw	32	;' '
   326  087D  3400               	retlw	0
   327  087E                     STR_14:	
   328  087E  3420               	retlw	32	;' '
   329  087F  3420               	retlw	32	;' '
   330  0880  3448               	retlw	72	;'H'
   331  0881  3469               	retlw	105	;'i'
   332  0882  3467               	retlw	103	;'g'
   333  0883  3468               	retlw	104	;'h'
   334  0884  3420               	retlw	32	;' '
   335  0885  344D               	retlw	77	;'M'
   336  0886  3465               	retlw	101	;'e'
   337  0887  3474               	retlw	116	;'t'
   338  0888  3468               	retlw	104	;'h'
   339  0889  3461               	retlw	97	;'a'
   340  088A  346E               	retlw	110	;'n'
   341  088B  3465               	retlw	101	;'e'
   342  088C  3420               	retlw	32	;' '
   343  088D  3420               	retlw	32	;' '
   344  088E  3400               	retlw	0
   345  088F                     STR_7:	
   346  088F  3420               	retlw	32	;' '
   347  0890  3448               	retlw	72	;'H'
   348  0891  3461               	retlw	97	;'a'
   349  0892  347A               	retlw	122	;'z'
   350  0893  3461               	retlw	97	;'a'
   351  0894  3472               	retlw	114	;'r'
   352  0895  3464               	retlw	100	;'d'
   353  0896  346F               	retlw	111	;'o'
   354  0897  3475               	retlw	117	;'u'
   355  0898  3473               	retlw	115	;'s'
   356  0899  3420               	retlw	32	;' '
   357  089A  3467               	retlw	103	;'g'
   358  089B  3461               	retlw	97	;'a'
   359  089C  3473               	retlw	115	;'s'
   360  089D  3420               	retlw	32	;' '
   361  089E  3420               	retlw	32	;' '
   362  089F  3400               	retlw	0
   363  08A0                     STR_9:	
   364  08A0  3420               	retlw	32	;' '
   365  08A1  3449               	retlw	73	;'I'
   366  08A2  346E               	retlw	110	;'n'
   367  08A3  3469               	retlw	105	;'i'
   368  08A4  3474               	retlw	116	;'t'
   369  08A5  3469               	retlw	105	;'i'
   370  08A6  3461               	retlw	97	;'a'
   371  08A7  346C               	retlw	108	;'l'
   372  08A8  3469               	retlw	105	;'i'
   373  08A9  347A               	retlw	122	;'z'
   374  08AA  3469               	retlw	105	;'i'
   375  08AB  346E               	retlw	110	;'n'
   376  08AC  3467               	retlw	103	;'g'
   377  08AD  342E               	retlw	46	;'.'
   378  08AE  342E               	retlw	46	;'.'
   379  08AF  342E               	retlw	46	;'.'
   380  08B0  3400               	retlw	0
   381  08B1                     STR_18:	
   382  08B1  3420               	retlw	32	;' '
   383  08B2  3473               	retlw	115	;'s'
   384  08B3  3465               	retlw	101	;'e'
   385  08B4  346E               	retlw	110	;'n'
   386  08B5  3464               	retlw	100	;'d'
   387  08B6  3469               	retlw	105	;'i'
   388  08B7  346E               	retlw	110	;'n'
   389  08B8  3467               	retlw	103	;'g'
   390  08B9  3420               	retlw	32	;' '
   391  08BA  3474               	retlw	116	;'t'
   392  08BB  3465               	retlw	101	;'e'
   393  08BC  346D               	retlw	109	;'m'
   394  08BD  3470               	retlw	112	;'p'
   395  08BE  342E               	retlw	46	;'.'
   396  08BF  342E               	retlw	46	;'.'
   397  08C0  342E               	retlw	46	;'.'
   398  08C1  3400               	retlw	0
   399  08C2                     STR_8:	
   400  08C2  3444               	retlw	68	;'D'
   401  08C3  3465               	retlw	101	;'e'
   402  08C4  3474               	retlw	116	;'t'
   403  08C5  3465               	retlw	101	;'e'
   404  08C6  3463               	retlw	99	;'c'
   405  08C7  3474               	retlw	116	;'t'
   406  08C8  3469               	retlw	105	;'i'
   407  08C9  346F               	retlw	111	;'o'
   408  08CA  346E               	retlw	110	;'n'
   409  08CB  3420               	retlw	32	;' '
   410  08CC  3462               	retlw	98	;'b'
   411  08CD  3479               	retlw	121	;'y'
   412  08CE  3420               	retlw	32	;' '
   413  08CF  3449               	retlw	73	;'I'
   414  08D0  344F               	retlw	79	;'O'
   415  08D1  3454               	retlw	84	;'T'
   416  08D2  3400               	retlw	0
   417  08D3                     STR_11:	
   418  08D3  3448               	retlw	72	;'H'
   419  08D4  3449               	retlw	73	;'I'
   420  08D5  3447               	retlw	71	;'G'
   421  08D6  3448               	retlw	72	;'H'
   422  08D7  3420               	retlw	32	;' '
   423  08D8  3454               	retlw	84	;'T'
   424  08D9  3445               	retlw	69	;'E'
   425  08DA  344D               	retlw	77	;'M'
   426  08DB  3450               	retlw	80	;'P'
   427  08DC  3420               	retlw	32	;' '
   428  08DD  3420               	retlw	32	;' '
   429  08DE  3420               	retlw	32	;' '
   430  08DF  3420               	retlw	32	;' '
   431  08E0  3420               	retlw	32	;' '
   432  08E1  3420               	retlw	32	;' '
   433  08E2  3400               	retlw	0
   434  08E3                     STR_15:	
   435  08E3  344D               	retlw	77	;'M'
   436  08E4  3465               	retlw	101	;'e'
   437  08E5  3474               	retlw	116	;'t'
   438  08E6  3468               	retlw	104	;'h'
   439  08E7  3461               	retlw	97	;'a'
   440  08E8  346E               	retlw	110	;'n'
   441  08E9  3465               	retlw	101	;'e'
   442  08EA  3420               	retlw	32	;' '
   443  08EB  343D               	retlw	61	;'='
   444  08EC  3420               	retlw	32	;' '
   445  08ED  3400               	retlw	0
   446  08EE                     STR_12:	
   447  08EE  3454               	retlw	84	;'T'
   448  08EF  3445               	retlw	69	;'E'
   449  08F0  344D               	retlw	77	;'M'
   450  08F1  3450               	retlw	80	;'P'
   451  08F2  3420               	retlw	32	;' '
   452  08F3  343A               	retlw	58	;':'
   453  08F4  3420               	retlw	32	;' '
   454  08F5  3400               	retlw	0
   455  08F6                     STR_1:	
   456  08F6  3474               	retlw	116	;'t'
   457  08F7  3465               	retlw	101	;'e'
   458  08F8  346D               	retlw	109	;'m'
   459  08F9  3470               	retlw	112	;'p'
   460  08FA  343A               	retlw	58	;':'
   461  08FB  3400               	retlw	0
   462  08FC                     STR_3:	
   463  08FC  3470               	retlw	112	;'p'
   464  08FD  3472               	retlw	114	;'r'
   465  08FE  3465               	retlw	101	;'e'
   466  08FF  3473               	retlw	115	;'s'
   467  0900  343A               	retlw	58	;':'
   468  0901  3400               	retlw	0
   469  0902                     STR_6:	
   470  0902  3452               	retlw	82	;'R'
   471  0903  3445               	retlw	69	;'E'
   472  0904  3441               	retlw	65	;'A'
   473  0905  3444               	retlw	68	;'D'
   474  0906  3459               	retlw	89	;'Y'
   475  0907  3400               	retlw	0
   476  0908                     STR_5:	
   477  0908  346C               	retlw	108	;'l'
   478  0909  346F               	retlw	111	;'o'
   479  090A  346E               	retlw	110	;'n'
   480  090B  343A               	retlw	58	;':'
   481  090C  3400               	retlw	0
   482  090D                     STR_2:	
   483  090D  3467               	retlw	103	;'g'
   484  090E  3461               	retlw	97	;'a'
   485  090F  3473               	retlw	115	;'s'
   486  0910  343A               	retlw	58	;':'
   487  0911  3400               	retlw	0
   488  0912                     STR_4:	
   489  0912  346C               	retlw	108	;'l'
   490  0913  3461               	retlw	97	;'a'
   491  0914  3474               	retlw	116	;'t'
   492  0915  343A               	retlw	58	;':'
   493  0916  3400               	retlw	0
   494  0917                     STR_13:	
   495  0917  3425               	retlw	37	;'%'
   496  0918  3464               	retlw	100	;'d'
   497  0919  3420               	retlw	32	;' '
   498  091A  3400               	retlw	0
   499  091B                     STR_16:	
   500  091B  3425               	retlw	37	;'%'
   501  091C  3464               	retlw	100	;'d'
   502  091D  3400               	retlw	0
   503                           
   504                           ; #config settings
   505  0000                     
   506                           	psect	cinit
   507  07E8                     start_initialization:	
   508  07E8                     __initialization:	
   509                           
   510                           ; Initialize objects allocated to BANK1
   511  07E8  1383               	bcf	3,7	;select IRP bank0
   512  07E9  30AC               	movlw	low (__pdataBANK1+12)
   513  07EA  00FD               	movwf	btemp+-1
   514  07EB  3000               	movlw	high __pidataBANK1
   515  07EC  00FE               	movwf	btemp
   516  07ED  3029               	movlw	low __pidataBANK1
   517  07EE  00FF               	movwf	btemp+1
   518  07EF  30A0               	movlw	low __pdataBANK1
   519  07F0  0084               	movwf	4
   520  07F1  120A  118A  2039  120A  118A  	fcall	init_ram0
   521                           
   522                           ; Clear objects allocated to BANK0
   523  07F6  3020               	movlw	low __pbssBANK0
   524  07F7  0084               	movwf	4
   525  07F8  3044               	movlw	low (__pbssBANK0+36)
   526  07F9  120A  158A  27CE   	fcall	clear_ram0
   527  07FC                     end_of_initialization:	
   528                           ;End of C runtime variable initialization code
   529                           
   530  07FC                     __end_of__initialization:	
   531  07FC  0183               	clrf	3
   532  07FD  120A  118A  2DBA   	ljmp	_main	;jump to C main() function
   533                           
   534                           	psect	bssBANK0
   535  0020                     __pbssBANK0:	
   536  0020                     uart_response@F1319:	
   537  0020                     	ds	6
   538  0026                     _gas:	
   539  0026                     	ds	2
   540  0028                     _temp:	
   541  0028                     	ds	2
   542  002A                     _b:	
   543  002A                     	ds	2
   544  002C                     _a:	
   545  002C                     	ds	2
   546  002E                     _count:	
   547  002E                     	ds	2
   548  0030                     _g:	
   549  0030                     	ds	10
   550  003A                     _t:	
   551  003A                     	ds	10
   552                           
   553                           	psect	dataBANK1
   554  00A0                     __pdataBANK1:	
   555  00A0                     uart_response@F1322:	
   556  00A0                     	ds	12
   557                           
   558                           	psect	inittext
   559  0035                     init_fetch0:	
   560                           ;	Called with low address in FSR and high address in W
   561                           
   562  0035  087E               	movf	126,w
   563  0036  008A               	movwf	10
   564  0037  087F               	movf	127,w
   565  0038  0082               	movwf	2
   566  0039                     init_ram0:	
   567                           ;Called with:
   568                           ;	high address of idata address in btemp 
   569                           ;	low address of idata address in btemp+1 
   570                           ;	low address of data in FSR
   571                           ;	high address + 1 of data in btemp-1
   572                           
   573  0039  2035  120A  118A   	fcall	init_fetch0
   574  003C  0080               	movwf	0
   575  003D  0A84               	incf	4,f
   576  003E  0804               	movf	4,w
   577  003F  067D               	xorwf	125,w
   578  0040  1903               	btfsc	3,2
   579  0041  3400               	retlw	0
   580  0042  0AFF               	incf	127,f
   581  0043  1903               	btfsc	3,2
   582  0044  0AFE               	incf	126,f
   583  0045  2839               	goto	init_ram0
   584                           
   585                           	psect	clrtext
   586  0FCE                     clear_ram0:	
   587                           ;	Called with FSR containing the base address, and
   588                           ;	W with the last address+1
   589                           
   590  0FCE  0064               	clrwdt	;clear the watchdog before getting into this loop
   591  0FCF                     clrloop0:	
   592  0FCF  0180               	clrf	0	;clear RAM location pointed to by FSR
   593  0FD0  0A84               	incf	4,f	;increment pointer
   594  0FD1  0604               	xorwf	4,w	;XOR with final address
   595  0FD2  1903               	btfsc	3,2	;have we reached the end yet?
   596  0FD3  3400               	retlw	0	;all done for this memory range, return
   597  0FD4  0604               	xorwf	4,w	;XOR again to restore value
   598  0FD5  2FCF               	goto	clrloop0	;do the next byte
   599                           
   600                           	psect	cstackCOMMON
   601  0070                     __pcstackCOMMON:	
   602  0070                     ?_value1:	
   603  0070                     ?_value2:	
   604                           ; 1 bit 
   605                           
   606  0070                     ?_ready:	
   607                           ; 1 bit 
   608                           
   609  0070                     ?_Lcd_Port:	
   610                           ; 1 bit 
   611                           
   612  0070                     ??_Lcd_Port:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_Lcd_Cmd:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_Lcd_Init:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_Lcd_Write_Char:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_uart_init:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ??_uart_init:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_uart_txc:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ??_uart_txc:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_uart_txs:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_uart_rx:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ??_uart_rx:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?_uart_response:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ??_uart_response:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_adc_init:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ??_adc_init:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_main:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_Lcd_Clear:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_adc_read:	
   664                           ; 2 bytes @ 0x0
   665                           
   666  0070                     ?___lwdiv:	
   667                           ; 2 bytes @ 0x0
   668                           
   669  0070                     ?___ftpack:	
   670                           ; 2 bytes @ 0x0
   671                           
   672  0070                     Lcd_Port@a:	
   673                           ; 3 bytes @ 0x0
   674                           
   675  0070                     uart_txc@ch:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ___lwdiv@divisor:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ___ftpack@arg:	
   682                           ; 2 bytes @ 0x0
   683                           
   684                           
   685                           ; 3 bytes @ 0x0
   686  0070                     	ds	1
   687  0071                     ??_Lcd_Cmd:	
   688  0071                     ??_Lcd_Write_Char:	
   689                           ; 1 bytes @ 0x1
   690                           
   691  0071                     ??_uart_txs:	
   692                           ; 1 bytes @ 0x1
   693                           
   694                           
   695                           ; 1 bytes @ 0x1
   696  0071                     	ds	1
   697  0072                     ??_adc_read:	
   698  0072                     Lcd_Write_Char@temp:	
   699                           ; 1 bytes @ 0x2
   700                           
   701  0072                     uart_txs@st:	
   702                           ; 1 bytes @ 0x2
   703                           
   704  0072                     ___lwdiv@dividend:	
   705                           ; 1 bytes @ 0x2
   706                           
   707                           
   708                           ; 2 bytes @ 0x2
   709  0072                     	ds	1
   710  0073                     Lcd_Cmd@a:	
   711  0073                     Lcd_Write_Char@y:	
   712                           ; 1 bytes @ 0x3
   713                           
   714  0073                     ___ftpack@exp:	
   715                           ; 1 bytes @ 0x3
   716                           
   717                           
   718                           ; 1 bytes @ 0x3
   719  0073                     	ds	1
   720  0074                     ??_Lcd_Clear:	
   721  0074                     ?_Lcd_Set_Cursor:	
   722                           ; 1 bytes @ 0x4
   723                           
   724  0074                     ??_Lcd_Init:	
   725                           ; 1 bytes @ 0x4
   726                           
   727  0074                     ??_value1:	
   728                           ; 1 bytes @ 0x4
   729                           
   730  0074                     ??_value2:	
   731                           ; 1 bytes @ 0x4
   732                           
   733  0074                     ??_ready:	
   734                           ; 1 bytes @ 0x4
   735                           
   736  0074                     ??___lwdiv:	
   737                           ; 1 bytes @ 0x4
   738                           
   739  0074                     Lcd_Set_Cursor@b:	
   740                           ; 1 bytes @ 0x4
   741                           
   742  0074                     Lcd_Write_Char@a:	
   743                           ; 1 bytes @ 0x4
   744                           
   745  0074                     adc_read@channel:	
   746                           ; 1 bytes @ 0x4
   747                           
   748  0074                     ___ftpack@sign:	
   749                           ; 1 bytes @ 0x4
   750                           
   751                           
   752                           ; 1 bytes @ 0x4
   753  0074                     	ds	1
   754  0075                     ??___ftpack:	
   755  0075                     ??_Lcd_Set_Cursor:	
   756                           ; 1 bytes @ 0x5
   757                           
   758  0075                     ?_Lcd_Write_String:	
   759                           ; 1 bytes @ 0x5
   760                           
   761  0075                     Lcd_Write_String@a:	
   762                           ; 1 bytes @ 0x5
   763                           
   764  0075                     ___lwdiv@quotient:	
   765                           ; 2 bytes @ 0x5
   766                           
   767                           
   768                           ; 2 bytes @ 0x5
   769  0075                     	ds	2
   770  0077                     ??_Lcd_Write_String:	
   771  0077                     Lcd_Set_Cursor@a:	
   772                           ; 1 bytes @ 0x7
   773                           
   774  0077                     ___lwdiv@counter:	
   775                           ; 1 bytes @ 0x7
   776                           
   777                           
   778                           ; 1 bytes @ 0x7
   779  0077                     	ds	1
   780  0078                     ?___lwmod:	
   781  0078                     ?___lwtoft:	
   782                           ; 2 bytes @ 0x8
   783                           
   784  0078                     Lcd_Set_Cursor@z:	
   785                           ; 3 bytes @ 0x8
   786                           
   787  0078                     ___lwmod@divisor:	
   788                           ; 1 bytes @ 0x8
   789                           
   790  0078                     ___lwtoft@c:	
   791                           ; 2 bytes @ 0x8
   792                           
   793                           
   794                           ; 2 bytes @ 0x8
   795  0078                     	ds	1
   796  0079                     Lcd_Set_Cursor@y:	
   797                           
   798                           ; 1 bytes @ 0x9
   799  0079                     	ds	1
   800  007A                     Lcd_Set_Cursor@temp:	
   801  007A                     Lcd_Write_String@i:	
   802                           ; 1 bytes @ 0xA
   803                           
   804  007A                     ___lwmod@dividend:	
   805                           ; 2 bytes @ 0xA
   806                           
   807                           
   808                           ; 2 bytes @ 0xA
   809  007A                     	ds	1
   810  007B                     ??___lwtoft:	
   811                           
   812                           ; 1 bytes @ 0xB
   813  007B                     	ds	1
   814  007C                     ??___lwmod:	
   815                           
   816                           ; 1 bytes @ 0xC
   817  007C                     	ds	1
   818  007D                     ___lwmod@counter:	
   819                           
   820                           ; 1 bytes @ 0xD
   821  007D                     	ds	1
   822                           
   823                           	psect	cstackBANK0
   824  0044                     __pcstackBANK0:	
   825  0044                     ?_sprintf:	
   826  0044                     ?___ftmul:	
   827                           ; 2 bytes @ 0x0
   828                           
   829  0044                     sprintf@f:	
   830                           ; 3 bytes @ 0x0
   831                           
   832  0044                     ___ftmul@f1:	
   833                           ; 2 bytes @ 0x0
   834                           
   835  0044                     uart_response@strings:	
   836                           ; 3 bytes @ 0x0
   837                           
   838                           
   839                           ; 12 bytes @ 0x0
   840  0044                     	ds	3
   841  0047                     ___ftmul@f2:	
   842                           
   843                           ; 3 bytes @ 0x3
   844  0047                     	ds	1
   845  0048                     ??_sprintf:	
   846                           
   847                           ; 1 bytes @ 0x4
   848  0048                     	ds	2
   849  004A                     ??___ftmul:	
   850                           
   851                           ; 1 bytes @ 0x6
   852  004A                     	ds	1
   853  004B                     sprintf@ap:	
   854                           
   855                           ; 1 bytes @ 0x7
   856  004B                     	ds	1
   857  004C                     sprintf@flag:	
   858                           
   859                           ; 1 bytes @ 0x8
   860  004C                     	ds	1
   861  004D                     sprintf@prec:	
   862                           
   863                           ; 1 bytes @ 0x9
   864  004D                     	ds	1
   865  004E                     ___ftmul@exp:	
   866  004E                     sprintf@val:	
   867                           ; 1 bytes @ 0xA
   868                           
   869                           
   870                           ; 2 bytes @ 0xA
   871  004E                     	ds	1
   872  004F                     ___ftmul@f3_as_product:	
   873                           
   874                           ; 3 bytes @ 0xB
   875  004F                     	ds	1
   876  0050                     sprintf@sp:	
   877  0050                     uart_response@so_far:	
   878                           ; 1 bytes @ 0xC
   879                           
   880                           
   881                           ; 6 bytes @ 0xC
   882  0050                     	ds	1
   883  0051                     sprintf@c:	
   884                           
   885                           ; 1 bytes @ 0xD
   886  0051                     	ds	1
   887  0052                     ___ftmul@cntr:	
   888                           
   889                           ; 1 bytes @ 0xE
   890  0052                     	ds	1
   891  0053                     ___ftmul@sign:	
   892                           
   893                           ; 1 bytes @ 0xF
   894  0053                     	ds	1
   895  0054                     ?___fttol:	
   896  0054                     ___fttol@f1:	
   897                           ; 4 bytes @ 0x10
   898                           
   899                           
   900                           ; 3 bytes @ 0x10
   901  0054                     	ds	2
   902  0056                     uart_response@received:	
   903                           
   904                           ; 1 bytes @ 0x12
   905  0056                     	ds	1
   906  0057                     uart_response@response:	
   907                           
   908                           ; 1 bytes @ 0x13
   909  0057                     	ds	1
   910  0058                     ??___fttol:	
   911  0058                     uart_response@continue_loop:	
   912                           ; 1 bytes @ 0x14
   913                           
   914                           
   915                           ; 1 bytes @ 0x14
   916  0058                     	ds	1
   917  0059                     uart_response@i:	
   918                           
   919                           ; 1 bytes @ 0x15
   920  0059                     	ds	3
   921  005C                     ___fttol@sign1:	
   922                           
   923                           ; 1 bytes @ 0x18
   924  005C                     	ds	1
   925  005D                     ___fttol@lval:	
   926                           
   927                           ; 4 bytes @ 0x19
   928  005D                     	ds	4
   929  0061                     ___fttol@exp1:	
   930                           
   931                           ; 1 bytes @ 0x1D
   932  0061                     	ds	1
   933  0062                     ??_main:	
   934                           
   935                           ; 1 bytes @ 0x1E
   936  0062                     	ds	3
   937                           
   938                           	psect	maintext
   939  05BA                     __pmaintext:	
   940 ;;
   941 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   942 ;;
   943 ;; *************** function _main *****************
   944 ;; Defined at:
   945 ;;		line 132 in file "gas.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : B00/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   959 ;;      Params:         0       0       0       0       0
   960 ;;      Locals:         0       0       0       0       0
   961 ;;      Temps:          0       3       0       0       0
   962 ;;      Totals:         0       3       0       0       0
   963 ;;Total ram usage:        3 bytes
   964 ;; Hardware stack levels required when called:    3
   965 ;; This function calls:
   966 ;;		_Lcd_Clear
   967 ;;		_Lcd_Init
   968 ;;		_Lcd_Set_Cursor
   969 ;;		_Lcd_Write_String
   970 ;;		___ftmul
   971 ;;		___fttol
   972 ;;		___lwtoft
   973 ;;		_adc_init
   974 ;;		_adc_read
   975 ;;		_ready
   976 ;;		_sprintf
   977 ;;		_uart_init
   978 ;;		_uart_txc
   979 ;;		_uart_txs
   980 ;;		_value1
   981 ;;		_value2
   982 ;; This function is called by:
   983 ;;		Startup code after reset
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _main
   989  05BA                     _main:	
   990                           
   991                           ;gas.c: 133: TRISD = 0x00;
   992                           
   993                           ;incstack = 0
   994                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   995  05BA  1683               	bsf	3,5	;RP0=1, select bank1
   996  05BB  1303               	bcf	3,6	;RP1=0, select bank1
   997  05BC  0188               	clrf	8	;volatile
   998                           
   999                           ;gas.c: 134: TRISA = 0xFF;
  1000  05BD  30FF               	movlw	255
  1001  05BE  0085               	movwf	5	;volatile
  1002                           
  1003                           ;gas.c: 135: TRISB7 = 1;
  1004  05BF  1786               	bsf	6,7	;volatile
  1005                           
  1006                           ;gas.c: 136: uart_init();
  1007  05C0  120A  118A  2046  120A  118A  	fcall	_uart_init
  1008                           
  1009                           ;gas.c: 137: Lcd_Init();
  1010  05C5  120A  118A  2213  120A  118A  	fcall	_Lcd_Init
  1011                           
  1012                           ;gas.c: 138: adc_init();
  1013  05CA  120A  158A  27D6  120A  118A  	fcall	_adc_init
  1014                           
  1015                           ;gas.c: 139: Lcd_Clear();
  1016  05CF  120A  158A  27E9  120A  118A  	fcall	_Lcd_Clear
  1017                           
  1018                           ;gas.c: 140: Lcd_Set_Cursor(1,1);
  1019  05D4  01F4               	clrf	Lcd_Set_Cursor@b
  1020  05D5  0AF4               	incf	Lcd_Set_Cursor@b,f
  1021  05D6  3001               	movlw	1
  1022  05D7  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1023                           
  1024                           ;gas.c: 141: Lcd_Write_String(" Hazardous gas  ");
  1025  05DC  308F               	movlw	low (STR_7| (0+32768))
  1026  05DD  00F5               	movwf	Lcd_Write_String@a
  1027  05DE  3088               	movlw	high (STR_7| (0+32768))
  1028  05DF  00F6               	movwf	Lcd_Write_String@a+1
  1029  05E0  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1030                           
  1031                           ;gas.c: 142: Lcd_Set_Cursor(2,1);
  1032  05E5  01F4               	clrf	Lcd_Set_Cursor@b
  1033  05E6  0AF4               	incf	Lcd_Set_Cursor@b,f
  1034  05E7  3002               	movlw	2
  1035  05E8  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1036                           
  1037                           ;gas.c: 143: Lcd_Write_String("Detection by IOT");
  1038  05ED  30C2               	movlw	low (STR_8| (0+32768))
  1039  05EE  00F5               	movwf	Lcd_Write_String@a
  1040  05EF  3088               	movlw	high (STR_8| (0+32768))
  1041  05F0  00F6               	movwf	Lcd_Write_String@a+1
  1042  05F1  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1043                           
  1044                           ;gas.c: 144: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1045  05F6  304D               	movlw	77
  1046  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1047  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1048  05F9  00E4               	movwf	??_main+2
  1049  05FA  3019               	movlw	25
  1050  05FB  00E3               	movwf	??_main+1
  1051  05FC  304F               	movlw	79
  1052  05FD  00E2               	movwf	??_main
  1053  05FE                     u1897:	
  1054  05FE  0BE2               	decfsz	??_main,f
  1055  05FF  2DFE               	goto	u1897
  1056  0600  0BE3               	decfsz	??_main+1,f
  1057  0601  2DFE               	goto	u1897
  1058  0602  0BE4               	decfsz	??_main+2,f
  1059  0603  2DFE               	goto	u1897
  1060  0604                     l1876:	
  1061                           ;gas.c: 145: do{
  1062                           
  1063                           
  1064                           ;gas.c: 146: Lcd_Set_Cursor(1,1);
  1065  0604  01F4               	clrf	Lcd_Set_Cursor@b
  1066  0605  0AF4               	incf	Lcd_Set_Cursor@b,f
  1067  0606  3001               	movlw	1
  1068  0607  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1069                           
  1070                           ;gas.c: 147: Lcd_Write_String(" Initializing...");
  1071  060C  30A0               	movlw	low (STR_9| (0+32768))
  1072  060D  00F5               	movwf	Lcd_Write_String@a
  1073  060E  3088               	movlw	high (STR_9| (0+32768))
  1074  060F  00F6               	movwf	Lcd_Write_String@a+1
  1075  0610  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1076                           
  1077                           ;gas.c: 148: Lcd_Set_Cursor(2,1);
  1078  0615  01F4               	clrf	Lcd_Set_Cursor@b
  1079  0616  0AF4               	incf	Lcd_Set_Cursor@b,f
  1080  0617  3002               	movlw	2
  1081  0618  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1082                           
  1083                           ;gas.c: 149: Lcd_Write_String("   IOT MODEM    ");
  1084  061D  304B               	movlw	low (STR_10| (0+32768))
  1085  061E  00F5               	movwf	Lcd_Write_String@a
  1086  061F  3088               	movlw	high (STR_10| (0+32768))
  1087  0620  00F6               	movwf	Lcd_Write_String@a+1
  1088  0621  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1089                           
  1090                           ;gas.c: 150: }while(!ready());
  1091  0626  120A  158A  27F4  120A  118A  	fcall	_ready
  1092  062B  1C03               	btfss	3,0
  1093  062C  2E04               	goto	l1876
  1094  062D                     l1886:	
  1095                           
  1096                           ;gas.c: 151: Lcd_Clear();
  1097  062D  120A  158A  27E9  120A  118A  	fcall	_Lcd_Clear
  1098  0632                     l190:	
  1099                           ;gas.c: 152: while(1){
  1100                           
  1101                           
  1102                           ;gas.c: 153: temp = adc_read(0);
  1103  0632  3000               	movlw	0
  1104  0633  120A  118A  20B5  120A  118A  	fcall	_adc_read
  1105  0638  0871               	movf	?_adc_read+1,w
  1106  0639  1283               	bcf	3,5	;RP0=0, select bank0
  1107  063A  1303               	bcf	3,6	;RP1=0, select bank0
  1108  063B  00A9               	movwf	_temp+1
  1109  063C  0870               	movf	?_adc_read,w
  1110  063D  00A8               	movwf	_temp
  1111                           
  1112                           ;gas.c: 154: gas = adc_read(1);
  1113  063E  3001               	movlw	1
  1114  063F  120A  118A  20B5  120A  118A  	fcall	_adc_read
  1115  0644  0871               	movf	?_adc_read+1,w
  1116  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0647  00A7               	movwf	_gas+1
  1119  0648  0870               	movf	?_adc_read,w
  1120  0649  00A6               	movwf	_gas
  1121                           
  1122                           ;gas.c: 155: temp = (float)temp * 0.4887;
  1123  064A  0829               	movf	_temp+1,w
  1124  064B  00F9               	movwf	___lwtoft@c+1
  1125  064C  0828               	movf	_temp,w
  1126  064D  00F8               	movwf	___lwtoft@c
  1127  064E  120A  118A  2058  120A  118A  	fcall	___lwtoft
  1128  0653  0878               	movf	?___lwtoft,w
  1129  0654  1283               	bcf	3,5	;RP0=0, select bank0
  1130  0655  1303               	bcf	3,6	;RP1=0, select bank0
  1131  0656  00C7               	movwf	___ftmul@f2
  1132  0657  0879               	movf	?___lwtoft+1,w
  1133  0658  00C8               	movwf	___ftmul@f2+1
  1134  0659  087A               	movf	?___lwtoft+2,w
  1135  065A  00C9               	movwf	___ftmul@f2+2
  1136  065B  3037               	movlw	55
  1137  065C  00C4               	movwf	___ftmul@f1
  1138  065D  30FA               	movlw	250
  1139  065E  00C5               	movwf	___ftmul@f1+1
  1140  065F  303E               	movlw	62
  1141  0660  00C6               	movwf	___ftmul@f1+2
  1142  0661  120A  118A  23FF  120A  118A  	fcall	___ftmul
  1143  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0668  0844               	movf	?___ftmul,w
  1146  0669  00D4               	movwf	___fttol@f1
  1147  066A  0845               	movf	?___ftmul+1,w
  1148  066B  00D5               	movwf	___fttol@f1+1
  1149  066C  0846               	movf	?___ftmul+2,w
  1150  066D  00D6               	movwf	___fttol@f1+2
  1151  066E  120A  118A  22DB  120A  118A  	fcall	___fttol
  1152  0673  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0674  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0675  0855               	movf	?___fttol+1,w
  1155  0676  00A9               	movwf	_temp+1
  1156  0677  0854               	movf	?___fttol,w
  1157  0678  00A8               	movwf	_temp
  1158                           
  1159                           ;gas.c: 156: if(temp>=35){
  1160  0679  3000               	movlw	0
  1161  067A  0229               	subwf	_temp+1,w
  1162  067B  3023               	movlw	35
  1163  067C  1903               	skipnz
  1164  067D  0228               	subwf	_temp,w
  1165  067E  1C03               	skipc
  1166  067F  2E8C               	goto	l1894
  1167                           
  1168                           ;gas.c: 157: Lcd_Set_Cursor(1,1);
  1169  0680  01F4               	clrf	Lcd_Set_Cursor@b
  1170  0681  0AF4               	incf	Lcd_Set_Cursor@b,f
  1171  0682  3001               	movlw	1
  1172  0683  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1173                           
  1174                           ;gas.c: 158: Lcd_Write_String("HIGH TEMP      ");
  1175  0688  30D3               	movlw	low (STR_11| (0+32768))
  1176  0689  00F5               	movwf	Lcd_Write_String@a
  1177  068A  3088               	movlw	high (STR_11| (0+32768))
  1178  068B  2EBC               	goto	L1
  1179  068C                     l1894:	
  1180                           ;gas.c: 159: }
  1181                           
  1182                           
  1183                           ;gas.c: 160: else{
  1184                           ;gas.c: 161: Lcd_Set_Cursor(1,1);
  1185  068C  01F4               	clrf	Lcd_Set_Cursor@b
  1186  068D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1187  068E  3001               	movlw	1
  1188  068F  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1189                           
  1190                           ;gas.c: 162: Lcd_Write_String("TEMP : ");
  1191  0694  30EE               	movlw	low (STR_12| (0+32768))
  1192  0695  00F5               	movwf	Lcd_Write_String@a
  1193  0696  3088               	movlw	high (STR_12| (0+32768))
  1194  0697  00F6               	movwf	Lcd_Write_String@a+1
  1195  0698  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1196                           
  1197                           ;gas.c: 163: Lcd_Set_Cursor(1,8);
  1198  069D  3008               	movlw	8
  1199  069E  1283               	bcf	3,5	;RP0=0, select bank0
  1200  069F  1303               	bcf	3,6	;RP1=0, select bank0
  1201  06A0  00E2               	movwf	??_main
  1202  06A1  0862               	movf	??_main,w
  1203  06A2  00F4               	movwf	Lcd_Set_Cursor@b
  1204  06A3  3001               	movlw	1
  1205  06A4  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1206                           
  1207                           ;gas.c: 164: sprintf(t,"%d ",temp);
  1208  06A9  3017               	movlw	low (STR_13| (0+32768))
  1209  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1210  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1211  06AC  00C4               	movwf	sprintf@f
  1212  06AD  3089               	movlw	high (STR_13| (0+32768))
  1213  06AE  00C5               	movwf	sprintf@f+1
  1214  06AF  0829               	movf	_temp+1,w
  1215  06B0  00C7               	movwf	?_sprintf+3
  1216  06B1  0828               	movf	_temp,w
  1217  06B2  00C6               	movwf	?_sprintf+2
  1218  06B3  303A               	movlw	(low (_t| 0))& (0+255)
  1219  06B4  120A  118A  24D2  120A  118A  	fcall	_sprintf
  1220                           
  1221                           ;gas.c: 165: Lcd_Write_String(t);
  1222  06B9  303A               	movlw	(low (_t| 0))& (0+255)
  1223  06BA  00F5               	movwf	Lcd_Write_String@a
  1224  06BB  3000               	movlw	0
  1225  06BC                     L1:	
  1226  06BC  00F6               	movwf	Lcd_Write_String@a+1
  1227  06BD  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1228                           
  1229                           ;gas.c: 166: }
  1230                           ;gas.c: 167: if(gas >= 350){
  1231  06C2  3001               	movlw	1
  1232  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  1233  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  1234  06C5  0227               	subwf	_gas+1,w
  1235  06C6  305E               	movlw	94
  1236  06C7  1903               	skipnz
  1237  06C8  0226               	subwf	_gas,w
  1238  06C9  1C03               	skipc
  1239  06CA  2ED7               	goto	l1906
  1240                           
  1241                           ;gas.c: 168: Lcd_Set_Cursor(2,1);
  1242  06CB  01F4               	clrf	Lcd_Set_Cursor@b
  1243  06CC  0AF4               	incf	Lcd_Set_Cursor@b,f
  1244  06CD  3002               	movlw	2
  1245  06CE  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1246                           
  1247                           ;gas.c: 169: Lcd_Write_String("  High Methane  ");
  1248  06D3  307E               	movlw	low (STR_14| (0+32768))
  1249  06D4  00F5               	movwf	Lcd_Write_String@a
  1250  06D5  3088               	movlw	high (STR_14| (0+32768))
  1251  06D6  2F07               	goto	L2
  1252  06D7                     l1906:	
  1253                           ;gas.c: 170: }
  1254                           
  1255                           
  1256                           ;gas.c: 171: else{
  1257                           ;gas.c: 172: Lcd_Set_Cursor(2,1);
  1258  06D7  01F4               	clrf	Lcd_Set_Cursor@b
  1259  06D8  0AF4               	incf	Lcd_Set_Cursor@b,f
  1260  06D9  3002               	movlw	2
  1261  06DA  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1262                           
  1263                           ;gas.c: 173: Lcd_Write_String("Methane = ");
  1264  06DF  30E3               	movlw	low (STR_15| (0+32768))
  1265  06E0  00F5               	movwf	Lcd_Write_String@a
  1266  06E1  3088               	movlw	high (STR_15| (0+32768))
  1267  06E2  00F6               	movwf	Lcd_Write_String@a+1
  1268  06E3  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1269                           
  1270                           ;gas.c: 174: Lcd_Set_Cursor(2,11);
  1271  06E8  300B               	movlw	11
  1272  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  1273  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  1274  06EB  00E2               	movwf	??_main
  1275  06EC  0862               	movf	??_main,w
  1276  06ED  00F4               	movwf	Lcd_Set_Cursor@b
  1277  06EE  3002               	movlw	2
  1278  06EF  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1279                           
  1280                           ;gas.c: 175: sprintf(g,"%d",gas);
  1281  06F4  301B               	movlw	low (STR_16| (0+32768))
  1282  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  1283  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  1284  06F7  00C4               	movwf	sprintf@f
  1285  06F8  3089               	movlw	high (STR_16| (0+32768))
  1286  06F9  00C5               	movwf	sprintf@f+1
  1287  06FA  0827               	movf	_gas+1,w
  1288  06FB  00C7               	movwf	?_sprintf+3
  1289  06FC  0826               	movf	_gas,w
  1290  06FD  00C6               	movwf	?_sprintf+2
  1291  06FE  3030               	movlw	(low (_g| 0))& (0+255)
  1292  06FF  120A  118A  24D2  120A  118A  	fcall	_sprintf
  1293                           
  1294                           ;gas.c: 176: Lcd_Write_String(g);
  1295  0704  3030               	movlw	(low (_g| 0))& (0+255)
  1296  0705  00F5               	movwf	Lcd_Write_String@a
  1297  0706  3000               	movlw	0
  1298  0707                     L2:	
  1299  0707  00F6               	movwf	Lcd_Write_String@a+1
  1300  0708  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1301                           
  1302                           ;gas.c: 177: }
  1303                           ;gas.c: 178: if(RB7 == 0){
  1304  070D  1283               	bcf	3,5	;RP0=0, select bank0
  1305  070E  1303               	bcf	3,6	;RP1=0, select bank0
  1306  070F  1B86               	btfsc	6,7	;volatile
  1307  0710  2E32               	goto	l190
  1308                           
  1309                           ;gas.c: 179: _delay((unsigned long)((50)*(20000000/4000.0)));
  1310  0711  3002               	movlw	2
  1311  0712  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0713  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0714  00E4               	movwf	??_main+2
  1314  0715  3045               	movlw	69
  1315  0716  00E3               	movwf	??_main+1
  1316  0717  30A9               	movlw	169
  1317  0718  00E2               	movwf	??_main
  1318  0719                     u1907:	
  1319  0719  0BE2               	decfsz	??_main,f
  1320  071A  2F19               	goto	u1907
  1321  071B  0BE3               	decfsz	??_main+1,f
  1322  071C  2F19               	goto	u1907
  1323  071D  0BE4               	decfsz	??_main+2,f
  1324  071E  2F19               	goto	u1907
  1325                           
  1326                           ;gas.c: 180: if(RB7 == 0){
  1327  071F  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0720  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0721  1B86               	btfsc	6,7	;volatile
  1330  0722  2E32               	goto	l190
  1331                           
  1332                           ;gas.c: 181: Lcd_Clear();
  1333  0723  120A  158A  27E9  120A  118A  	fcall	_Lcd_Clear
  1334                           
  1335                           ;gas.c: 182: Lcd_Set_Cursor(1,1);
  1336  0728  01F4               	clrf	Lcd_Set_Cursor@b
  1337  0729  0AF4               	incf	Lcd_Set_Cursor@b,f
  1338  072A  3001               	movlw	1
  1339  072B  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1340                           
  1341                           ;gas.c: 183: Lcd_Write_String("  Uploading...  ");
  1342  0730  306D               	movlw	low (STR_17| (0+32768))
  1343  0731  00F5               	movwf	Lcd_Write_String@a
  1344  0732  3088               	movlw	high (STR_17| (0+32768))
  1345  0733  00F6               	movwf	Lcd_Write_String@a+1
  1346  0734  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1347                           
  1348                           ;gas.c: 184: uart_txc('~');
  1349  0739  307E               	movlw	126
  1350  073A  120A  118A  2005  120A  118A  	fcall	_uart_txc
  1351  073F                     l1924:	
  1352                           ;gas.c: 185: while(!value1());
  1353                           
  1354  073F  120A  118A  2011  120A  118A  	fcall	_value1
  1355  0744  1C03               	btfss	3,0
  1356  0745  2F3F               	goto	l1924
  1357                           
  1358                           ;gas.c: 186: Lcd_Set_Cursor(1,1);
  1359  0746  01F4               	clrf	Lcd_Set_Cursor@b
  1360  0747  0AF4               	incf	Lcd_Set_Cursor@b,f
  1361  0748  3001               	movlw	1
  1362  0749  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1363                           
  1364                           ;gas.c: 187: Lcd_Write_String(" sending temp...");
  1365  074E  30B1               	movlw	low (STR_18| (0+32768))
  1366  074F  00F5               	movwf	Lcd_Write_String@a
  1367  0750  3088               	movlw	high (STR_18| (0+32768))
  1368  0751  00F6               	movwf	Lcd_Write_String@a+1
  1369  0752  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1370                           
  1371                           ;gas.c: 188: _delay((unsigned long)((50)*(20000000/4000.0)));
  1372  0757  3002               	movlw	2
  1373  0758  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0759  1303               	bcf	3,6	;RP1=0, select bank0
  1375  075A  00E4               	movwf	??_main+2
  1376  075B  3045               	movlw	69
  1377  075C  00E3               	movwf	??_main+1
  1378  075D  30A9               	movlw	169
  1379  075E  00E2               	movwf	??_main
  1380  075F                     u1917:	
  1381  075F  0BE2               	decfsz	??_main,f
  1382  0760  2F5F               	goto	u1917
  1383  0761  0BE3               	decfsz	??_main+1,f
  1384  0762  2F5F               	goto	u1917
  1385  0763  0BE4               	decfsz	??_main+2,f
  1386  0764  2F5F               	goto	u1917
  1387                           
  1388                           ;gas.c: 189: uart_txs(t);uart_txc(0x0D);uart_txc(0x0A);
  1389  0765  303A               	movlw	(low (_t| 0))& (0+255)
  1390  0766  120A  118A  206C  120A  118A  	fcall	_uart_txs
  1391  076B  300D               	movlw	13
  1392  076C  120A  118A  2005  120A  118A  	fcall	_uart_txc
  1393  0771  300A               	movlw	10
  1394  0772  120A  118A  2005  120A  118A  	fcall	_uart_txc
  1395  0777                     l1938:	
  1396                           ;gas.c: 190: while(!value2());
  1397                           
  1398  0777  120A  118A  201D  120A  118A  	fcall	_value2
  1399  077C  1C03               	btfss	3,0
  1400  077D  2F77               	goto	l1938
  1401                           
  1402                           ;gas.c: 191: Lcd_Set_Cursor(1,1);
  1403  077E  01F4               	clrf	Lcd_Set_Cursor@b
  1404  077F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1405  0780  3001               	movlw	1
  1406  0781  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1407                           
  1408                           ;gas.c: 192: Lcd_Write_String(" sending gas...  ");
  1409  0786  3028               	movlw	low (STR_19| (0+32768))
  1410  0787  00F5               	movwf	Lcd_Write_String@a
  1411  0788  3088               	movlw	high (STR_19| (0+32768))
  1412  0789  00F6               	movwf	Lcd_Write_String@a+1
  1413  078A  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1414                           
  1415                           ;gas.c: 193: _delay((unsigned long)((50)*(20000000/4000.0)));
  1416  078F  3002               	movlw	2
  1417  0790  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0791  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0792  00E4               	movwf	??_main+2
  1420  0793  3045               	movlw	69
  1421  0794  00E3               	movwf	??_main+1
  1422  0795  30A9               	movlw	169
  1423  0796  00E2               	movwf	??_main
  1424  0797                     u1927:	
  1425  0797  0BE2               	decfsz	??_main,f
  1426  0798  2F97               	goto	u1927
  1427  0799  0BE3               	decfsz	??_main+1,f
  1428  079A  2F97               	goto	u1927
  1429  079B  0BE4               	decfsz	??_main+2,f
  1430  079C  2F97               	goto	u1927
  1431                           
  1432                           ;gas.c: 194: uart_txs(g);uart_txc(0x0D);uart_txc(0x0A);
  1433  079D  3030               	movlw	(low (_g| 0))& (0+255)
  1434  079E  120A  118A  206C  120A  118A  	fcall	_uart_txs
  1435  07A3  300D               	movlw	13
  1436  07A4  120A  118A  2005  120A  118A  	fcall	_uart_txc
  1437  07A9  300A               	movlw	10
  1438  07AA  120A  118A  2005  120A  118A  	fcall	_uart_txc
  1439  07AF                     l1952:	
  1440                           ;gas.c: 195: while(!ready());
  1441                           
  1442  07AF  120A  158A  27F4  120A  118A  	fcall	_ready
  1443  07B4  1C03               	btfss	3,0
  1444  07B5  2FAF               	goto	l1952
  1445                           
  1446                           ;gas.c: 196: Lcd_Set_Cursor(1,1);
  1447  07B6  01F4               	clrf	Lcd_Set_Cursor@b
  1448  07B7  0AF4               	incf	Lcd_Set_Cursor@b,f
  1449  07B8  3001               	movlw	1
  1450  07B9  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1451                           
  1452                           ;gas.c: 197: Lcd_Write_String("    Uploaded    ");
  1453  07BE  305C               	movlw	low (STR_20| (0+32768))
  1454  07BF  00F5               	movwf	Lcd_Write_String@a
  1455  07C0  3088               	movlw	high (STR_20| (0+32768))
  1456  07C1  00F6               	movwf	Lcd_Write_String@a+1
  1457  07C2  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1458                           
  1459                           ;gas.c: 198: Lcd_Set_Cursor(2,1);
  1460  07C7  01F4               	clrf	Lcd_Set_Cursor@b
  1461  07C8  0AF4               	incf	Lcd_Set_Cursor@b,f
  1462  07C9  3002               	movlw	2
  1463  07CA  120A  118A  21C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1464                           
  1465                           ;gas.c: 199: Lcd_Write_String("                ");
  1466  07CF  303A               	movlw	low (STR_21| (0+32768))
  1467  07D0  00F5               	movwf	Lcd_Write_String@a
  1468  07D1  3088               	movlw	high (STR_21| (0+32768))
  1469  07D2  00F6               	movwf	Lcd_Write_String@a+1
  1470  07D3  120A  118A  218C  120A  118A  	fcall	_Lcd_Write_String
  1471                           
  1472                           ;gas.c: 200: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1473  07D8  301A               	movlw	26
  1474  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  1475  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  1476  07DB  00E4               	movwf	??_main+2
  1477  07DC  305E               	movlw	94
  1478  07DD  00E3               	movwf	??_main+1
  1479  07DE  306D               	movlw	109
  1480  07DF  00E2               	movwf	??_main
  1481  07E0                     u1937:	
  1482  07E0  0BE2               	decfsz	??_main,f
  1483  07E1  2FE0               	goto	u1937
  1484  07E2  0BE3               	decfsz	??_main+1,f
  1485  07E3  2FE0               	goto	u1937
  1486  07E4  0BE4               	decfsz	??_main+2,f
  1487  07E5  2FE0               	goto	u1937
  1488  07E6  2FE7               	nop2
  1489  07E7  2E2D               	goto	l1886
  1490  07E8                     __end_of_main:	
  1491                           ;gas.c: 201: Lcd_Clear();
  1492                           
  1493                           
  1494                           	psect	text1
  1495  001D                     __ptext1:	
  1496 ;; *************** function _value2 *****************
  1497 ;; Defined at:
  1498 ;;		line 100 in file "gas.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;		None               void
  1505 ;; Registers used:
  1506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1512 ;;      Params:         0       0       0       0       0
  1513 ;;      Locals:         0       0       0       0       0
  1514 ;;      Temps:          0       0       0       0       0
  1515 ;;      Totals:         0       0       0       0       0
  1516 ;;Total ram usage:        0 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    2
  1519 ;; This function calls:
  1520 ;;		_uart_response
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           
  1527                           ;psect for function _value2
  1528  001D                     _value2:	
  1529                           
  1530                           ;gas.c: 101: return (uart_response() == 2);
  1531                           
  1532                           ;incstack = 0
  1533                           ; Regs used in _value2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1534  001D  120A  118A  2369  120A  118A  	fcall	_uart_response
  1535  0022  3A02               	xorlw	2
  1536  0023  1903               	skipnz
  1537  0024  2827               	goto	l1656
  1538  0025  1003               	clrc
  1539  0026  0008               	return
  1540  0027                     l1656:	
  1541  0027  1403               	setc
  1542  0028  0008               	return
  1543  0029                     __end_of_value2:	
  1544                           
  1545                           	psect	text2
  1546  0011                     __ptext2:	
  1547 ;; *************** function _value1 *****************
  1548 ;; Defined at:
  1549 ;;		line 97 in file "gas.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;		None
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;		None
  1554 ;; Return value:  Size  Location     Type
  1555 ;;		None               void
  1556 ;; Registers used:
  1557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1563 ;;      Params:         0       0       0       0       0
  1564 ;;      Locals:         0       0       0       0       0
  1565 ;;      Temps:          0       0       0       0       0
  1566 ;;      Totals:         0       0       0       0       0
  1567 ;;Total ram usage:        0 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    2
  1570 ;; This function calls:
  1571 ;;		_uart_response
  1572 ;; This function is called by:
  1573 ;;		_main
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           
  1578                           ;psect for function _value1
  1579  0011                     _value1:	
  1580                           
  1581                           ;gas.c: 98: return (uart_response() == 1);
  1582                           
  1583                           ;incstack = 0
  1584                           ; Regs used in _value1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1585  0011  120A  118A  2369  120A  118A  	fcall	_uart_response
  1586  0016  3A01               	xorlw	1
  1587  0017  1903               	skipnz
  1588  0018  281B               	goto	l1648
  1589  0019  1003               	clrc
  1590  001A  0008               	return
  1591  001B                     l1648:	
  1592  001B  1403               	setc
  1593  001C  0008               	return
  1594  001D                     __end_of_value1:	
  1595                           
  1596                           	psect	text3
  1597  006C                     __ptext3:	
  1598 ;; *************** function _uart_txs *****************
  1599 ;; Defined at:
  1600 ;;		line 53 in file "gas.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  st              1    wreg     PTR unsigned char 
  1603 ;;		 -> g(10), t(10), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  st              1    2[COMMON] PTR unsigned char 
  1606 ;;		 -> g(10), t(10), 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1616 ;;      Params:         0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0
  1618 ;;      Temps:          1       0       0       0       0
  1619 ;;      Totals:         2       0       0       0       0
  1620 ;;Total ram usage:        2 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    1
  1623 ;; This function calls:
  1624 ;;		_uart_txc
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _uart_txs
  1632  006C                     _uart_txs:	
  1633                           
  1634                           ;incstack = 0
  1635                           ; Regs used in _uart_txs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1636                           ;uart_txs@st stored from wreg
  1637  006C  00F2               	movwf	uart_txs@st
  1638  006D                     l1642:	
  1639                           ;gas.c: 54: while(*st)
  1640                           
  1641  006D  0872               	movf	uart_txs@st,w
  1642  006E  0084               	movwf	4
  1643  006F  1383               	bcf	3,7	;select IRP bank0
  1644  0070  0800               	movf	0,w
  1645  0071  1903               	btfsc	3,2
  1646  0072  0008               	return
  1647                           
  1648                           ;gas.c: 55: uart_txc(*st++);
  1649  0073  0872               	movf	uart_txs@st,w
  1650  0074  0084               	movwf	4
  1651  0075  1383               	bcf	3,7	;select IRP bank0
  1652  0076  0800               	movf	0,w
  1653  0077  120A  118A  2005  120A  118A  	fcall	_uart_txc
  1654  007C  3001               	movlw	1
  1655  007D  00F1               	movwf	??_uart_txs
  1656  007E  0871               	movf	??_uart_txs,w
  1657  007F  07F2               	addwf	uart_txs@st,f
  1658  0080  286D               	goto	l1642
  1659  0081                     __end_of_uart_txs:	
  1660                           
  1661                           	psect	text4
  1662  0005                     __ptext4:	
  1663 ;; *************** function _uart_txc *****************
  1664 ;; Defined at:
  1665 ;;		line 48 in file "gas.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  ch              1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  ch              1    0[COMMON] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         0       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0
  1682 ;;      Totals:         1       0       0       0       0
  1683 ;;Total ram usage:        1 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_uart_txs
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           
  1694                           ;psect for function _uart_txc
  1695  0005                     _uart_txc:	
  1696                           
  1697                           ;incstack = 0
  1698                           ; Regs used in _uart_txc: [wreg]
  1699                           ;uart_txc@ch stored from wreg
  1700  0005  00F0               	movwf	uart_txc@ch
  1701  0006                     l117:	
  1702                           ;gas.c: 49: while(!TXIF);
  1703                           
  1704  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1705  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1706  0008  1E0C               	btfss	12,4	;volatile
  1707  0009  2806               	goto	l117
  1708                           
  1709                           ;gas.c: 50: TXREG = ch;
  1710  000A  0870               	movf	uart_txc@ch,w
  1711  000B  0099               	movwf	25	;volatile
  1712  000C                     l120:	
  1713                           ;gas.c: 51: while(!TRMT);
  1714                           
  1715  000C  1683               	bsf	3,5	;RP0=1, select bank1
  1716  000D  1303               	bcf	3,6	;RP1=0, select bank1
  1717  000E  1898               	btfsc	24,1	;volatile
  1718  000F  0008               	return
  1719  0010  280C               	goto	l120
  1720  0011                     __end_of_uart_txc:	
  1721                           
  1722                           	psect	text5
  1723  0046                     __ptext5:	
  1724 ;; *************** function _uart_init *****************
  1725 ;; Defined at:
  1726 ;;		line 38 in file "gas.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1740 ;;      Params:         0       0       0       0       0
  1741 ;;      Locals:         0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0
  1743 ;;      Totals:         0       0       0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_main
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _uart_init
  1755  0046                     _uart_init:	
  1756                           
  1757                           ;gas.c: 39: TRISC6 = 0;
  1758                           
  1759                           ;incstack = 0
  1760                           ; Regs used in _uart_init: [wreg]
  1761  0046  1683               	bsf	3,5	;RP0=1, select bank1
  1762  0047  1303               	bcf	3,6	;RP1=0, select bank1
  1763  0048  1307               	bcf	7,6	;volatile
  1764                           
  1765                           ;gas.c: 40: TRISC7 = 1;
  1766  0049  1787               	bsf	7,7	;volatile
  1767                           
  1768                           ;gas.c: 41: SPBRG = ((20000000/16)/9600) - 1;
  1769  004A  3081               	movlw	129
  1770  004B  0099               	movwf	25	;volatile
  1771                           
  1772                           ;gas.c: 42: BRGH = 1;
  1773  004C  1518               	bsf	24,2	;volatile
  1774                           
  1775                           ;gas.c: 43: SYNC = 0;
  1776  004D  1218               	bcf	24,4	;volatile
  1777                           
  1778                           ;gas.c: 44: SPEN = 1;
  1779  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1780  004F  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0050  1798               	bsf	24,7	;volatile
  1782                           
  1783                           ;gas.c: 45: TXEN = 1;
  1784  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1785  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1786  0053  1698               	bsf	24,5	;volatile
  1787                           
  1788                           ;gas.c: 46: CREN = 1;
  1789  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1790  0055  1303               	bcf	3,6	;RP1=0, select bank0
  1791  0056  1618               	bsf	24,4	;volatile
  1792  0057  0008               	return
  1793  0058                     __end_of_uart_init:	
  1794                           
  1795                           	psect	text6
  1796  04D2                     __ptext6:	
  1797 ;; *************** function _sprintf *****************
  1798 ;; Defined at:
  1799 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  sp              1    wreg     PTR unsigned char 
  1802 ;;		 -> g(10), t(10), 
  1803 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1804 ;;		 -> STR_16(3), STR_13(4), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  sp              1   12[BANK0 ] PTR unsigned char 
  1807 ;;		 -> g(10), t(10), 
  1808 ;;  tmpval          4    0        struct .
  1809 ;;  val             2   10[BANK0 ] unsigned int 
  1810 ;;  cp              2    0        PTR const unsigned char 
  1811 ;;  len             2    0        unsigned int 
  1812 ;;  c               1   13[BANK0 ] char 
  1813 ;;  prec            1    9[BANK0 ] char 
  1814 ;;  flag            1    8[BANK0 ] unsigned char 
  1815 ;;  ap              1    7[BANK0 ] PTR void [1]
  1816 ;;		 -> ?_sprintf(2), 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2    0[BANK0 ] int 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       4       0       0       0
  1827 ;;      Locals:         0       7       0       0       0
  1828 ;;      Temps:          0       3       0       0       0
  1829 ;;      Totals:         0      14       0       0       0
  1830 ;;Total ram usage:       14 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    1
  1833 ;; This function calls:
  1834 ;;		___lwdiv
  1835 ;;		___lwmod
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _sprintf
  1843  04D2                     _sprintf:	
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1847                           ;sprintf@sp stored from wreg
  1848  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1849  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1850  04D4  00D0               	movwf	sprintf@sp
  1851                           
  1852                           ;doprnt.c: 494: va_list ap;
  1853                           ;doprnt.c: 499: signed char c;
  1854                           ;doprnt.c: 506: signed char prec;
  1855                           ;doprnt.c: 508: unsigned char flag;
  1856                           ;doprnt.c: 523: union {
  1857                           ;doprnt.c: 524: unsigned long vd;
  1858                           ;doprnt.c: 525: double integ;
  1859                           ;doprnt.c: 526: } tmpval;
  1860                           ;doprnt.c: 528: unsigned int val;
  1861                           ;doprnt.c: 529: unsigned len;
  1862                           ;doprnt.c: 530: const char * cp;
  1863                           ;doprnt.c: 533: *ap = __va_start();
  1864  04D5  3046               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1865  04D6  00C8               	movwf	??_sprintf
  1866  04D7  0848               	movf	??_sprintf,w
  1867  04D8  00CB               	movwf	sprintf@ap
  1868  04D9                     l1738:	
  1869                           ;doprnt.c: 536: while(c = *f++) {
  1870                           
  1871  04D9  0845               	movf	sprintf@f+1,w
  1872  04DA  00C9               	movwf	??_sprintf+1
  1873  04DB  0844               	movf	sprintf@f,w
  1874  04DC  00C8               	movwf	??_sprintf
  1875  04DD  0AC4               	incf	sprintf@f,f
  1876  04DE  1903               	skipnz
  1877  04DF  0AC5               	incf	sprintf@f+1,f
  1878  04E0  0849               	movf	??_sprintf+1,w
  1879  04E1  00FF               	movwf	127
  1880  04E2  0848               	movf	??_sprintf,w
  1881  04E3  0084               	movwf	4
  1882  04E4  120A  158A  2000  120A  118A  	fcall	stringtab
  1883  04E9  00CA               	movwf	??_sprintf+2
  1884  04EA  084A               	movf	??_sprintf+2,w
  1885  04EB  00D1               	movwf	sprintf@c
  1886  04EC  0851               	movf	sprintf@c,w
  1887  04ED  1903               	btfsc	3,2
  1888  04EE  2DB5               	goto	l1740
  1889                           
  1890                           ;doprnt.c: 538: if(c != '%')
  1891  04EF  3025               	movlw	37
  1892  04F0  0651               	xorwf	sprintf@c,w
  1893  04F1  1903               	btfsc	3,2
  1894  04F2  2CFF               	goto	l1694
  1895                           
  1896                           ;doprnt.c: 540: {
  1897                           ;doprnt.c: 541: ((*sp++ = (c)));
  1898  04F3  0851               	movf	sprintf@c,w
  1899  04F4  00C8               	movwf	??_sprintf
  1900  04F5  0850               	movf	sprintf@sp,w
  1901  04F6  0084               	movwf	4
  1902  04F7  0848               	movf	??_sprintf,w
  1903  04F8  1383               	bcf	3,7	;select IRP bank0
  1904  04F9  0080               	movwf	0
  1905  04FA  3001               	movlw	1
  1906  04FB  00C8               	movwf	??_sprintf
  1907  04FC  0848               	movf	??_sprintf,w
  1908  04FD  07D0               	addwf	sprintf@sp,f
  1909                           
  1910                           ;doprnt.c: 542: continue;
  1911  04FE  2CD9               	goto	l1738
  1912  04FF                     l1694:	
  1913                           
  1914                           ;doprnt.c: 543: }
  1915                           ;doprnt.c: 548: flag = 0;
  1916  04FF  01CC               	clrf	sprintf@flag
  1917                           
  1918                           ;doprnt.c: 822: }
  1919                           
  1920                           ;doprnt.c: 813: continue;
  1921                           
  1922                           ;doprnt.c: 802: default:
  1923                           
  1924                           ;doprnt.c: 698: case 'i':
  1925                           ;doprnt.c: 699: break;
  1926                           
  1927                           ;doprnt.c: 697: case 'd':
  1928                           
  1929                           ;doprnt.c: 638: goto alldone;
  1930                           
  1931                           ;doprnt.c: 637: case 0:
  1932                           
  1933                           ;doprnt.c: 635: switch(c = *f++) {
  1934  0500  0845               	movf	sprintf@f+1,w
  1935  0501  00C9               	movwf	??_sprintf+1
  1936  0502  0844               	movf	sprintf@f,w
  1937  0503  00C8               	movwf	??_sprintf
  1938  0504  0AC4               	incf	sprintf@f,f
  1939  0505  1903               	skipnz
  1940  0506  0AC5               	incf	sprintf@f+1,f
  1941  0507  0849               	movf	??_sprintf+1,w
  1942  0508  00FF               	movwf	127
  1943  0509  0848               	movf	??_sprintf,w
  1944  050A  0084               	movwf	4
  1945  050B  120A  158A  2000  120A  118A  	fcall	stringtab
  1946  0510  00D1               	movwf	sprintf@c
  1947                           
  1948                           ; Switch size 1, requested type "space"
  1949                           ; Number of cases is 3, Range of values is 0 to 105
  1950                           ; switch strategies available:
  1951                           ; Name         Instructions Cycles
  1952                           ; simple_byte           10     6 (average)
  1953                           ; jumptable            260     6 (fixed)
  1954                           ;	Chosen strategy is simple_byte
  1955  0511  3A00               	xorlw	0	; case 0
  1956  0512  1903               	skipnz
  1957  0513  2DB5               	goto	l1740
  1958  0514  3A64               	xorlw	100	; case 100
  1959  0515  1903               	skipnz
  1960  0516  2D1B               	goto	l1700
  1961  0517  3A0D               	xorlw	13	; case 105
  1962  0518  1903               	skipnz
  1963  0519  2D1B               	goto	l1700
  1964  051A  2CD9               	goto	l1738
  1965  051B                     l1700:	
  1966                           
  1967                           ;doprnt.c: 1253: {
  1968                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1969  051B  084B               	movf	sprintf@ap,w
  1970  051C  0084               	movwf	4
  1971  051D  1383               	bcf	3,7	;select IRP bank0
  1972  051E  0800               	movf	0,w
  1973  051F  00CE               	movwf	sprintf@val
  1974  0520  0A84               	incf	4,f
  1975  0521  0800               	movf	0,w
  1976  0522  00CF               	movwf	sprintf@val+1
  1977  0523  3002               	movlw	2
  1978  0524  00C8               	movwf	??_sprintf
  1979  0525  0848               	movf	??_sprintf,w
  1980  0526  07CB               	addwf	sprintf@ap,f
  1981                           
  1982                           ;doprnt.c: 1261: if((int)val < 0) {
  1983  0527  1FCF               	btfss	sprintf@val+1,7
  1984  0528  2D32               	goto	l1710
  1985                           
  1986                           ;doprnt.c: 1262: flag |= 0x03;
  1987  0529  3003               	movlw	3
  1988  052A  00C8               	movwf	??_sprintf
  1989  052B  0848               	movf	??_sprintf,w
  1990  052C  04CC               	iorwf	sprintf@flag,f
  1991                           
  1992                           ;doprnt.c: 1263: val = -val;
  1993  052D  09CE               	comf	sprintf@val,f
  1994  052E  09CF               	comf	sprintf@val+1,f
  1995  052F  0ACE               	incf	sprintf@val,f
  1996  0530  1903               	skipnz
  1997  0531  0ACF               	incf	sprintf@val+1,f
  1998  0532                     l1710:	
  1999                           
  2000                           ;doprnt.c: 1264: }
  2001                           ;doprnt.c: 1266: }
  2002                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2003  0532  01D1               	clrf	sprintf@c
  2004  0533  0AD1               	incf	sprintf@c,f
  2005  0534  3005               	movlw	5
  2006  0535  0651               	xorwf	sprintf@c,w
  2007  0536  1903               	btfsc	3,2
  2008  0537  2D5D               	goto	l1722
  2009  0538                     l1716:	
  2010                           
  2011                           ;doprnt.c: 1306: if(val < dpowers[c])
  2012  0538  0851               	movf	sprintf@c,w
  2013  0539  00C8               	movwf	??_sprintf
  2014  053A  0748               	addwf	??_sprintf,w
  2015  053B  3E12               	addlw	low (_dpowers| (0+32768))
  2016  053C  0084               	movwf	4
  2017  053D  3088               	movlw	high (_dpowers| (0+32768))
  2018  053E  1803               	skipnc
  2019  053F  3E01               	addlw	1
  2020  0540  00FF               	movwf	127
  2021  0541  120A  158A  2000  120A  118A  	fcall	stringtab
  2022  0546  00C9               	movwf	??_sprintf+1
  2023  0547  120A  158A  2000  120A  118A  	fcall	stringtab
  2024  054C  00CA               	movwf	??_sprintf+2
  2025  054D  084A               	movf	??_sprintf+2,w
  2026  054E  024F               	subwf	sprintf@val+1,w
  2027  054F  1D03               	skipz
  2028  0550  2D53               	goto	u1525
  2029  0551  0849               	movf	??_sprintf+1,w
  2030  0552  024E               	subwf	sprintf@val,w
  2031  0553                     u1525:	
  2032  0553  1C03               	btfss	3,0
  2033  0554  2D5D               	goto	l1722
  2034                           
  2035                           ;doprnt.c: 1307: break;
  2036  0555  3001               	movlw	1
  2037  0556  00C8               	movwf	??_sprintf
  2038  0557  0848               	movf	??_sprintf,w
  2039  0558  07D1               	addwf	sprintf@c,f
  2040  0559  3005               	movlw	5
  2041  055A  0651               	xorwf	sprintf@c,w
  2042  055B  1D03               	btfss	3,2
  2043  055C  2D38               	goto	l1716
  2044  055D                     l1722:	
  2045                           
  2046                           ;doprnt.c: 1422: {
  2047                           ;doprnt.c: 1438: if(flag & 0x03)
  2048  055D  084C               	movf	sprintf@flag,w
  2049  055E  3903               	andlw	3
  2050  055F  1903               	btfsc	3,2
  2051  0560  2D6C               	goto	l1728
  2052                           
  2053                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2054  0561  302D               	movlw	45
  2055  0562  00C8               	movwf	??_sprintf
  2056  0563  0850               	movf	sprintf@sp,w
  2057  0564  0084               	movwf	4
  2058  0565  0848               	movf	??_sprintf,w
  2059  0566  1383               	bcf	3,7	;select IRP bank0
  2060  0567  0080               	movwf	0
  2061  0568  3001               	movlw	1
  2062  0569  00C8               	movwf	??_sprintf
  2063  056A  0848               	movf	??_sprintf,w
  2064  056B  07D0               	addwf	sprintf@sp,f
  2065  056C                     l1728:	
  2066                           
  2067                           ;doprnt.c: 1469: }
  2068                           ;doprnt.c: 1472: prec = c;
  2069  056C  0851               	movf	sprintf@c,w
  2070  056D  00C8               	movwf	??_sprintf
  2071  056E  0848               	movf	??_sprintf,w
  2072  056F  00CD               	movwf	sprintf@prec
  2073  0570                     l1736:	
  2074                           ;doprnt.c: 1474: while(prec--) {
  2075                           
  2076  0570  30FF               	movlw	255
  2077  0571  00C8               	movwf	??_sprintf
  2078  0572  0848               	movf	??_sprintf,w
  2079  0573  07CD               	addwf	sprintf@prec,f
  2080  0574  0A4D               	incf	sprintf@prec,w
  2081  0575  1903               	btfsc	3,2
  2082  0576  2CD9               	goto	l1738
  2083                           
  2084                           ;doprnt.c: 1478: {
  2085                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2086  0577  300A               	movlw	10
  2087  0578  00F8               	movwf	___lwmod@divisor
  2088  0579  3000               	movlw	0
  2089  057A  00F9               	movwf	___lwmod@divisor+1
  2090  057B  084D               	movf	sprintf@prec,w
  2091  057C  00C8               	movwf	??_sprintf
  2092  057D  0748               	addwf	??_sprintf,w
  2093  057E  3E12               	addlw	low (_dpowers| (0+32768))
  2094  057F  0084               	movwf	4
  2095  0580  3088               	movlw	high (_dpowers| (0+32768))
  2096  0581  1803               	skipnc
  2097  0582  3E01               	addlw	1
  2098  0583  00FF               	movwf	127
  2099  0584  120A  158A  2000  120A  118A  	fcall	stringtab
  2100  0589  00F0               	movwf	___lwdiv@divisor
  2101  058A  120A  158A  2000  120A  118A  	fcall	stringtab
  2102  058F  00F1               	movwf	___lwdiv@divisor+1
  2103  0590  084F               	movf	sprintf@val+1,w
  2104  0591  00F3               	movwf	___lwdiv@dividend+1
  2105  0592  084E               	movf	sprintf@val,w
  2106  0593  00F2               	movwf	___lwdiv@dividend
  2107  0594  120A  118A  2150  120A  118A  	fcall	___lwdiv
  2108  0599  0871               	movf	?___lwdiv+1,w
  2109  059A  00FB               	movwf	___lwmod@dividend+1
  2110  059B  0870               	movf	?___lwdiv,w
  2111  059C  00FA               	movwf	___lwmod@dividend
  2112  059D  120A  118A  20E5  120A  118A  	fcall	___lwmod
  2113  05A2  0878               	movf	?___lwmod,w
  2114  05A3  3E30               	addlw	48
  2115  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  2116  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  2117  05A6  00C9               	movwf	??_sprintf+1
  2118  05A7  0849               	movf	??_sprintf+1,w
  2119  05A8  00D1               	movwf	sprintf@c
  2120                           
  2121                           ;doprnt.c: 1523: }
  2122                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2123  05A9  0851               	movf	sprintf@c,w
  2124  05AA  00C8               	movwf	??_sprintf
  2125  05AB  0850               	movf	sprintf@sp,w
  2126  05AC  0084               	movwf	4
  2127  05AD  0848               	movf	??_sprintf,w
  2128  05AE  1383               	bcf	3,7	;select IRP bank0
  2129  05AF  0080               	movwf	0
  2130  05B0  3001               	movlw	1
  2131  05B1  00C8               	movwf	??_sprintf
  2132  05B2  0848               	movf	??_sprintf,w
  2133  05B3  07D0               	addwf	sprintf@sp,f
  2134  05B4  2D70               	goto	l1736
  2135  05B5                     l1740:	
  2136                           ;doprnt.c: 1525: }
  2137                           ;doprnt.c: 1533: }
  2138                           ;doprnt.c: 1535: alldone:
  2139                           
  2140                           
  2141                           ;doprnt.c: 1538: *sp = 0;
  2142  05B5  0850               	movf	sprintf@sp,w
  2143  05B6  0084               	movwf	4
  2144  05B7  1383               	bcf	3,7	;select IRP bank0
  2145  05B8  0180               	clrf	0
  2146  05B9  0008               	return
  2147  05BA                     __end_of_sprintf:	
  2148                           ;doprnt.c: 1540: return 0;
  2149                           ;	Return value of _sprintf is never used
  2150                           
  2151                           
  2152                           	psect	text7
  2153  00E5                     __ptext7:	
  2154 ;; *************** function ___lwmod *****************
  2155 ;; Defined at:
  2156 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  divisor         2    8[COMMON] unsigned int 
  2159 ;;  dividend        2   10[COMMON] unsigned int 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  counter         1   13[COMMON] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  2    8[COMMON] unsigned int 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2, status,0
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2171 ;;      Params:         4       0       0       0       0
  2172 ;;      Locals:         1       0       0       0       0
  2173 ;;      Temps:          1       0       0       0       0
  2174 ;;      Totals:         6       0       0       0       0
  2175 ;;Total ram usage:        6 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_sprintf
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           
  2185                           ;psect for function ___lwmod
  2186  00E5                     ___lwmod:	
  2187                           
  2188                           ;incstack = 0
  2189                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2190  00E5  0878               	movf	___lwmod@divisor,w
  2191  00E6  0479               	iorwf	___lwmod@divisor+1,w
  2192  00E7  1903               	btfsc	3,2
  2193  00E8  2912               	goto	l1578
  2194  00E9  01FD               	clrf	___lwmod@counter
  2195  00EA  0AFD               	incf	___lwmod@counter,f
  2196  00EB                     l1568:	
  2197  00EB  1BF9               	btfsc	___lwmod@divisor+1,7
  2198  00EC  28F9               	goto	l1570
  2199  00ED  3001               	movlw	1
  2200  00EE                     u1305:	
  2201  00EE  1003               	clrc
  2202  00EF  0DF8               	rlf	___lwmod@divisor,f
  2203  00F0  0DF9               	rlf	___lwmod@divisor+1,f
  2204  00F1  3EFF               	addlw	-1
  2205  00F2  1D03               	skipz
  2206  00F3  28EE               	goto	u1305
  2207  00F4  3001               	movlw	1
  2208  00F5  00FC               	movwf	??___lwmod
  2209  00F6  087C               	movf	??___lwmod,w
  2210  00F7  07FD               	addwf	___lwmod@counter,f
  2211  00F8  28EB               	goto	l1568
  2212  00F9                     l1570:	
  2213  00F9  0879               	movf	___lwmod@divisor+1,w
  2214  00FA  027B               	subwf	___lwmod@dividend+1,w
  2215  00FB  1D03               	skipz
  2216  00FC  28FF               	goto	u1325
  2217  00FD  0878               	movf	___lwmod@divisor,w
  2218  00FE  027A               	subwf	___lwmod@dividend,w
  2219  00FF                     u1325:	
  2220  00FF  1C03               	skipc
  2221  0100  2907               	goto	l1574
  2222  0101  0878               	movf	___lwmod@divisor,w
  2223  0102  02FA               	subwf	___lwmod@dividend,f
  2224  0103  0879               	movf	___lwmod@divisor+1,w
  2225  0104  1C03               	skipc
  2226  0105  03FB               	decf	___lwmod@dividend+1,f
  2227  0106  02FB               	subwf	___lwmod@dividend+1,f
  2228  0107                     l1574:	
  2229  0107  3001               	movlw	1
  2230  0108                     u1335:	
  2231  0108  1003               	clrc
  2232  0109  0CF9               	rrf	___lwmod@divisor+1,f
  2233  010A  0CF8               	rrf	___lwmod@divisor,f
  2234  010B  3EFF               	addlw	-1
  2235  010C  1D03               	skipz
  2236  010D  2908               	goto	u1335
  2237  010E  3001               	movlw	1
  2238  010F  02FD               	subwf	___lwmod@counter,f
  2239  0110  1D03               	btfss	3,2
  2240  0111  28F9               	goto	l1570
  2241  0112                     l1578:	
  2242  0112  087B               	movf	___lwmod@dividend+1,w
  2243  0113  00F9               	movwf	?___lwmod+1
  2244  0114  087A               	movf	___lwmod@dividend,w
  2245  0115  00F8               	movwf	?___lwmod
  2246  0116  0008               	return
  2247  0117                     __end_of___lwmod:	
  2248                           
  2249                           	psect	text8
  2250  0150                     __ptext8:	
  2251 ;; *************** function ___lwdiv *****************
  2252 ;; Defined at:
  2253 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  divisor         2    0[COMMON] unsigned int 
  2256 ;;  dividend        2    2[COMMON] unsigned int 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  quotient        2    5[COMMON] unsigned int 
  2259 ;;  counter         1    7[COMMON] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    0[COMMON] unsigned int 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2269 ;;      Params:         4       0       0       0       0
  2270 ;;      Locals:         3       0       0       0       0
  2271 ;;      Temps:          1       0       0       0       0
  2272 ;;      Totals:         8       0       0       0       0
  2273 ;;Total ram usage:        8 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_sprintf
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           
  2283                           ;psect for function ___lwdiv
  2284  0150                     ___lwdiv:	
  2285                           
  2286                           ;incstack = 0
  2287                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2288  0150  01F5               	clrf	___lwdiv@quotient
  2289  0151  01F6               	clrf	___lwdiv@quotient+1
  2290  0152  0870               	movf	___lwdiv@divisor,w
  2291  0153  0471               	iorwf	___lwdiv@divisor+1,w
  2292  0154  1903               	btfsc	3,2
  2293  0155  2987               	goto	l1556
  2294  0156  01F7               	clrf	___lwdiv@counter
  2295  0157  0AF7               	incf	___lwdiv@counter,f
  2296  0158                     l1544:	
  2297  0158  1BF1               	btfsc	___lwdiv@divisor+1,7
  2298  0159  2966               	goto	l1546
  2299  015A  3001               	movlw	1
  2300  015B                     u1235:	
  2301  015B  1003               	clrc
  2302  015C  0DF0               	rlf	___lwdiv@divisor,f
  2303  015D  0DF1               	rlf	___lwdiv@divisor+1,f
  2304  015E  3EFF               	addlw	-1
  2305  015F  1D03               	skipz
  2306  0160  295B               	goto	u1235
  2307  0161  3001               	movlw	1
  2308  0162  00F4               	movwf	??___lwdiv
  2309  0163  0874               	movf	??___lwdiv,w
  2310  0164  07F7               	addwf	___lwdiv@counter,f
  2311  0165  2958               	goto	l1544
  2312  0166                     l1546:	
  2313  0166  3001               	movlw	1
  2314  0167                     u1255:	
  2315  0167  1003               	clrc
  2316  0168  0DF5               	rlf	___lwdiv@quotient,f
  2317  0169  0DF6               	rlf	___lwdiv@quotient+1,f
  2318  016A  3EFF               	addlw	-1
  2319  016B  1D03               	skipz
  2320  016C  2967               	goto	u1255
  2321  016D  0871               	movf	___lwdiv@divisor+1,w
  2322  016E  0273               	subwf	___lwdiv@dividend+1,w
  2323  016F  1D03               	skipz
  2324  0170  2973               	goto	u1265
  2325  0171  0870               	movf	___lwdiv@divisor,w
  2326  0172  0272               	subwf	___lwdiv@dividend,w
  2327  0173                     u1265:	
  2328  0173  1C03               	skipc
  2329  0174  297C               	goto	l1552
  2330  0175  0870               	movf	___lwdiv@divisor,w
  2331  0176  02F2               	subwf	___lwdiv@dividend,f
  2332  0177  0871               	movf	___lwdiv@divisor+1,w
  2333  0178  1C03               	skipc
  2334  0179  03F3               	decf	___lwdiv@dividend+1,f
  2335  017A  02F3               	subwf	___lwdiv@dividend+1,f
  2336  017B  1475               	bsf	___lwdiv@quotient,0
  2337  017C                     l1552:	
  2338  017C  3001               	movlw	1
  2339  017D                     u1275:	
  2340  017D  1003               	clrc
  2341  017E  0CF1               	rrf	___lwdiv@divisor+1,f
  2342  017F  0CF0               	rrf	___lwdiv@divisor,f
  2343  0180  3EFF               	addlw	-1
  2344  0181  1D03               	skipz
  2345  0182  297D               	goto	u1275
  2346  0183  3001               	movlw	1
  2347  0184  02F7               	subwf	___lwdiv@counter,f
  2348  0185  1D03               	btfss	3,2
  2349  0186  2966               	goto	l1546
  2350  0187                     l1556:	
  2351  0187  0876               	movf	___lwdiv@quotient+1,w
  2352  0188  00F1               	movwf	?___lwdiv+1
  2353  0189  0875               	movf	___lwdiv@quotient,w
  2354  018A  00F0               	movwf	?___lwdiv
  2355  018B  0008               	return
  2356  018C                     __end_of___lwdiv:	
  2357                           
  2358                           	psect	text9
  2359  0FF4                     __ptext9:	
  2360 ;; *************** function _ready *****************
  2361 ;; Defined at:
  2362 ;;		line 112 in file "gas.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;		None               void
  2369 ;; Registers used:
  2370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2376 ;;      Params:         0       0       0       0       0
  2377 ;;      Locals:         0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0
  2379 ;;      Totals:         0       0       0       0       0
  2380 ;;Total ram usage:        0 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    2
  2383 ;; This function calls:
  2384 ;;		_uart_response
  2385 ;; This function is called by:
  2386 ;;		_main
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function _ready
  2392  0FF4                     _ready:	
  2393                           
  2394                           ;gas.c: 113: return (uart_response() == 6);
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in _ready: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2398  0FF4  120A  118A  2369  120A  158A  	fcall	_uart_response
  2399  0FF9  3A06               	xorlw	6
  2400  0FFA  1903               	skipnz
  2401  0FFB  2FFE               	goto	l1664
  2402  0FFC  1003               	clrc
  2403  0FFD  0008               	return
  2404  0FFE                     l1664:	
  2405  0FFE  1403               	setc
  2406  0FFF  0008               	return
  2407  1000                     __end_of_ready:	
  2408                           
  2409                           	psect	text10
  2410  0369                     __ptext10:	
  2411 ;; *************** function _uart_response *****************
  2412 ;; Defined at:
  2413 ;;		line 67 in file "gas.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;		None
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  i               1   21[BANK0 ] unsigned char 
  2418 ;;  strings        12    0[BANK0 ] PTR const unsigned char 
  2419 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(6), 
  2420 ;;		 -> STR_2(5), STR_1(6), 
  2421 ;;  so_far          6   12[BANK0 ] unsigned char [6]
  2422 ;;  continue_loo    1   20[BANK0 ] unsigned char 
  2423 ;;  response        1   19[BANK0 ] unsigned char 
  2424 ;;  received        1   18[BANK0 ] unsigned char 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      unsigned char 
  2427 ;; Registers used:
  2428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2434 ;;      Params:         0       0       0       0       0
  2435 ;;      Locals:         0      22       0       0       0
  2436 ;;      Temps:          4       0       0       0       0
  2437 ;;      Totals:         4      22       0       0       0
  2438 ;;Total ram usage:       26 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    1
  2441 ;; This function calls:
  2442 ;;		_uart_rx
  2443 ;; This function is called by:
  2444 ;;		_value1
  2445 ;;		_value2
  2446 ;;		_ready
  2447 ;;		_value3
  2448 ;;		_value4
  2449 ;;		_value5
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           
  2454                           ;psect for function _uart_response
  2455  0369                     _uart_response:	
  2456                           
  2457                           ;gas.c: 68: unsigned char so_far[6] = {0,0,0,0,0,0};
  2458                           
  2459                           ;incstack = 0
  2460                           ; Regs used in _uart_response: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2461  0369  3050               	movlw	uart_response@so_far& (0+255)
  2462  036A  0084               	movwf	4
  2463  036B  1283               	bcf	3,5	;RP0=0, select bank0
  2464  036C  1303               	bcf	3,6	;RP1=0, select bank0
  2465  036D  0820               	movf	uart_response@F1319,w
  2466  036E  1383               	bcf	3,7	;select IRP bank0
  2467  036F  0080               	movwf	0
  2468  0370  0A84               	incf	4,f
  2469  0371  0821               	movf	uart_response@F1319+1,w
  2470  0372  0080               	movwf	0
  2471  0373  0A84               	incf	4,f
  2472  0374  0822               	movf	uart_response@F1319+2,w
  2473  0375  0080               	movwf	0
  2474  0376  0A84               	incf	4,f
  2475  0377  0823               	movf	uart_response@F1319+3,w
  2476  0378  0080               	movwf	0
  2477  0379  0A84               	incf	4,f
  2478  037A  0824               	movf	uart_response@F1319+4,w
  2479  037B  0080               	movwf	0
  2480  037C  0A84               	incf	4,f
  2481  037D  0825               	movf	uart_response@F1319+5,w
  2482  037E  0080               	movwf	0
  2483                           
  2484                           ;gas.c: 69: unsigned const char lengths[6] = {5,4,5,4,4,5};
  2485                           ;gas.c: 70: unsigned const char* strings[6] = {"temp:", "gas:", "pres:", "lat:", "lon:",
      +                           "READY"};
  2486  037F  3044               	movlw	uart_response@strings& (0+255)
  2487  0380  0084               	movwf	4
  2488  0381  30A0               	movlw	low uart_response@F1322
  2489  0382  00F0               	movwf	??_uart_response
  2490  0383  0804               	movf	4,w
  2491  0384  00F1               	movwf	??_uart_response+1
  2492  0385  300C               	movlw	12
  2493  0386  00F2               	movwf	??_uart_response+2
  2494  0387                     u1040:	
  2495  0387  0870               	movf	??_uart_response,w
  2496  0388  0084               	movwf	4
  2497  0389  1383               	bcf	3,7	;select IRP bank1
  2498  038A  0800               	movf	0,w
  2499  038B  00F3               	movwf	??_uart_response+3
  2500  038C  0AF0               	incf	??_uart_response,f
  2501  038D  0871               	movf	??_uart_response+1,w
  2502  038E  0084               	movwf	4
  2503  038F  0873               	movf	??_uart_response+3,w
  2504  0390  0080               	movwf	0
  2505  0391  0AF1               	incf	??_uart_response+1,f
  2506  0392  0BF2               	decfsz	??_uart_response+2,f
  2507  0393  2B87               	goto	u1040
  2508                           
  2509                           ;gas.c: 71: unsigned const char responses[6] = {1, 2, 3, 4 , 5 , 6};
  2510                           ;gas.c: 72: unsigned char received;
  2511                           ;gas.c: 73: unsigned char response;
  2512                           ;gas.c: 74: char continue_loop = 1;
  2513  0394  01D8               	clrf	uart_response@continue_loop
  2514  0395  0AD8               	incf	uart_response@continue_loop,f
  2515  0396                     l1496:	
  2516                           ;gas.c: 75: while (continue_loop)
  2517                           
  2518  0396  0858               	movf	uart_response@continue_loop,w
  2519  0397  1903               	btfsc	3,2
  2520  0398  2BFD               	goto	l1498
  2521                           
  2522                           ;gas.c: 76: {
  2523                           ;gas.c: 77: received = uart_rx();
  2524  0399  120A  158A  27DF  120A  118A  	fcall	_uart_rx
  2525  039E  00F0               	movwf	??_uart_response
  2526  039F  0870               	movf	??_uart_response,w
  2527  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2528  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2529  03A2  00D6               	movwf	uart_response@received
  2530                           
  2531                           ;gas.c: 78: for (unsigned char i = 0; i < 6; i++)
  2532  03A3  01D9               	clrf	uart_response@i
  2533  03A4                     L3:	
  2534  03A4  3006               	movlw	6
  2535  03A5  0259               	subwf	uart_response@i,w
  2536  03A6  1803               	btfsc	3,0
  2537  03A7  2B96               	goto	l1496
  2538                           
  2539                           ;gas.c: 79: {
  2540                           ;gas.c: 80: if (strings[i][so_far[i]] == received)
  2541  03A8  0859               	movf	uart_response@i,w
  2542  03A9  00F0               	movwf	??_uart_response
  2543  03AA  0770               	addwf	??_uart_response,w
  2544  03AB  3E44               	addlw	(low (uart_response@strings| 0))& (0+255)
  2545  03AC  0084               	movwf	4
  2546  03AD  1383               	bcf	3,7	;select IRP bank0
  2547  03AE  0800               	movf	0,w
  2548  03AF  00F1               	movwf	??_uart_response+1
  2549  03B0  0A84               	incf	4,f
  2550  03B1  0800               	movf	0,w
  2551  03B2  00F2               	movwf	??_uart_response+2
  2552  03B3  0859               	movf	uart_response@i,w
  2553  03B4  3E50               	addlw	(low (uart_response@so_far| 0))& (0+255)
  2554  03B5  0084               	movwf	4
  2555  03B6  0800               	movf	0,w
  2556  03B7  0771               	addwf	??_uart_response+1,w
  2557  03B8  0084               	movwf	4
  2558  03B9  0872               	movf	??_uart_response+2,w
  2559  03BA  1803               	skipnc
  2560  03BB  0A72               	incf	??_uart_response+2,w
  2561  03BC  00FF               	movwf	127
  2562  03BD  120A  158A  2000  120A  118A  	fcall	stringtab
  2563  03C2  0656               	xorwf	uart_response@received,w
  2564  03C3  1D03               	skipz
  2565  03C4  2BF3               	goto	l1490
  2566                           
  2567                           ;gas.c: 81: {
  2568                           ;gas.c: 82: so_far[i]++;
  2569  03C5  3001               	movlw	1
  2570  03C6  00F0               	movwf	??_uart_response
  2571  03C7  0859               	movf	uart_response@i,w
  2572  03C8  3E50               	addlw	(low (uart_response@so_far| 0))& (0+255)
  2573  03C9  0084               	movwf	4
  2574  03CA  0870               	movf	??_uart_response,w
  2575  03CB  1383               	bcf	3,7	;select IRP bank0
  2576  03CC  0780               	addwf	0,f
  2577                           
  2578                           ;gas.c: 83: if (so_far[i] == lengths[i])
  2579  03CD  0859               	movf	uart_response@i,w
  2580  03CE  3E22               	addlw	low (uart_response@lengths| (0+32768))
  2581  03CF  0084               	movwf	4
  2582  03D0  3088               	movlw	high (uart_response@lengths| (0+32768))
  2583  03D1  1803               	skipnc
  2584  03D2  3E01               	addlw	1
  2585  03D3  00FF               	movwf	127
  2586  03D4  120A  158A  2000  120A  118A  	fcall	stringtab
  2587  03D9  00F0               	movwf	??_uart_response
  2588  03DA  0859               	movf	uart_response@i,w
  2589  03DB  3E50               	addlw	(low (uart_response@so_far| 0))& (0+255)
  2590  03DC  0084               	movwf	4
  2591  03DD  1383               	bcf	3,7	;select IRP bank0
  2592  03DE  0800               	movf	0,w
  2593  03DF  0670               	xorwf	??_uart_response,w
  2594  03E0  1D03               	skipz
  2595  03E1  2BF8               	goto	l1492
  2596                           
  2597                           ;gas.c: 84: {
  2598                           ;gas.c: 85: response = responses[i];
  2599  03E2  0859               	movf	uart_response@i,w
  2600  03E3  3E1C               	addlw	low (uart_response@responses| (0+32768))
  2601  03E4  0084               	movwf	4
  2602  03E5  3088               	movlw	high (uart_response@responses| (0+32768))
  2603  03E6  1803               	skipnc
  2604  03E7  3E01               	addlw	1
  2605  03E8  00FF               	movwf	127
  2606  03E9  120A  158A  2000  120A  118A  	fcall	stringtab
  2607  03EE  00F0               	movwf	??_uart_response
  2608  03EF  0870               	movf	??_uart_response,w
  2609  03F0  00D7               	movwf	uart_response@response
  2610                           
  2611                           ;gas.c: 86: continue_loop = 0;
  2612  03F1  01D8               	clrf	uart_response@continue_loop
  2613                           
  2614                           ;gas.c: 87: }
  2615                           ;gas.c: 88: }
  2616  03F2  2BF8               	goto	l1492
  2617  03F3                     l1490:	
  2618                           
  2619                           ;gas.c: 89: else
  2620                           ;gas.c: 90: {
  2621                           ;gas.c: 91: so_far[i] = 0;
  2622  03F3  0859               	movf	uart_response@i,w
  2623  03F4  3E50               	addlw	(low (uart_response@so_far| 0))& (0+255)
  2624  03F5  0084               	movwf	4
  2625  03F6  1383               	bcf	3,7	;select IRP bank0
  2626  03F7  0180               	clrf	0
  2627  03F8                     l1492:	
  2628  03F8  3001               	movlw	1
  2629  03F9  00F0               	movwf	??_uart_response
  2630  03FA  0870               	movf	??_uart_response,w
  2631  03FB  07D9               	addwf	uart_response@i,f
  2632  03FC  2BA4               	goto	L3
  2633  03FD                     l1498:	
  2634                           
  2635                           ;gas.c: 92: }
  2636                           ;gas.c: 93: }
  2637                           ;gas.c: 94: }
  2638                           ;gas.c: 95: return response;
  2639  03FD  0857               	movf	uart_response@response,w
  2640  03FE  0008               	return
  2641  03FF                     __end_of_uart_response:	
  2642                           
  2643                           	psect	text11
  2644  0FDF                     __ptext11:	
  2645 ;; *************** function _uart_rx *****************
  2646 ;; Defined at:
  2647 ;;		line 57 in file "gas.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      unsigned char 
  2654 ;; Registers used:
  2655 ;;		wreg
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2661 ;;      Params:         0       0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0
  2664 ;;      Totals:         0       0       0       0       0
  2665 ;;Total ram usage:        0 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_uart_response
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           
  2675                           ;psect for function _uart_rx
  2676  0FDF                     _uart_rx:	
  2677                           
  2678                           ;gas.c: 58: if(OERR)
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in _uart_rx: [wreg]
  2682  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  2683  0FE0  1303               	bcf	3,6	;RP1=0, select bank0
  2684  0FE1  1C98               	btfss	24,1	;volatile
  2685  0FE2  2FE5               	goto	l133
  2686                           
  2687                           ;gas.c: 59: {
  2688                           ;gas.c: 60: CREN = 0;
  2689  0FE3  1218               	bcf	24,4	;volatile
  2690                           
  2691                           ;gas.c: 61: CREN = 1;
  2692  0FE4  1618               	bsf	24,4	;volatile
  2693  0FE5                     l133:	
  2694                           ;gas.c: 62: }
  2695                           ;gas.c: 63: while(!RCIF);
  2696                           
  2697  0FE5  1E8C               	btfss	12,5	;volatile
  2698  0FE6  2FE5               	goto	l133
  2699                           
  2700                           ;gas.c: 64: return RCREG;
  2701  0FE7  081A               	movf	26,w	;volatile
  2702  0FE8  0008               	return
  2703  0FE9                     __end_of_uart_rx:	
  2704                           
  2705                           	psect	text12
  2706  00B5                     __ptext12:	
  2707 ;; *************** function _adc_read *****************
  2708 ;; Defined at:
  2709 ;;		line 120 in file "gas.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  channel         1    wreg     unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  channel         1    4[COMMON] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  2    0[COMMON] unsigned int 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2723 ;;      Params:         2       0       0       0       0
  2724 ;;      Locals:         1       0       0       0       0
  2725 ;;      Temps:          2       0       0       0       0
  2726 ;;      Totals:         5       0       0       0       0
  2727 ;;Total ram usage:        5 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           
  2737                           ;psect for function _adc_read
  2738  00B5                     _adc_read:	
  2739                           
  2740                           ;incstack = 0
  2741                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  2742                           ;adc_read@channel stored from wreg
  2743  00B5  00F4               	movwf	adc_read@channel
  2744                           
  2745                           ;gas.c: 121: if(channel > 7)
  2746  00B6  3008               	movlw	8
  2747  00B7  0274               	subwf	adc_read@channel,w
  2748  00B8  1C03               	skipc
  2749  00B9  28BD               	goto	l1676
  2750                           
  2751                           ;gas.c: 122: return 0;
  2752  00BA  01F0               	clrf	?_adc_read
  2753  00BB  01F1               	clrf	?_adc_read+1
  2754  00BC  0008               	return
  2755  00BD                     l1676:	
  2756                           
  2757                           ;gas.c: 124: ADCON0 &= 0xC5;
  2758  00BD  30C5               	movlw	197
  2759  00BE  00F2               	movwf	??_adc_read
  2760  00BF  0872               	movf	??_adc_read,w
  2761  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  2762  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  2763  00C2  059F               	andwf	31,f	;volatile
  2764                           
  2765                           ;gas.c: 125: ADCON0 |= channel<<3;
  2766  00C3  0874               	movf	adc_read@channel,w
  2767  00C4  00F2               	movwf	??_adc_read
  2768  00C5  3002               	movlw	2
  2769  00C6                     u1475:	
  2770  00C6  1003               	clrc
  2771  00C7  0DF2               	rlf	??_adc_read,f
  2772  00C8  3EFF               	addlw	-1
  2773  00C9  1D03               	skipz
  2774  00CA  28C6               	goto	u1475
  2775  00CB  1003               	clrc
  2776  00CC  0D72               	rlf	??_adc_read,w
  2777  00CD  00F3               	movwf	??_adc_read+1
  2778  00CE  0873               	movf	??_adc_read+1,w
  2779  00CF  049F               	iorwf	31,f	;volatile
  2780                           
  2781                           ;gas.c: 126: _delay((unsigned long)((2)*(20000000/4000.0)));
  2782  00D0  300D               	movlw	13
  2783  00D1  00F3               	movwf	??_adc_read+1
  2784  00D2  30FB               	movlw	251
  2785  00D3  00F2               	movwf	??_adc_read
  2786  00D4                     u1947:	
  2787  00D4  0BF2               	decfsz	??_adc_read,f
  2788  00D5  28D4               	goto	u1947
  2789  00D6  0BF3               	decfsz	??_adc_read+1,f
  2790  00D7  28D4               	goto	u1947
  2791  00D8  28D9               	nop2
  2792                           
  2793                           ;gas.c: 127: GO_nDONE = 1;
  2794  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2795  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  2796  00DB  151F               	bsf	31,2	;volatile
  2797  00DC                     l181:	
  2798                           ;gas.c: 128: while(GO_nDONE);
  2799                           
  2800  00DC  191F               	btfsc	31,2	;volatile
  2801  00DD  28DC               	goto	l181
  2802                           
  2803                           ;gas.c: 129: return ((ADRESH<<8)+ADRESL);
  2804  00DE  081E               	movf	30,w	;volatile
  2805  00DF  00F1               	movwf	?_adc_read+1
  2806  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  2807  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  2808  00E2  081E               	movf	30,w	;volatile
  2809  00E3  00F0               	movwf	?_adc_read
  2810  00E4  0008               	return
  2811  00E5                     __end_of_adc_read:	
  2812                           
  2813                           	psect	text13
  2814  0FD6                     __ptext13:	
  2815 ;; *************** function _adc_init *****************
  2816 ;; Defined at:
  2817 ;;		line 116 in file "gas.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2831 ;;      Params:         0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0
  2834 ;;      Totals:         0       0       0       0       0
  2835 ;;Total ram usage:        0 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _adc_init
  2846  0FD6                     _adc_init:	
  2847                           
  2848                           ;gas.c: 117: ADCON0 = 0x81;
  2849                           
  2850                           ;incstack = 0
  2851                           ; Regs used in _adc_init: [wreg]
  2852  0FD6  3081               	movlw	129
  2853  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0FD9  009F               	movwf	31	;volatile
  2856                           
  2857                           ;gas.c: 118: ADCON1 = 0xC0;
  2858  0FDA  30C0               	movlw	192
  2859  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  2860  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  2861  0FDD  009F               	movwf	31	;volatile
  2862  0FDE  0008               	return
  2863  0FDF                     __end_of_adc_init:	
  2864                           
  2865                           	psect	text14
  2866  0058                     __ptext14:	
  2867 ;; *************** function ___lwtoft *****************
  2868 ;; Defined at:
  2869 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  c               2    8[COMMON] unsigned int 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  3    8[COMMON] float 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         3       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0
  2885 ;;      Temps:          1       0       0       0       0
  2886 ;;      Totals:         4       0       0       0       0
  2887 ;;Total ram usage:        4 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    1
  2890 ;; This function calls:
  2891 ;;		___ftpack
  2892 ;; This function is called by:
  2893 ;;		_main
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           
  2898                           ;psect for function ___lwtoft
  2899  0058                     ___lwtoft:	
  2900                           
  2901                           ;incstack = 0
  2902                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2903  0058  0878               	movf	___lwtoft@c,w
  2904  0059  00F0               	movwf	___ftpack@arg
  2905  005A  0879               	movf	___lwtoft@c+1,w
  2906  005B  00F1               	movwf	___ftpack@arg+1
  2907  005C  01F2               	clrf	___ftpack@arg+2
  2908  005D  308E               	movlw	142
  2909  005E  00FB               	movwf	??___lwtoft
  2910  005F  087B               	movf	??___lwtoft,w
  2911  0060  00F3               	movwf	___ftpack@exp
  2912  0061  01F4               	clrf	___ftpack@sign
  2913  0062  120A  118A  226F   	fcall	___ftpack
  2914  0065  0870               	movf	?___ftpack,w
  2915  0066  00F8               	movwf	?___lwtoft
  2916  0067  0871               	movf	?___ftpack+1,w
  2917  0068  00F9               	movwf	?___lwtoft+1
  2918  0069  0872               	movf	?___ftpack+2,w
  2919  006A  00FA               	movwf	?___lwtoft+2
  2920  006B  0008               	return
  2921  006C                     __end_of___lwtoft:	
  2922                           
  2923                           	psect	text15
  2924  02DB                     __ptext15:	
  2925 ;; *************** function ___fttol *****************
  2926 ;; Defined at:
  2927 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  f1              3   16[BANK0 ] float 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  lval            4   25[BANK0 ] unsigned long 
  2932 ;;  exp1            1   29[BANK0 ] unsigned char 
  2933 ;;  sign1           1   24[BANK0 ] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  4   16[BANK0 ] long 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2943 ;;      Params:         0       4       0       0       0
  2944 ;;      Locals:         0       6       0       0       0
  2945 ;;      Temps:          0       4       0       0       0
  2946 ;;      Totals:         0      14       0       0       0
  2947 ;;Total ram usage:       14 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           
  2957                           ;psect for function ___fttol
  2958  02DB                     ___fttol:	
  2959                           
  2960                           ;incstack = 0
  2961                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2962  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2963  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2964  02DD  0854               	movf	___fttol@f1,w
  2965  02DE  00D8               	movwf	??___fttol
  2966  02DF  0855               	movf	___fttol@f1+1,w
  2967  02E0  00D9               	movwf	??___fttol+1
  2968  02E1  0856               	movf	___fttol@f1+2,w
  2969  02E2  00DA               	movwf	??___fttol+2
  2970  02E3  1003               	clrc
  2971  02E4  0D59               	rlf	??___fttol+1,w
  2972  02E5  0D5A               	rlf	??___fttol+2,w
  2973  02E6  00DB               	movwf	??___fttol+3
  2974  02E7  085B               	movf	??___fttol+3,w
  2975  02E8  00E1               	movwf	___fttol@exp1
  2976  02E9  0861               	movf	___fttol@exp1,w
  2977  02EA  1D03               	btfss	3,2
  2978  02EB  2AF5               	goto	l1800
  2979  02EC  3000               	movlw	0
  2980  02ED  00D7               	movwf	?___fttol+3
  2981  02EE  3000               	movlw	0
  2982  02EF  00D6               	movwf	?___fttol+2
  2983  02F0  3000               	movlw	0
  2984  02F1  00D5               	movwf	?___fttol+1
  2985  02F2  3000               	movlw	0
  2986  02F3  00D4               	movwf	?___fttol
  2987  02F4  0008               	return
  2988  02F5                     l1800:	
  2989  02F5  0854               	movf	___fttol@f1,w
  2990  02F6  00D8               	movwf	??___fttol
  2991  02F7  0855               	movf	___fttol@f1+1,w
  2992  02F8  00D9               	movwf	??___fttol+1
  2993  02F9  0856               	movf	___fttol@f1+2,w
  2994  02FA  00DA               	movwf	??___fttol+2
  2995  02FB  3017               	movlw	23
  2996  02FC                     u1725:	
  2997  02FC  1003               	clrc
  2998  02FD  0CDA               	rrf	??___fttol+2,f
  2999  02FE  0CD9               	rrf	??___fttol+1,f
  3000  02FF  0CD8               	rrf	??___fttol,f
  3001  0300  3EFF               	addlw	-1
  3002  0301  1D03               	skipz
  3003  0302  2AFC               	goto	u1725
  3004  0303  0858               	movf	??___fttol,w
  3005  0304  00DB               	movwf	??___fttol+3
  3006  0305  085B               	movf	??___fttol+3,w
  3007  0306  00DC               	movwf	___fttol@sign1
  3008  0307  17D5               	bsf	___fttol@f1+1,7
  3009  0308  30FF               	movlw	255
  3010  0309  05D4               	andwf	___fttol@f1,f
  3011  030A  30FF               	movlw	255
  3012  030B  05D5               	andwf	___fttol@f1+1,f
  3013  030C  3000               	movlw	0
  3014  030D  05D6               	andwf	___fttol@f1+2,f
  3015  030E  0854               	movf	___fttol@f1,w
  3016  030F  00DD               	movwf	___fttol@lval
  3017  0310  0855               	movf	___fttol@f1+1,w
  3018  0311  00DE               	movwf	___fttol@lval+1
  3019  0312  0856               	movf	___fttol@f1+2,w
  3020  0313  00DF               	movwf	___fttol@lval+2
  3021  0314  01E0               	clrf	___fttol@lval+3
  3022  0315  308E               	movlw	142
  3023  0316  02E1               	subwf	___fttol@exp1,f
  3024  0317  1FE1               	btfss	___fttol@exp1,7
  3025  0318  2B37               	goto	l1820
  3026  0319  0861               	movf	___fttol@exp1,w
  3027  031A  3A80               	xorlw	128
  3028  031B  3E8F               	addlw	143
  3029  031C  1803               	skipnc
  3030  031D  2B27               	goto	l1818
  3031  031E  3000               	movlw	0
  3032  031F  00D7               	movwf	?___fttol+3
  3033  0320  3000               	movlw	0
  3034  0321  00D6               	movwf	?___fttol+2
  3035  0322  3000               	movlw	0
  3036  0323  00D5               	movwf	?___fttol+1
  3037  0324  3000               	movlw	0
  3038  0325  00D4               	movwf	?___fttol
  3039  0326  0008               	return
  3040  0327                     l1818:	
  3041  0327  3001               	movlw	1
  3042  0328                     u1755:	
  3043  0328  1003               	clrc
  3044  0329  0CE0               	rrf	___fttol@lval+3,f
  3045  032A  0CDF               	rrf	___fttol@lval+2,f
  3046  032B  0CDE               	rrf	___fttol@lval+1,f
  3047  032C  0CDD               	rrf	___fttol@lval,f
  3048  032D  3EFF               	addlw	-1
  3049  032E  1D03               	skipz
  3050  032F  2B28               	goto	u1755
  3051  0330  3001               	movlw	1
  3052  0331  00D8               	movwf	??___fttol
  3053  0332  0858               	movf	??___fttol,w
  3054  0333  07E1               	addwf	___fttol@exp1,f
  3055  0334  1903               	btfsc	3,2
  3056  0335  2B52               	goto	l1828
  3057  0336  2B27               	goto	l1818
  3058  0337                     l1820:	
  3059  0337  3018               	movlw	24
  3060  0338  0261               	subwf	___fttol@exp1,w
  3061  0339  1C03               	skipc
  3062  033A  2B4F               	goto	l572
  3063  033B  3000               	movlw	0
  3064  033C  00D7               	movwf	?___fttol+3
  3065  033D  3000               	movlw	0
  3066  033E  00D6               	movwf	?___fttol+2
  3067  033F  3000               	movlw	0
  3068  0340  00D5               	movwf	?___fttol+1
  3069  0341  3000               	movlw	0
  3070  0342  00D4               	movwf	?___fttol
  3071  0343  0008               	return
  3072  0344                     l1826:	
  3073  0344  3001               	movlw	1
  3074  0345  00D8               	movwf	??___fttol
  3075  0346                     u1785:	
  3076  0346  1003               	clrc
  3077  0347  0DDD               	rlf	___fttol@lval,f
  3078  0348  0DDE               	rlf	___fttol@lval+1,f
  3079  0349  0DDF               	rlf	___fttol@lval+2,f
  3080  034A  0DE0               	rlf	___fttol@lval+3,f
  3081  034B  0BD8               	decfsz	??___fttol,f
  3082  034C  2B46               	goto	u1785
  3083  034D  3001               	movlw	1
  3084  034E  02E1               	subwf	___fttol@exp1,f
  3085  034F                     l572:	
  3086  034F  0861               	movf	___fttol@exp1,w
  3087  0350  1D03               	btfss	3,2
  3088  0351  2B44               	goto	l1826
  3089  0352                     l1828:	
  3090  0352  085C               	movf	___fttol@sign1,w
  3091  0353  1903               	btfsc	3,2
  3092  0354  2B60               	goto	l1832
  3093  0355  09DD               	comf	___fttol@lval,f
  3094  0356  09DE               	comf	___fttol@lval+1,f
  3095  0357  09DF               	comf	___fttol@lval+2,f
  3096  0358  09E0               	comf	___fttol@lval+3,f
  3097  0359  0ADD               	incf	___fttol@lval,f
  3098  035A  1903               	skipnz
  3099  035B  0ADE               	incf	___fttol@lval+1,f
  3100  035C  1903               	skipnz
  3101  035D  0ADF               	incf	___fttol@lval+2,f
  3102  035E  1903               	skipnz
  3103  035F  0AE0               	incf	___fttol@lval+3,f
  3104  0360                     l1832:	
  3105  0360  0860               	movf	___fttol@lval+3,w
  3106  0361  00D7               	movwf	?___fttol+3
  3107  0362  085F               	movf	___fttol@lval+2,w
  3108  0363  00D6               	movwf	?___fttol+2
  3109  0364  085E               	movf	___fttol@lval+1,w
  3110  0365  00D5               	movwf	?___fttol+1
  3111  0366  085D               	movf	___fttol@lval,w
  3112  0367  00D4               	movwf	?___fttol
  3113  0368  0008               	return
  3114  0369                     __end_of___fttol:	
  3115                           
  3116                           	psect	text16
  3117  03FF                     __ptext16:	
  3118 ;; *************** function ___ftmul *****************
  3119 ;; Defined at:
  3120 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  f1              3    0[BANK0 ] float 
  3123 ;;  f2              3    3[BANK0 ] float 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  3126 ;;  sign            1   15[BANK0 ] unsigned char 
  3127 ;;  cntr            1   14[BANK0 ] unsigned char 
  3128 ;;  exp             1   10[BANK0 ] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  3    0[BANK0 ] float 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, status,0, pclath, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3138 ;;      Params:         0       6       0       0       0
  3139 ;;      Locals:         0       6       0       0       0
  3140 ;;      Temps:          0       4       0       0       0
  3141 ;;      Totals:         0      16       0       0       0
  3142 ;;Total ram usage:       16 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    1
  3145 ;; This function calls:
  3146 ;;		___ftpack
  3147 ;; This function is called by:
  3148 ;;		_main
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function ___ftmul
  3154  03FF                     ___ftmul:	
  3155                           
  3156                           ;incstack = 0
  3157                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3158  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0400  1303               	bcf	3,6	;RP1=0, select bank0
  3160  0401  0844               	movf	___ftmul@f1,w
  3161  0402  00CA               	movwf	??___ftmul
  3162  0403  0845               	movf	___ftmul@f1+1,w
  3163  0404  00CB               	movwf	??___ftmul+1
  3164  0405  0846               	movf	___ftmul@f1+2,w
  3165  0406  00CC               	movwf	??___ftmul+2
  3166  0407  1003               	clrc
  3167  0408  0D4B               	rlf	??___ftmul+1,w
  3168  0409  0D4C               	rlf	??___ftmul+2,w
  3169  040A  00CD               	movwf	??___ftmul+3
  3170  040B  084D               	movf	??___ftmul+3,w
  3171  040C  00CE               	movwf	___ftmul@exp
  3172  040D  084E               	movf	___ftmul@exp,w
  3173  040E  1D03               	btfss	3,2
  3174  040F  2C17               	goto	l1750
  3175  0410  3000               	movlw	0
  3176  0411  00C4               	movwf	?___ftmul
  3177  0412  3000               	movlw	0
  3178  0413  00C5               	movwf	?___ftmul+1
  3179  0414  3000               	movlw	0
  3180  0415  00C6               	movwf	?___ftmul+2
  3181  0416  0008               	return
  3182  0417                     l1750:	
  3183  0417  0847               	movf	___ftmul@f2,w
  3184  0418  00CA               	movwf	??___ftmul
  3185  0419  0848               	movf	___ftmul@f2+1,w
  3186  041A  00CB               	movwf	??___ftmul+1
  3187  041B  0849               	movf	___ftmul@f2+2,w
  3188  041C  00CC               	movwf	??___ftmul+2
  3189  041D  1003               	clrc
  3190  041E  0D4B               	rlf	??___ftmul+1,w
  3191  041F  0D4C               	rlf	??___ftmul+2,w
  3192  0420  00CD               	movwf	??___ftmul+3
  3193  0421  084D               	movf	??___ftmul+3,w
  3194  0422  00D3               	movwf	___ftmul@sign
  3195  0423  0853               	movf	___ftmul@sign,w
  3196  0424  1D03               	btfss	3,2
  3197  0425  2C2D               	goto	l1756
  3198  0426  3000               	movlw	0
  3199  0427  00C4               	movwf	?___ftmul
  3200  0428  3000               	movlw	0
  3201  0429  00C5               	movwf	?___ftmul+1
  3202  042A  3000               	movlw	0
  3203  042B  00C6               	movwf	?___ftmul+2
  3204  042C  0008               	return
  3205  042D                     l1756:	
  3206  042D  0853               	movf	___ftmul@sign,w
  3207  042E  3E7B               	addlw	123
  3208  042F  00CA               	movwf	??___ftmul
  3209  0430  084A               	movf	??___ftmul,w
  3210  0431  07CE               	addwf	___ftmul@exp,f
  3211  0432  0844               	movf	___ftmul@f1,w
  3212  0433  00CA               	movwf	??___ftmul
  3213  0434  0845               	movf	___ftmul@f1+1,w
  3214  0435  00CB               	movwf	??___ftmul+1
  3215  0436  0846               	movf	___ftmul@f1+2,w
  3216  0437  00CC               	movwf	??___ftmul+2
  3217  0438  3010               	movlw	16
  3218  0439                     u1595:	
  3219  0439  1003               	clrc
  3220  043A  0CCC               	rrf	??___ftmul+2,f
  3221  043B  0CCB               	rrf	??___ftmul+1,f
  3222  043C  0CCA               	rrf	??___ftmul,f
  3223  043D  3EFF               	addlw	-1
  3224  043E  1D03               	skipz
  3225  043F  2C39               	goto	u1595
  3226  0440  084A               	movf	??___ftmul,w
  3227  0441  00CD               	movwf	??___ftmul+3
  3228  0442  084D               	movf	??___ftmul+3,w
  3229  0443  00D3               	movwf	___ftmul@sign
  3230  0444  0847               	movf	___ftmul@f2,w
  3231  0445  00CA               	movwf	??___ftmul
  3232  0446  0848               	movf	___ftmul@f2+1,w
  3233  0447  00CB               	movwf	??___ftmul+1
  3234  0448  0849               	movf	___ftmul@f2+2,w
  3235  0449  00CC               	movwf	??___ftmul+2
  3236  044A  3010               	movlw	16
  3237  044B                     u1605:	
  3238  044B  1003               	clrc
  3239  044C  0CCC               	rrf	??___ftmul+2,f
  3240  044D  0CCB               	rrf	??___ftmul+1,f
  3241  044E  0CCA               	rrf	??___ftmul,f
  3242  044F  3EFF               	addlw	-1
  3243  0450  1D03               	skipz
  3244  0451  2C4B               	goto	u1605
  3245  0452  084A               	movf	??___ftmul,w
  3246  0453  00CD               	movwf	??___ftmul+3
  3247  0454  084D               	movf	??___ftmul+3,w
  3248  0455  06D3               	xorwf	___ftmul@sign,f
  3249  0456  3080               	movlw	128
  3250  0457  00CA               	movwf	??___ftmul
  3251  0458  084A               	movf	??___ftmul,w
  3252  0459  05D3               	andwf	___ftmul@sign,f
  3253  045A  17C5               	bsf	___ftmul@f1+1,7
  3254  045B  17C8               	bsf	___ftmul@f2+1,7
  3255  045C  30FF               	movlw	255
  3256  045D  05C7               	andwf	___ftmul@f2,f
  3257  045E  30FF               	movlw	255
  3258  045F  05C8               	andwf	___ftmul@f2+1,f
  3259  0460  3000               	movlw	0
  3260  0461  05C9               	andwf	___ftmul@f2+2,f
  3261  0462  3000               	movlw	0
  3262  0463  00CF               	movwf	___ftmul@f3_as_product
  3263  0464  3000               	movlw	0
  3264  0465  00D0               	movwf	___ftmul@f3_as_product+1
  3265  0466  3000               	movlw	0
  3266  0467  00D1               	movwf	___ftmul@f3_as_product+2
  3267  0468  3007               	movlw	7
  3268  0469  00CA               	movwf	??___ftmul
  3269  046A  084A               	movf	??___ftmul,w
  3270  046B  00D2               	movwf	___ftmul@cntr
  3271  046C                     l1768:	
  3272  046C  1C44               	btfss	___ftmul@f1,0
  3273  046D  2C7C               	goto	l1772
  3274  046E  0847               	movf	___ftmul@f2,w
  3275  046F  07CF               	addwf	___ftmul@f3_as_product,f
  3276  0470  0848               	movf	___ftmul@f2+1,w
  3277  0471  1103               	clrz
  3278  0472  1803               	skipnc
  3279  0473  0A48               	incf	___ftmul@f2+1,w
  3280  0474  1D03               	btfss	3,2
  3281  0475  07D0               	addwf	___ftmul@f3_as_product+1,f
  3282  0476  0849               	movf	___ftmul@f2+2,w
  3283  0477  1103               	clrz
  3284  0478  1803               	skipnc
  3285  0479  0A49               	incf	___ftmul@f2+2,w
  3286  047A  1D03               	btfss	3,2
  3287  047B  07D1               	addwf	___ftmul@f3_as_product+2,f
  3288  047C                     l1772:	
  3289  047C  3001               	movlw	1
  3290  047D                     u1635:	
  3291  047D  1003               	clrc
  3292  047E  0CC6               	rrf	___ftmul@f1+2,f
  3293  047F  0CC5               	rrf	___ftmul@f1+1,f
  3294  0480  0CC4               	rrf	___ftmul@f1,f
  3295  0481  3EFF               	addlw	-1
  3296  0482  1D03               	skipz
  3297  0483  2C7D               	goto	u1635
  3298  0484  3001               	movlw	1
  3299  0485                     u1645:	
  3300  0485  1003               	clrc
  3301  0486  0DC7               	rlf	___ftmul@f2,f
  3302  0487  0DC8               	rlf	___ftmul@f2+1,f
  3303  0488  0DC9               	rlf	___ftmul@f2+2,f
  3304  0489  3EFF               	addlw	-1
  3305  048A  1D03               	skipz
  3306  048B  2C85               	goto	u1645
  3307  048C  3001               	movlw	1
  3308  048D  02D2               	subwf	___ftmul@cntr,f
  3309  048E  1D03               	btfss	3,2
  3310  048F  2C6C               	goto	l1768
  3311  0490  3009               	movlw	9
  3312  0491  00CA               	movwf	??___ftmul
  3313  0492  084A               	movf	??___ftmul,w
  3314  0493  00D2               	movwf	___ftmul@cntr
  3315  0494                     l1780:	
  3316  0494  1C44               	btfss	___ftmul@f1,0
  3317  0495  2CA4               	goto	l1784
  3318  0496  0847               	movf	___ftmul@f2,w
  3319  0497  07CF               	addwf	___ftmul@f3_as_product,f
  3320  0498  0848               	movf	___ftmul@f2+1,w
  3321  0499  1103               	clrz
  3322  049A  1803               	skipnc
  3323  049B  0A48               	incf	___ftmul@f2+1,w
  3324  049C  1D03               	btfss	3,2
  3325  049D  07D0               	addwf	___ftmul@f3_as_product+1,f
  3326  049E  0849               	movf	___ftmul@f2+2,w
  3327  049F  1103               	clrz
  3328  04A0  1803               	skipnc
  3329  04A1  0A49               	incf	___ftmul@f2+2,w
  3330  04A2  1D03               	btfss	3,2
  3331  04A3  07D1               	addwf	___ftmul@f3_as_product+2,f
  3332  04A4                     l1784:	
  3333  04A4  3001               	movlw	1
  3334  04A5                     u1685:	
  3335  04A5  1003               	clrc
  3336  04A6  0CC6               	rrf	___ftmul@f1+2,f
  3337  04A7  0CC5               	rrf	___ftmul@f1+1,f
  3338  04A8  0CC4               	rrf	___ftmul@f1,f
  3339  04A9  3EFF               	addlw	-1
  3340  04AA  1D03               	skipz
  3341  04AB  2CA5               	goto	u1685
  3342  04AC  3001               	movlw	1
  3343  04AD                     u1695:	
  3344  04AD  1003               	clrc
  3345  04AE  0CD1               	rrf	___ftmul@f3_as_product+2,f
  3346  04AF  0CD0               	rrf	___ftmul@f3_as_product+1,f
  3347  04B0  0CCF               	rrf	___ftmul@f3_as_product,f
  3348  04B1  3EFF               	addlw	-1
  3349  04B2  1D03               	skipz
  3350  04B3  2CAD               	goto	u1695
  3351  04B4  3001               	movlw	1
  3352  04B5  02D2               	subwf	___ftmul@cntr,f
  3353  04B6  1D03               	btfss	3,2
  3354  04B7  2C94               	goto	l1780
  3355  04B8  084F               	movf	___ftmul@f3_as_product,w
  3356  04B9  00F0               	movwf	___ftpack@arg
  3357  04BA  0850               	movf	___ftmul@f3_as_product+1,w
  3358  04BB  00F1               	movwf	___ftpack@arg+1
  3359  04BC  0851               	movf	___ftmul@f3_as_product+2,w
  3360  04BD  00F2               	movwf	___ftpack@arg+2
  3361  04BE  084E               	movf	___ftmul@exp,w
  3362  04BF  00CA               	movwf	??___ftmul
  3363  04C0  084A               	movf	??___ftmul,w
  3364  04C1  00F3               	movwf	___ftpack@exp
  3365  04C2  0853               	movf	___ftmul@sign,w
  3366  04C3  00CB               	movwf	??___ftmul+1
  3367  04C4  084B               	movf	??___ftmul+1,w
  3368  04C5  00F4               	movwf	___ftpack@sign
  3369  04C6  120A  118A  226F   	fcall	___ftpack
  3370  04C9  0870               	movf	?___ftpack,w
  3371  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  3372  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  3373  04CC  00C4               	movwf	?___ftmul
  3374  04CD  0871               	movf	?___ftpack+1,w
  3375  04CE  00C5               	movwf	?___ftmul+1
  3376  04CF  0872               	movf	?___ftpack+2,w
  3377  04D0  00C6               	movwf	?___ftmul+2
  3378  04D1  0008               	return
  3379  04D2                     __end_of___ftmul:	
  3380                           
  3381                           	psect	text17
  3382  026F                     __ptext17:	
  3383 ;; *************** function ___ftpack *****************
  3384 ;; Defined at:
  3385 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  arg             3    0[COMMON] unsigned um
  3388 ;;  exp             1    3[COMMON] unsigned char 
  3389 ;;  sign            1    4[COMMON] unsigned char 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  3    0[COMMON] float 
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3401 ;;      Params:         5       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0
  3403 ;;      Temps:          3       0       0       0       0
  3404 ;;      Totals:         8       0       0       0       0
  3405 ;;Total ram usage:        8 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		___ftmul
  3411 ;;		___lwtoft
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           
  3416                           ;psect for function ___ftpack
  3417  026F                     ___ftpack:	
  3418                           
  3419                           ;incstack = 0
  3420                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3421  026F  0873               	movf	___ftpack@exp,w
  3422  0270  1903               	btfsc	3,2
  3423  0271  2A77               	goto	l1506
  3424  0272  0872               	movf	___ftpack@arg+2,w
  3425  0273  0471               	iorwf	___ftpack@arg+1,w
  3426  0274  0470               	iorwf	___ftpack@arg,w
  3427  0275  1D03               	skipz
  3428  0276  2A8A               	goto	l1512
  3429  0277                     l1506:	
  3430  0277  3000               	movlw	0
  3431  0278  00F0               	movwf	?___ftpack
  3432  0279  3000               	movlw	0
  3433  027A  00F1               	movwf	?___ftpack+1
  3434  027B  3000               	movlw	0
  3435  027C  00F2               	movwf	?___ftpack+2
  3436  027D  0008               	return
  3437  027E                     l1510:	
  3438  027E  3001               	movlw	1
  3439  027F  00F5               	movwf	??___ftpack
  3440  0280  0875               	movf	??___ftpack,w
  3441  0281  07F3               	addwf	___ftpack@exp,f
  3442  0282  3001               	movlw	1
  3443  0283                     u1125:	
  3444  0283  1003               	clrc
  3445  0284  0CF2               	rrf	___ftpack@arg+2,f
  3446  0285  0CF1               	rrf	___ftpack@arg+1,f
  3447  0286  0CF0               	rrf	___ftpack@arg,f
  3448  0287  3EFF               	addlw	-1
  3449  0288  1D03               	skipz
  3450  0289  2A83               	goto	u1125
  3451  028A                     l1512:	
  3452  028A  30FE               	movlw	254
  3453  028B  0572               	andwf	___ftpack@arg+2,w
  3454  028C  1903               	btfsc	3,2
  3455  028D  2AA5               	goto	l481
  3456  028E  2A7E               	goto	l1510
  3457  028F                     l1514:	
  3458  028F  3001               	movlw	1
  3459  0290  00F5               	movwf	??___ftpack
  3460  0291  0875               	movf	??___ftpack,w
  3461  0292  07F3               	addwf	___ftpack@exp,f
  3462  0293  3001               	movlw	1
  3463  0294  07F0               	addwf	___ftpack@arg,f
  3464  0295  3000               	movlw	0
  3465  0296  1803               	skipnc
  3466  0297  3001               	movlw	1
  3467  0298  07F1               	addwf	___ftpack@arg+1,f
  3468  0299  3000               	movlw	0
  3469  029A  1803               	skipnc
  3470  029B  3001               	movlw	1
  3471  029C  07F2               	addwf	___ftpack@arg+2,f
  3472  029D  3001               	movlw	1
  3473  029E                     u1145:	
  3474  029E  1003               	clrc
  3475  029F  0CF2               	rrf	___ftpack@arg+2,f
  3476  02A0  0CF1               	rrf	___ftpack@arg+1,f
  3477  02A1  0CF0               	rrf	___ftpack@arg,f
  3478  02A2  3EFF               	addlw	-1
  3479  02A3  1D03               	skipz
  3480  02A4  2A9E               	goto	u1145
  3481  02A5                     l481:	
  3482  02A5  30FF               	movlw	255
  3483  02A6  0572               	andwf	___ftpack@arg+2,w
  3484  02A7  1903               	btfsc	3,2
  3485  02A8  2AB4               	goto	l1522
  3486  02A9  2A8F               	goto	l1514
  3487  02AA                     l1520:	
  3488  02AA  3001               	movlw	1
  3489  02AB  02F3               	subwf	___ftpack@exp,f
  3490  02AC  3001               	movlw	1
  3491  02AD                     u1165:	
  3492  02AD  1003               	clrc
  3493  02AE  0DF0               	rlf	___ftpack@arg,f
  3494  02AF  0DF1               	rlf	___ftpack@arg+1,f
  3495  02B0  0DF2               	rlf	___ftpack@arg+2,f
  3496  02B1  3EFF               	addlw	-1
  3497  02B2  1D03               	skipz
  3498  02B3  2AAD               	goto	u1165
  3499  02B4                     l1522:	
  3500  02B4  1BF1               	btfsc	___ftpack@arg+1,7
  3501  02B5  2ABA               	goto	l488
  3502  02B6  3002               	movlw	2
  3503  02B7  0273               	subwf	___ftpack@exp,w
  3504  02B8  1803               	skipnc
  3505  02B9  2AAA               	goto	l1520
  3506  02BA                     l488:	
  3507  02BA  1873               	btfsc	___ftpack@exp,0
  3508  02BB  2AC2               	goto	l489
  3509  02BC  30FF               	movlw	255
  3510  02BD  05F0               	andwf	___ftpack@arg,f
  3511  02BE  307F               	movlw	127
  3512  02BF  05F1               	andwf	___ftpack@arg+1,f
  3513  02C0  30FF               	movlw	255
  3514  02C1  05F2               	andwf	___ftpack@arg+2,f
  3515  02C2                     l489:	
  3516  02C2  1003               	clrc
  3517  02C3  0CF3               	rrf	___ftpack@exp,f
  3518  02C4  0873               	movf	___ftpack@exp,w
  3519  02C5  00F5               	movwf	??___ftpack
  3520  02C6  01F6               	clrf	??___ftpack+1
  3521  02C7  01F7               	clrf	??___ftpack+2
  3522  02C8  3010               	movlw	16
  3523  02C9                     u1205:	
  3524  02C9  1003               	clrc
  3525  02CA  0DF5               	rlf	??___ftpack,f
  3526  02CB  0DF6               	rlf	??___ftpack+1,f
  3527  02CC  0DF7               	rlf	??___ftpack+2,f
  3528  02CD  3EFF               	addlw	-1
  3529  02CE  1D03               	skipz
  3530  02CF  2AC9               	goto	u1205
  3531  02D0  0875               	movf	??___ftpack,w
  3532  02D1  04F0               	iorwf	___ftpack@arg,f
  3533  02D2  0876               	movf	??___ftpack+1,w
  3534  02D3  04F1               	iorwf	___ftpack@arg+1,f
  3535  02D4  0877               	movf	??___ftpack+2,w
  3536  02D5  04F2               	iorwf	___ftpack@arg+2,f
  3537  02D6  0874               	movf	___ftpack@sign,w
  3538  02D7  1903               	btfsc	3,2
  3539  02D8  0008               	return
  3540  02D9  17F2               	bsf	___ftpack@arg+2,7
  3541  02DA  0008               	return
  3542  02DB                     __end_of___ftpack:	
  3543                           
  3544                           	psect	text18
  3545  018C                     __ptext18:	
  3546 ;; *************** function _Lcd_Write_String *****************
  3547 ;; Defined at:
  3548 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  a               2    5[COMMON] PTR unsigned char 
  3551 ;;		 -> STR_21(17), STR_20(17), STR_19(18), STR_18(17), 
  3552 ;;		 -> STR_17(17), g(10), STR_15(11), STR_14(17), 
  3553 ;;		 -> t(10), STR_12(8), STR_11(16), STR_10(17), 
  3554 ;;		 -> STR_9(17), STR_8(17), STR_7(17), 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  i               2   10[COMMON] int 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3566 ;;      Params:         2       0       0       0       0
  3567 ;;      Locals:         2       0       0       0       0
  3568 ;;      Temps:          3       0       0       0       0
  3569 ;;      Totals:         7       0       0       0       0
  3570 ;;Total ram usage:        7 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    2
  3573 ;; This function calls:
  3574 ;;		_Lcd_Write_Char
  3575 ;; This function is called by:
  3576 ;;		_main
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           
  3581                           ;psect for function _Lcd_Write_String
  3582  018C                     _Lcd_Write_String:	
  3583                           
  3584                           ;lcd.h: 94: int i;
  3585                           ;lcd.h: 95: for(i=0;a[i]!='\0';i++)
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3589  018C  01FA               	clrf	Lcd_Write_String@i
  3590  018D  01FB               	clrf	Lcd_Write_String@i+1
  3591  018E                     l1620:	
  3592  018E  087A               	movf	Lcd_Write_String@i,w
  3593  018F  0775               	addwf	Lcd_Write_String@a,w
  3594  0190  00F8               	movwf	??_Lcd_Write_String+1
  3595  0191  0876               	movf	Lcd_Write_String@a+1,w
  3596  0192  00F7               	movwf	??_Lcd_Write_String
  3597  0193  1803               	skipnc
  3598  0194  0AF7               	incf	??_Lcd_Write_String,f
  3599  0195  1BFA               	btfsc	Lcd_Write_String@i,7
  3600  0196  03F7               	decf	??_Lcd_Write_String,f
  3601  0197  0877               	movf	??_Lcd_Write_String,w
  3602  0198  00F9               	movwf	??_Lcd_Write_String+2
  3603  0199  0879               	movf	??_Lcd_Write_String+2,w
  3604  019A  1283               	bcf	3,5	;RP0=0, select bank0
  3605  019B  1303               	bcf	3,6	;RP1=0, select bank0
  3606  019C  00FF               	movwf	127
  3607  019D  0878               	movf	??_Lcd_Write_String+1,w
  3608  019E  0084               	movwf	4
  3609  019F  120A  158A  2000  120A  118A  	fcall	stringtab
  3610  01A4  3A00               	xorlw	0
  3611  01A5  1903               	btfsc	3,2
  3612  01A6  0008               	return
  3613                           
  3614                           ;lcd.h: 96: Lcd_Write_Char(a[i]);
  3615  01A7  087A               	movf	Lcd_Write_String@i,w
  3616  01A8  0775               	addwf	Lcd_Write_String@a,w
  3617  01A9  00F8               	movwf	??_Lcd_Write_String+1
  3618  01AA  0876               	movf	Lcd_Write_String@a+1,w
  3619  01AB  00F7               	movwf	??_Lcd_Write_String
  3620  01AC  1803               	skipnc
  3621  01AD  0AF7               	incf	??_Lcd_Write_String,f
  3622  01AE  1BFA               	btfsc	Lcd_Write_String@i,7
  3623  01AF  03F7               	decf	??_Lcd_Write_String,f
  3624  01B0  0877               	movf	??_Lcd_Write_String,w
  3625  01B1  00F9               	movwf	??_Lcd_Write_String+2
  3626  01B2  0879               	movf	??_Lcd_Write_String+2,w
  3627  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  3628  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  3629  01B5  00FF               	movwf	127
  3630  01B6  0878               	movf	??_Lcd_Write_String+1,w
  3631  01B7  0084               	movwf	4
  3632  01B8  120A  158A  2000  120A  118A  	fcall	stringtab
  3633  01BD  120A  118A  2117  120A  118A  	fcall	_Lcd_Write_Char
  3634  01C2  3001               	movlw	1
  3635  01C3  07FA               	addwf	Lcd_Write_String@i,f
  3636  01C4  1803               	skipnc
  3637  01C5  0AFB               	incf	Lcd_Write_String@i+1,f
  3638  01C6  3000               	movlw	0
  3639  01C7  07FB               	addwf	Lcd_Write_String@i+1,f
  3640  01C8  298E               	goto	l1620
  3641  01C9                     __end_of_Lcd_Write_String:	
  3642                           
  3643                           	psect	text19
  3644  0117                     __ptext19:	
  3645 ;; *************** function _Lcd_Write_Char *****************
  3646 ;; Defined at:
  3647 ;;		line 76 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  a               1    wreg     unsigned char 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  a               1    4[COMMON] unsigned char 
  3652 ;;  y               1    3[COMMON] unsigned char 
  3653 ;;  temp            1    2[COMMON] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3663 ;;      Params:         0       0       0       0       0
  3664 ;;      Locals:         3       0       0       0       0
  3665 ;;      Temps:          1       0       0       0       0
  3666 ;;      Totals:         4       0       0       0       0
  3667 ;;Total ram usage:        4 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    1
  3670 ;; This function calls:
  3671 ;;		_Lcd_Port
  3672 ;; This function is called by:
  3673 ;;		_Lcd_Write_String
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _Lcd_Write_Char
  3679  0117                     _Lcd_Write_Char:	
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3683                           ;Lcd_Write_Char@a stored from wreg
  3684  0117  00F4               	movwf	Lcd_Write_Char@a
  3685                           
  3686                           ;lcd.h: 78: char temp,y;
  3687                           ;lcd.h: 79: temp = a&0x0F;
  3688  0118  0874               	movf	Lcd_Write_Char@a,w
  3689  0119  390F               	andlw	15
  3690  011A  00F1               	movwf	??_Lcd_Write_Char
  3691  011B  0871               	movf	??_Lcd_Write_Char,w
  3692  011C  00F2               	movwf	Lcd_Write_Char@temp
  3693                           
  3694                           ;lcd.h: 80: y = a&0xF0;
  3695  011D  0874               	movf	Lcd_Write_Char@a,w
  3696  011E  39F0               	andlw	240
  3697  011F  00F1               	movwf	??_Lcd_Write_Char
  3698  0120  0871               	movf	??_Lcd_Write_Char,w
  3699  0121  00F3               	movwf	Lcd_Write_Char@y
  3700                           
  3701                           ;lcd.h: 81: RD7 = 1;
  3702  0122  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0123  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0124  1788               	bsf	8,7	;volatile
  3705                           
  3706                           ;lcd.h: 82: Lcd_Port(y>>4);
  3707  0125  0873               	movf	Lcd_Write_Char@y,w
  3708  0126  00F1               	movwf	??_Lcd_Write_Char
  3709  0127  3004               	movlw	4
  3710  0128                     u1015:	
  3711  0128  1003               	clrc
  3712  0129  0CF1               	rrf	??_Lcd_Write_Char,f
  3713  012A  3EFF               	addlw	-1
  3714  012B  1D03               	skipz
  3715  012C  2928               	goto	u1015
  3716  012D  0871               	movf	??_Lcd_Write_Char,w
  3717  012E  120A  118A  2081  120A  118A  	fcall	_Lcd_Port
  3718                           
  3719                           ;lcd.h: 83: RD6 = 1;
  3720  0133  1283               	bcf	3,5	;RP0=0, select bank0
  3721  0134  1303               	bcf	3,6	;RP1=0, select bank0
  3722  0135  1708               	bsf	8,6	;volatile
  3723                           
  3724                           ;lcd.h: 84: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3725  0136  3042               	movlw	66
  3726  0137  00F1               	movwf	??_Lcd_Write_Char
  3727  0138                     u1957:	
  3728  0138  0BF1               	decfsz	??_Lcd_Write_Char,f
  3729  0139  2938               	goto	u1957
  3730  013A  0000               	nop
  3731                           
  3732                           ;lcd.h: 85: RD6 = 0;
  3733  013B  1283               	bcf	3,5	;RP0=0, select bank0
  3734  013C  1303               	bcf	3,6	;RP1=0, select bank0
  3735  013D  1308               	bcf	8,6	;volatile
  3736                           
  3737                           ;lcd.h: 86: Lcd_Port(temp);
  3738  013E  0872               	movf	Lcd_Write_Char@temp,w
  3739  013F  120A  118A  2081  120A  118A  	fcall	_Lcd_Port
  3740                           
  3741                           ;lcd.h: 87: RD6 = 1;
  3742  0144  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0145  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0146  1708               	bsf	8,6	;volatile
  3745                           
  3746                           ;lcd.h: 88: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3747  0147  3042               	movlw	66
  3748  0148  00F1               	movwf	??_Lcd_Write_Char
  3749  0149                     u1967:	
  3750  0149  0BF1               	decfsz	??_Lcd_Write_Char,f
  3751  014A  2949               	goto	u1967
  3752  014B  0000               	nop
  3753                           
  3754                           ;lcd.h: 89: RD6 = 0;
  3755  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3756  014D  1303               	bcf	3,6	;RP1=0, select bank0
  3757  014E  1308               	bcf	8,6	;volatile
  3758  014F  0008               	return
  3759  0150                     __end_of_Lcd_Write_Char:	
  3760                           
  3761                           	psect	text20
  3762  01C9                     __ptext20:	
  3763 ;; *************** function _Lcd_Set_Cursor *****************
  3764 ;; Defined at:
  3765 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  a               1    wreg     unsigned char 
  3768 ;;  b               1    4[COMMON] unsigned char 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  a               1    7[COMMON] unsigned char 
  3771 ;;  temp            1   10[COMMON] unsigned char 
  3772 ;;  y               1    9[COMMON] unsigned char 
  3773 ;;  z               1    8[COMMON] unsigned char 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, status,2, status,0, pclath, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3783 ;;      Params:         1       0       0       0       0
  3784 ;;      Locals:         4       0       0       0       0
  3785 ;;      Temps:          2       0       0       0       0
  3786 ;;      Totals:         7       0       0       0       0
  3787 ;;Total ram usage:        7 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    2
  3790 ;; This function calls:
  3791 ;;		_Lcd_Cmd
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _Lcd_Set_Cursor
  3799  01C9                     _Lcd_Set_Cursor:	
  3800                           
  3801                           ;incstack = 0
  3802                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3803                           ;Lcd_Set_Cursor@a stored from wreg
  3804  01C9  00F7               	movwf	Lcd_Set_Cursor@a
  3805                           
  3806                           ;lcd.h: 39: char temp,z,y;
  3807                           ;lcd.h: 40: if(a == 1)
  3808  01CA  0377               	decf	Lcd_Set_Cursor@a,w
  3809  01CB  1D03               	btfss	3,2
  3810  01CC  29EE               	goto	l1594
  3811                           
  3812                           ;lcd.h: 41: {
  3813                           ;lcd.h: 42: temp = 0x80 + b - 1;
  3814  01CD  0874               	movf	Lcd_Set_Cursor@b,w
  3815  01CE  3E7F               	addlw	127
  3816  01CF  00F5               	movwf	??_Lcd_Set_Cursor
  3817  01D0  0875               	movf	??_Lcd_Set_Cursor,w
  3818  01D1  00FA               	movwf	Lcd_Set_Cursor@temp
  3819                           
  3820                           ;lcd.h: 43: z = temp>>4;
  3821  01D2  087A               	movf	Lcd_Set_Cursor@temp,w
  3822  01D3  00F5               	movwf	??_Lcd_Set_Cursor
  3823  01D4  3004               	movlw	4
  3824  01D5                     u1365:	
  3825  01D5  1003               	clrc
  3826  01D6  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3827  01D7  3EFF               	addlw	-1
  3828  01D8  1D03               	skipz
  3829  01D9  29D5               	goto	u1365
  3830  01DA  0875               	movf	??_Lcd_Set_Cursor,w
  3831  01DB  00F6               	movwf	??_Lcd_Set_Cursor+1
  3832  01DC  0876               	movf	??_Lcd_Set_Cursor+1,w
  3833  01DD  00F8               	movwf	Lcd_Set_Cursor@z
  3834                           
  3835                           ;lcd.h: 44: y = temp & 0x0F;
  3836  01DE  087A               	movf	Lcd_Set_Cursor@temp,w
  3837  01DF  390F               	andlw	15
  3838  01E0  00F5               	movwf	??_Lcd_Set_Cursor
  3839  01E1  0875               	movf	??_Lcd_Set_Cursor,w
  3840  01E2  00F9               	movwf	Lcd_Set_Cursor@y
  3841                           
  3842                           ;lcd.h: 45: Lcd_Cmd(z);
  3843  01E3  0878               	movf	Lcd_Set_Cursor@z,w
  3844  01E4  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3845                           
  3846                           ;lcd.h: 46: Lcd_Cmd(y);
  3847  01E9  0879               	movf	Lcd_Set_Cursor@y,w
  3848  01EA  120A  118A  209B   	fcall	_Lcd_Cmd
  3849                           
  3850                           ;lcd.h: 47: }
  3851  01ED  0008               	return
  3852  01EE                     l1594:	
  3853                           
  3854                           ;lcd.h: 48: else if(a == 2)
  3855  01EE  3002               	movlw	2
  3856  01EF  0677               	xorwf	Lcd_Set_Cursor@a,w
  3857  01F0  1D03               	btfss	3,2
  3858  01F1  0008               	return
  3859                           
  3860                           ;lcd.h: 49: {
  3861                           ;lcd.h: 50: temp = 0xC0 + b - 1;
  3862  01F2  0874               	movf	Lcd_Set_Cursor@b,w
  3863  01F3  3EBF               	addlw	191
  3864  01F4  00F5               	movwf	??_Lcd_Set_Cursor
  3865  01F5  0875               	movf	??_Lcd_Set_Cursor,w
  3866  01F6  00FA               	movwf	Lcd_Set_Cursor@temp
  3867                           
  3868                           ;lcd.h: 51: z = temp>>4;
  3869  01F7  087A               	movf	Lcd_Set_Cursor@temp,w
  3870  01F8  00F5               	movwf	??_Lcd_Set_Cursor
  3871  01F9  3004               	movlw	4
  3872  01FA                     u1385:	
  3873  01FA  1003               	clrc
  3874  01FB  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3875  01FC  3EFF               	addlw	-1
  3876  01FD  1D03               	skipz
  3877  01FE  29FA               	goto	u1385
  3878  01FF  0875               	movf	??_Lcd_Set_Cursor,w
  3879  0200  00F6               	movwf	??_Lcd_Set_Cursor+1
  3880  0201  0876               	movf	??_Lcd_Set_Cursor+1,w
  3881  0202  00F8               	movwf	Lcd_Set_Cursor@z
  3882                           
  3883                           ;lcd.h: 52: y = temp & 0x0F;
  3884  0203  087A               	movf	Lcd_Set_Cursor@temp,w
  3885  0204  390F               	andlw	15
  3886  0205  00F5               	movwf	??_Lcd_Set_Cursor
  3887  0206  0875               	movf	??_Lcd_Set_Cursor,w
  3888  0207  00F9               	movwf	Lcd_Set_Cursor@y
  3889                           
  3890                           ;lcd.h: 53: Lcd_Cmd(z);
  3891  0208  0878               	movf	Lcd_Set_Cursor@z,w
  3892  0209  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3893                           
  3894                           ;lcd.h: 54: Lcd_Cmd(y);
  3895  020E  0879               	movf	Lcd_Set_Cursor@y,w
  3896  020F  120A  118A  209B   	fcall	_Lcd_Cmd
  3897  0212  0008               	return
  3898  0213                     __end_of_Lcd_Set_Cursor:	
  3899                           
  3900                           	psect	text21
  3901  0213                     __ptext21:	
  3902 ;; *************** function _Lcd_Init *****************
  3903 ;; Defined at:
  3904 ;;		line 58 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3918 ;;      Params:         0       0       0       0       0
  3919 ;;      Locals:         0       0       0       0       0
  3920 ;;      Temps:          2       0       0       0       0
  3921 ;;      Totals:         2       0       0       0       0
  3922 ;;Total ram usage:        2 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    2
  3925 ;; This function calls:
  3926 ;;		_Lcd_Cmd
  3927 ;;		_Lcd_Port
  3928 ;; This function is called by:
  3929 ;;		_main
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           
  3934                           ;psect for function _Lcd_Init
  3935  0213                     _Lcd_Init:	
  3936                           
  3937                           ;lcd.h: 60: Lcd_Port(0x00);
  3938                           
  3939                           ;incstack = 0
  3940                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3941  0213  3000               	movlw	0
  3942  0214  120A  118A  2081  120A  118A  	fcall	_Lcd_Port
  3943                           
  3944                           ;lcd.h: 61: _delay((unsigned long)((20)*(20000000/4000.0)));
  3945  0219  3082               	movlw	130
  3946  021A  00F5               	movwf	??_Lcd_Init+1
  3947  021B  30DD               	movlw	221
  3948  021C  00F4               	movwf	??_Lcd_Init
  3949  021D                     u1977:	
  3950  021D  0BF4               	decfsz	??_Lcd_Init,f
  3951  021E  2A1D               	goto	u1977
  3952  021F  0BF5               	decfsz	??_Lcd_Init+1,f
  3953  0220  2A1D               	goto	u1977
  3954  0221  2A22               	nop2
  3955                           
  3956                           ;lcd.h: 62: Lcd_Cmd(0x03);
  3957  0222  3003               	movlw	3
  3958  0223  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3959                           
  3960                           ;lcd.h: 63: _delay((unsigned long)((5)*(20000000/4000.0)));
  3961  0228  3021               	movlw	33
  3962  0229  00F5               	movwf	??_Lcd_Init+1
  3963  022A  3076               	movlw	118
  3964  022B  00F4               	movwf	??_Lcd_Init
  3965  022C                     u1987:	
  3966  022C  0BF4               	decfsz	??_Lcd_Init,f
  3967  022D  2A2C               	goto	u1987
  3968  022E  0BF5               	decfsz	??_Lcd_Init+1,f
  3969  022F  2A2C               	goto	u1987
  3970  0230  0000               	nop
  3971                           
  3972                           ;lcd.h: 64: Lcd_Cmd(0x03);
  3973  0231  3003               	movlw	3
  3974  0232  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3975                           
  3976                           ;lcd.h: 65: _delay((unsigned long)((11)*(20000000/4000.0)));
  3977  0237  3048               	movlw	72
  3978  0238  00F5               	movwf	??_Lcd_Init+1
  3979  0239  306C               	movlw	108
  3980  023A  00F4               	movwf	??_Lcd_Init
  3981  023B                     u1997:	
  3982  023B  0BF4               	decfsz	??_Lcd_Init,f
  3983  023C  2A3B               	goto	u1997
  3984  023D  0BF5               	decfsz	??_Lcd_Init+1,f
  3985  023E  2A3B               	goto	u1997
  3986  023F  0000               	nop
  3987                           
  3988                           ;lcd.h: 66: Lcd_Cmd(0x03);
  3989  0240  3003               	movlw	3
  3990  0241  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3991                           
  3992                           ;lcd.h: 67: Lcd_Cmd(0x02);
  3993  0246  3002               	movlw	2
  3994  0247  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3995                           
  3996                           ;lcd.h: 68: Lcd_Cmd(0x02);
  3997  024C  3002               	movlw	2
  3998  024D  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  3999                           
  4000                           ;lcd.h: 69: Lcd_Cmd(0x08);
  4001  0252  3008               	movlw	8
  4002  0253  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  4003                           
  4004                           ;lcd.h: 70: Lcd_Cmd(0x00);
  4005  0258  3000               	movlw	0
  4006  0259  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  4007                           
  4008                           ;lcd.h: 71: Lcd_Cmd(0x0C);
  4009  025E  300C               	movlw	12
  4010  025F  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  4011                           
  4012                           ;lcd.h: 72: Lcd_Cmd(0x00);
  4013  0264  3000               	movlw	0
  4014  0265  120A  118A  209B  120A  118A  	fcall	_Lcd_Cmd
  4015                           
  4016                           ;lcd.h: 73: Lcd_Cmd(0x06);
  4017  026A  3006               	movlw	6
  4018  026B  120A  118A  209B   	fcall	_Lcd_Cmd
  4019  026E  0008               	return
  4020  026F                     __end_of_Lcd_Init:	
  4021                           
  4022                           	psect	text22
  4023  0FE9                     __ptext22:	
  4024 ;; *************** function _Lcd_Clear *****************
  4025 ;; Defined at:
  4026 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  2   78[None  ] int 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4040 ;;      Params:         0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0
  4043 ;;      Totals:         0       0       0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    2
  4047 ;; This function calls:
  4048 ;;		_Lcd_Cmd
  4049 ;; This function is called by:
  4050 ;;		_main
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function _Lcd_Clear
  4056  0FE9                     _Lcd_Clear:	
  4057                           
  4058                           ;lcd.h: 33: Lcd_Cmd(0);
  4059                           
  4060                           ;incstack = 0
  4061                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4062  0FE9  3000               	movlw	0
  4063  0FEA  120A  118A  209B  120A  158A  	fcall	_Lcd_Cmd
  4064                           
  4065                           ;lcd.h: 34: Lcd_Cmd(1);
  4066  0FEF  3001               	movlw	1
  4067  0FF0  120A  118A  209B   	fcall	_Lcd_Cmd
  4068  0FF3  0008               	return
  4069  0FF4                     __end_of_Lcd_Clear:	
  4070                           
  4071                           	psect	text23
  4072  009B                     __ptext23:	
  4073 ;; *************** function _Lcd_Cmd *****************
  4074 ;; Defined at:
  4075 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  a               1    wreg     unsigned char 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  a               1    3[COMMON] unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      void 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0, pclath, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4089 ;;      Params:         0       0       0       0       0
  4090 ;;      Locals:         1       0       0       0       0
  4091 ;;      Temps:          2       0       0       0       0
  4092 ;;      Totals:         3       0       0       0       0
  4093 ;;Total ram usage:        3 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    1
  4096 ;; This function calls:
  4097 ;;		_Lcd_Port
  4098 ;; This function is called by:
  4099 ;;		_Lcd_Clear
  4100 ;;		_Lcd_Set_Cursor
  4101 ;;		_Lcd_Init
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function _Lcd_Cmd
  4107  009B                     _Lcd_Cmd:	
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4111                           ;Lcd_Cmd@a stored from wreg
  4112  009B  00F3               	movwf	Lcd_Cmd@a
  4113                           
  4114                           ;lcd.h: 24: RD7 = 0;
  4115  009C  1283               	bcf	3,5	;RP0=0, select bank0
  4116  009D  1303               	bcf	3,6	;RP1=0, select bank0
  4117  009E  1388               	bcf	8,7	;volatile
  4118                           
  4119                           ;lcd.h: 25: Lcd_Port(a);
  4120  009F  0873               	movf	Lcd_Cmd@a,w
  4121  00A0  120A  118A  2081  120A  118A  	fcall	_Lcd_Port
  4122                           
  4123                           ;lcd.h: 26: RD6 = 1;
  4124  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  4125  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  4126  00A7  1708               	bsf	8,6	;volatile
  4127                           
  4128                           ;lcd.h: 27: _delay((unsigned long)((4)*(20000000/4000.0)));
  4129  00A8  301A               	movlw	26
  4130  00A9  00F2               	movwf	??_Lcd_Cmd+1
  4131  00AA  30F8               	movlw	248
  4132  00AB  00F1               	movwf	??_Lcd_Cmd
  4133  00AC                     u2007:	
  4134  00AC  0BF1               	decfsz	??_Lcd_Cmd,f
  4135  00AD  28AC               	goto	u2007
  4136  00AE  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4137  00AF  28AC               	goto	u2007
  4138  00B0  0000               	nop
  4139                           
  4140                           ;lcd.h: 28: RD6 = 0;
  4141  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  4142  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  4143  00B3  1308               	bcf	8,6	;volatile
  4144  00B4  0008               	return
  4145  00B5                     __end_of_Lcd_Cmd:	
  4146                           
  4147                           	psect	text24
  4148  0081                     __ptext24:	
  4149 ;; *************** function _Lcd_Port *****************
  4150 ;; Defined at:
  4151 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  a               1    wreg     unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  a               1    0[COMMON] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4165 ;;      Params:         0       0       0       0       0
  4166 ;;      Locals:         1       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0
  4168 ;;      Totals:         1       0       0       0       0
  4169 ;;Total ram usage:        1 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_Lcd_Cmd
  4175 ;;		_Lcd_Init
  4176 ;;		_Lcd_Write_Char
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function _Lcd_Port
  4182  0081                     _Lcd_Port:	
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _Lcd_Port: [wreg]
  4186                           ;Lcd_Port@a stored from wreg
  4187  0081  00F0               	movwf	Lcd_Port@a
  4188                           
  4189                           ;lcd.h: 2: if(a & 1)
  4190  0082  1C70               	btfss	Lcd_Port@a,0
  4191  0083  2888               	goto	l65
  4192                           
  4193                           ;lcd.h: 3: RD5 = 1;
  4194  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0086  1688               	bsf	8,5	;volatile
  4197  0087  288B               	goto	l66
  4198  0088                     l65:	
  4199                           
  4200                           ;lcd.h: 4: else
  4201                           ;lcd.h: 5: RD5 = 0;
  4202  0088  1283               	bcf	3,5	;RP0=0, select bank0
  4203  0089  1303               	bcf	3,6	;RP1=0, select bank0
  4204  008A  1288               	bcf	8,5	;volatile
  4205  008B                     l66:	
  4206                           
  4207                           ;lcd.h: 7: if(a & 2)
  4208  008B  1CF0               	btfss	Lcd_Port@a,1
  4209  008C  288F               	goto	l67
  4210                           
  4211                           ;lcd.h: 8: RD4 = 1;
  4212  008D  1608               	bsf	8,4	;volatile
  4213  008E  2890               	goto	l68
  4214  008F                     l67:	
  4215                           
  4216                           ;lcd.h: 9: else
  4217                           ;lcd.h: 10: RD4 = 0;
  4218  008F  1208               	bcf	8,4	;volatile
  4219  0090                     l68:	
  4220                           
  4221                           ;lcd.h: 12: if(a & 4)
  4222  0090  1D70               	btfss	Lcd_Port@a,2
  4223  0091  2894               	goto	l69
  4224                           
  4225                           ;lcd.h: 13: RD3 = 1;
  4226  0092  1588               	bsf	8,3	;volatile
  4227  0093  2895               	goto	l70
  4228  0094                     l69:	
  4229                           
  4230                           ;lcd.h: 14: else
  4231                           ;lcd.h: 15: RD3 = 0;
  4232  0094  1188               	bcf	8,3	;volatile
  4233  0095                     l70:	
  4234                           
  4235                           ;lcd.h: 17: if(a & 8)
  4236  0095  1DF0               	btfss	Lcd_Port@a,3
  4237  0096  2899               	goto	l71
  4238                           
  4239                           ;lcd.h: 18: RD2 = 1;
  4240  0097  1508               	bsf	8,2	;volatile
  4241  0098  0008               	return
  4242  0099                     l71:	
  4243                           
  4244                           ;lcd.h: 19: else
  4245                           ;lcd.h: 20: RD2 = 0;
  4246  0099  1108               	bcf	8,2	;volatile
  4247  009A  0008               	return
  4248  009B                     __end_of_Lcd_Port:	
  4249  007E                     btemp	set	126	;btemp
  4250  007E                     wtemp0	set	126


Data Sizes:
    Strings     246
    Constant    22
    Data        12
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      69
    BANK1            80      0      12
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_16(CODE[3]), STR_13(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> g(BANK0[10]), t(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_response@strings	PTR const unsigned char [6] size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), STR_1(CODE[6]), 

    uart_response@F1322	PTR const unsigned char [6] size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 
		 -> STR_2(CODE[5]), STR_1(CODE[6]), 

    uart_txs@st	PTR unsigned char  size(1) Largest target is 10
		 -> g(BANK0[10]), t(BANK0[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 18
		 -> STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[18]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), g(BANK0[10]), STR_15(CODE[11]), STR_14(CODE[17]), 
		 -> t(BANK0[10]), STR_12(CODE[8]), STR_11(CODE[16]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 


Critical Paths under _main in COMMON

    _value2->_uart_response
    _value1->_uart_response
    _uart_txs->_uart_txc
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ready->_uart_response
    ___lwtoft->___ftpack
    ___fttol->___lwtoft
    ___ftmul->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->___fttol
    _value2->_uart_response
    _value1->_uart_response
    _ready->_uart_response
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    9140
                                             30 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                           ___lwtoft
                           _adc_init
                           _adc_read
                              _ready
                            _sprintf
                          _uart_init
                           _uart_txc
                           _uart_txs
                             _value1
                             _value2
 ---------------------------------------------------------------------------------
 (1) _value2                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _value1                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _uart_txs                                             2     2      0     121
                                              1 COMMON     2     2      0
                           _uart_txc
 ---------------------------------------------------------------------------------
 (2) _uart_txc                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    18      4    1170
                                              0 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ready                                                0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (2) _uart_response                                       26    26      0     389
                                              0 COMMON     4     4      0
                                              0 BANK0     22    22      0
                            _uart_rx
 ---------------------------------------------------------------------------------
 (3) _uart_rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1704
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2061
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1063
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1175
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _adc_init
   _adc_read
   _ready
     _uart_response
       _uart_rx
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _uart_init
   _uart_txc
   _uart_txs
     _uart_txc
   _value1
     _uart_response
       _uart_rx
   _value2
     _uart_response
       _uart_rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       C       7       15.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      45       5       86.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5F      12        0.0%
ABS                  0      0      5F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Apr 01 16:39:38 2018

                             _a 002C                               _b 002A                               _g 0030  
                             _t 003A                               pc 0002                     __CFG_CP$OFF 0000  
                            l70 0095                              l71 0099                              l65 0088  
                            l66 008B                              l67 008F                              l68 0090  
                            l69 0094                              fsr 0004                             l120 000C  
                           l133 0FE5                             l117 0006                             l181 00DC  
                           l190 0632                             l481 02A5                             l572 034F  
                           l488 02BA                             l489 02C2                             _RD2 0042  
                           _RD3 0043                             _RB7 0037                             _RD4 0044  
                           _RD5 0045                             _RD6 0046                             _RD7 0047  
                  __CFG_CPD$OFF 0000                             _gas 0026                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000  __end_ofuart_response@responses 0822  
                  __CFG_LVP$OFF 0000                 ??_uart_response 0070                            l1510 027E  
                          l1520 02AA                            l1512 028A                            l1522 02B4  
                          l1514 028F                            l1506 0277                            l1620 018E  
                          l1700 051B                            l1710 0532                            l1800 02F5  
                          l1552 017C                            l1544 0158                            l1490 03F3  
                          l1546 0166                            l1570 00F9                            l1722 055D  
                          l1642 006D                            l1820 0337                            l1492 03F8  
                          l1556 0187                            l1716 0538                            l1740 05B5  
                          l1750 0417                            l1574 0107                            l1832 0360  
                          l1496 0396                            l1664 0FFE                            l1568 00EB  
                          l1736 0570                            l1728 056C                            l1648 001B  
                          l1656 0027                            l1594 01EE                            l1826 0344  
                          l1818 0327                            l1498 03FD                            l1578 0112  
                          l1738 04D9                            l1906 06D7                            l1780 0494  
                          l1772 047C                            l1756 042D                            l1828 0352  
                          l1676 00BD                            l1924 073F                            l1694 04FF  
                          l1784 04A4                            l1768 046C                            l1952 07AF  
                          l1938 0777                            l1876 0604                            l1894 068C  
                          l1886 062D                            STR_1 08F6                            STR_2 090D  
                          STR_3 08FC                            STR_4 0912                            STR_5 0908  
                          STR_6 0902                            STR_7 088F                            STR_8 08C2  
                          STR_9 08A0                            _BRGH 04C2                            _CREN 00C4  
                          u1015 0128                            u1040 0387                            u1205 02C9  
                          u1125 0283                            u2007 00AC                            u1145 029E  
                          u1305 00EE                            u1235 015B                            u1165 02AD  
                          u1325 00FF                            u1255 0167                            u1335 0108  
                          u1265 0173                            u1275 017D                            u1365 01D5  
                          u1605 044B                            u1525 0553                            u1385 01FA  
                          u1635 047D                            u1475 00C6                            u1645 0485  
                          u1725 02FC                            u1595 0439                            u1755 0328  
                          u1907 0719                            u1685 04A5                            u1917 075F  
                          u1695 04AD                            u1927 0797                            u1785 0346  
                          u1937 07E0                            u1947 00D4                            u1957 0138  
                          u1967 0149                            u1977 021D                            u1897 05FE  
                          u1987 022C                            _RCIF 0065                            u1997 023B  
                          _OERR 00C1                            _SPEN 00C7                            _TRMT 04C1  
                          _TXEN 04C5                            _TXIF 0064                            _SYNC 04C4  
                  __CFG_WRT$OFF 0000               ?_Lcd_Write_String 0075                            _main 05BA  
                  ___ftpack@arg 0070                    ___ftpack@exp 0073                            _temp 0028  
                          btemp 007E                            start 0000              ??_Lcd_Write_String 0077  
               __end_of_Lcd_Cmd 00B5                    ___ftmul@cntr 0052                    ___ftmul@sign 0053  
                  ___fttol@exp1 0061                    ___fttol@lval 005D                           ?_main 0070  
                         STR_10 084B                           STR_11 08D3                           STR_12 08EE  
                         STR_20 085C                           STR_13 0917                           STR_21 083A  
                         STR_14 087E                           STR_15 08E3                           STR_16 091B  
                         STR_17 086D                   __CFG_WDTE$OFF 0000                           STR_18 08B1  
                         STR_19 0828                 __end_of___ftmul 04D2                 __end_of___fttol 0369  
               __end_of___lwdiv 018C                 __end_of___lwmod 0117                           _RCREG 001A  
                         _SPBRG 0099         __size_of_Lcd_Set_Cursor 004A                           _TRISA 0085  
                         _TRISD 0088                           _TXREG 0019                 __end_of_dpowers 081C  
                         _count 002E                           _ready 0FF4                   ___ftpack@sign 0074  
                __CFG_BOREN$OFF 0000                           pclath 000A                 __end_of_uart_rx 0FE9  
                         status 0003                           wtemp0 007E                 __end_of_sprintf 05BA  
              __end_of_Lcd_Init 026F                __end_of_Lcd_Port 009B                 __initialization 07E8  
                  __end_of_main 07E8              uart_response@F1322 00A0              uart_response@F1319 0020  
                        ??_main 0062                   ___fttol@sign1 005C              __size_of_Lcd_Clear 000B  
                        _ADCON0 001F                          _ADCON1 009F                          ?_ready 0070  
                        _ADRESH 001E                          _ADRESL 009E                __end_of___ftpack 02DB  
              __end_of_adc_init 0FDF                __end_of_adc_read 00E5                __end_of___lwtoft 006C  
                     ??_Lcd_Cmd 0071         __size_of_Lcd_Write_Char 0039                          _TRISB7 0437  
                        _TRISC6 043E                          _TRISC7 043F                  __CFG_PWRTE$OFF 0000  
                     ??___ftmul 004A                       ??___fttol 0058                       ??___lwdiv 0074  
                     ??___lwmod 007C                          _value1 0011                          _value2 001D  
         ___ftmul@f3_as_product 004F                __end_of_uart_txc 0011                __end_of_uart_txs 0081  
                     ??_uart_rx 0070                       ??_sprintf 0048                 Lcd_Set_Cursor@a 0077  
               Lcd_Set_Cursor@b 0074                 Lcd_Set_Cursor@y 0079                 Lcd_Set_Cursor@z 0078  
       __end_of__initialization 07FC               __end_of_Lcd_Clear 0FF4                      ___ftmul@f1 0044  
                    ___ftmul@f2 0047                      ___fttol@f1 0054                  __pcstackCOMMON 0070  
                  __pidataBANK1 0029                   __end_of_ready 1000                      ___lwtoft@c 0078  
                _Lcd_Set_Cursor 01C9                       ?_Lcd_Init 0070                       ?_Lcd_Port 0070  
                       ??_ready 0074                      __pbssBANK0 0020                      __pmaintext 05BA  
           uart_response@so_far 0050           uart_response@received 0056       __size_of_Lcd_Write_String 003D  
                     ?___ftpack 0070          __end_of_Lcd_Set_Cursor 0213                         ?_value1 0070  
                       ?_value2 0070                       ?_adc_init 0070                       ?_adc_read 0070  
                     ?___lwtoft 0078           uart_response@response 0057              __size_of_uart_init 0012  
                    ??_Lcd_Init 0074                      ??_Lcd_Port 0070                      __stringtab 0800  
         __end_of_uart_response 03FF                  _Lcd_Write_Char 0117                         _Lcd_Cmd 009B  
                     ?_uart_txc 0070                       ?_uart_txs 0070                         ___ftmul 03FF  
                       ___fttol 02DB                         ___lwdiv 0150                         ___lwmod 00E5  
                    ??___ftpack 0075                 ?_Lcd_Set_Cursor 0074                      ??_adc_init 0070  
                    ??_adc_read 0072                 __size_of_value1 000C                 __size_of_value2 000C  
                       __ptext1 001D                         __ptext2 0011                         __ptext3 006C  
                       __ptext4 0005                         __ptext5 0046                         __ptext6 04D2  
                       __ptext7 00E5                         __ptext8 0150                         __ptext9 0FF4  
                    ??___lwtoft 007B                         _dpowers 0812                         _uart_rx 0FDF  
                       _sprintf 04D2                         clrloop0 0FCF          __end_of_Lcd_Write_Char 0150  
          end_of_initialization 07FC               __end_of_uart_init 0058                      ??_uart_txc 0070  
                    ??_uart_txs 0071                       Lcd_Port@a 0070                    __pstringtext 0800  
    uart_response@continue_loop 0058    __end_ofuart_response@lengths 0828                 ?_Lcd_Write_Char 0070  
             Lcd_Write_String@a 0075               Lcd_Write_String@i 007A                     ___ftmul@exp 004E  
                     _Lcd_Clear 0FE9                _Lcd_Write_String 018C                  __end_of_value1 001D  
                __end_of_value2 0029             start_initialization 07E8               __size_of_Lcd_Init 005C  
             __size_of_Lcd_Port 001A                      ?_Lcd_Clear 0070                      init_fetch0 0035  
                   __pdataBANK1 00A0                 Lcd_Write_Char@a 0074                 Lcd_Write_Char@y 0073  
                      ??_value1 0074                        ??_value2 0074               __size_of___ftpack 006C  
             __size_of_adc_init 0009               __size_of_adc_read 0030                 adc_read@channel 0074  
                     ___latbits 0002               __size_of___lwtoft 0014                   __pcstackBANK0 0044  
                      ?_Lcd_Cmd 0070                     sprintf@flag 004C                     sprintf@prec 004D  
              ___lwdiv@dividend 0072                ??_Lcd_Set_Cursor 0075            uart_response@lengths 0822  
                      ?___ftmul 0044                        ?___fttol 0054                        ?___lwdiv 0070  
                      ?___lwmod 0078               __size_of_uart_txc 000C               __size_of_uart_txs 0015  
          uart_response@strings 0044                        ?_uart_rx 0070                ___lwdiv@quotient 0075  
                      ?_sprintf 0044                  __size_of_ready 000C          uart_response@responses 081C  
                     clear_ram0 0FCE                        Lcd_Cmd@a 0073                        _GO_nDONE 00FA  
                   ??_Lcd_Clear 0074                       _uart_init 0046                      uart_txc@ch 0070  
                    uart_txs@st 0072                     __stringbase 0812          __size_of_uart_response 0096  
              ??_Lcd_Write_Char 0071                        _Lcd_Init 0213                        _Lcd_Port 0081  
      __end_of_Lcd_Write_String 01C9                __size_of_Lcd_Cmd 001A                      ?_uart_init 0070  
              __size_of___ftmul 00D3                __size_of___fttol 008E                __size_of___lwdiv 003C  
              __size_of___lwmod 0032                        ___ftpack 026F              __end_of__stringtab 0812  
                      _adc_init 0FD6                        _adc_read 00B5                        ___lwtoft 0058  
                    sprintf@val 004E                 ___lwdiv@divisor 0070                 ___lwdiv@counter 0077  
                      __ptext10 0369                        __ptext11 0FDF                        __ptext20 01C9  
                      __ptext12 00B5                        __ptext21 0213                        __ptext13 0FD6  
                      __ptext22 0FE9                        __ptext14 0058                        __ptext23 009B  
                      __ptext15 02DB                        __ptext24 0081                        __ptext16 03FF  
                      __ptext17 026F                        __ptext18 018C                        __ptext19 0117  
              __size_of_uart_rx 000A                __size_of_sprintf 00E8                   _uart_response 0369  
                 __size_of_main 022E                        _uart_txc 0005                        _uart_txs 006C  
                      init_ram0 0039              Lcd_Write_Char@temp 0072                       sprintf@ap 004B  
                     sprintf@sp 0050                  ?_uart_response 0070                ___lwmod@dividend 007A  
                     stringcode 080A                     ??_uart_init 0070              Lcd_Set_Cursor@temp 007A  
                uart_response@i 0059                        sprintf@c 0051                        sprintf@f 0044  
               ___lwmod@divisor 0078                 ___lwmod@counter 007D                        stringtab 0800  
