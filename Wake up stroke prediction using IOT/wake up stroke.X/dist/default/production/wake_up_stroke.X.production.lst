

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Mar 31 10:38:20 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.42
    51                           ; Generated 13/04/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F877A Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  0088                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144                           
   145                           	psect	idataBANK1
   146  04F3                     __pidataBANK1:	
   147                           
   148                           ;initializer for uart_response@F1323
   149  04F3  3416               	retlw	low (STR_1| (0+32768))
   150  04F4  3486               	retlw	high (STR_1| (0+32768))
   151  04F5  3444               	retlw	low (STR_2| (0+32768))
   152  04F6  3486               	retlw	high (STR_2| (0+32768))
   153  04F7  341C               	retlw	low (STR_3| (0+32768))
   154  04F8  3486               	retlw	high (STR_3| (0+32768))
   155  04F9  3437               	retlw	low (STR_4| (0+32768))
   156  04FA  3486               	retlw	high (STR_4| (0+32768))
   157  04FB  3432               	retlw	low (STR_5| (0+32768))
   158  04FC  3486               	retlw	high (STR_5| (0+32768))
   159  04FD  3422               	retlw	low (STR_6| (0+32768))
   160  04FE  3486               	retlw	high (STR_6| (0+32768))
   161                           
   162                           	psect	stringtext
   163  0500                     __pstringtext:	
   164  0500                     stringtab:	
   165  0500                     __stringtab:	
   166                           
   167                           ;	String table - string pointers are 2 bytes each
   168  0500  1BFF               	btfsc	btemp+1,7
   169  0501  2D0A               	ljmp	stringcode
   170  0502  1383               	bcf	3,7
   171  0503  187F               	btfsc	btemp+1,0
   172  0504  1783               	bsf	3,7
   173  0505  0800               	movf	0,w
   174  0506  0A84               	incf	4,f
   175  0507  1903               	skipnz
   176  0508  0AFF               	incf	btemp+1,f
   177  0509  0008               	return
   178  050A                     stringcode:	
   179  050A  087F               	movf	btemp+1,w
   180  050B  397F               	andlw	127
   181  050C  008A               	movwf	10
   182  050D  0804               	movf	4,w
   183  050E  0A84               	incf	4,f
   184  050F  1903               	skipnz
   185  0510  0AFF               	incf	btemp+1,f
   186  0511  0082               	movwf	2
   187  0512                     __stringbase:	
   188  0512                     __end_of__stringtab:	
   189  0512                     _dpowers:	
   190  0512  3401               	retlw	1
   191  0513  3400               	retlw	0
   192  0514  340A               	retlw	10
   193  0515  3400               	retlw	0
   194  0516  3464               	retlw	100
   195  0517  3400               	retlw	0
   196  0518  34E8               	retlw	232
   197  0519  3403               	retlw	3
   198  051A  3410               	retlw	16
   199  051B  3427               	retlw	39
   200  051C                     __end_of_dpowers:	
   201  051C                     uart_response@responses:	
   202  051C  3401               	retlw	1
   203  051D  3402               	retlw	2
   204  051E  3403               	retlw	3
   205  051F  3404               	retlw	4
   206  0520  3405               	retlw	5
   207  0521  3406               	retlw	6
   208  0522                     __end_ofuart_response@responses:	
   209  0522                     uart_response@lengths:	
   210  0522  3405               	retlw	5
   211  0523  3403               	retlw	3
   212  0524  3405               	retlw	5
   213  0525  3404               	retlw	4
   214  0526  3404               	retlw	4
   215  0527  3405               	retlw	5
   216  0528                     __end_ofuart_response@lengths:	
   217  000B                     _INTCON	set	11
   218  0001                     _TMR0	set	1
   219  0010                     _T1CONbits	set	16
   220  000C                     _PIR1bits	set	12
   221  000E                     _TMR1L	set	14
   222  000F                     _TMR1H	set	15
   223  001E                     _ADRESH	set	30
   224  001F                     _ADCON0	set	31
   225  001A                     _RCREG	set	26
   226  0019                     _TXREG	set	25
   227  0060                     _TMR1IF	set	96
   228  0037                     _RB7	set	55
   229  0030                     _RB0	set	48
   230  00FA                     _GO_nDONE	set	250
   231  0065                     _RCIF	set	101
   232  00C1                     _OERR	set	193
   233  0064                     _TXIF	set	100
   234  00C4                     _CREN	set	196
   235  00C7                     _SPEN	set	199
   236  0043                     _RD3	set	67
   237  0042                     _RD2	set	66
   238  0047                     _RD7	set	71
   239  0046                     _RD6	set	70
   240  0045                     _RD5	set	69
   241  0044                     _RD4	set	68
   242  0081                     _OPTION_REG	set	129
   243  0088                     _TRISD	set	136
   244  0085                     _TRISA	set	133
   245  008C                     _PIE1bits	set	140
   246  009E                     _ADRESL	set	158
   247  009F                     _ADCON1	set	159
   248  0099                     _SPBRG	set	153
   249  0430                     _TRISB0	set	1072
   250  0437                     _TRISB7	set	1079
   251  0436                     _TRISB6	set	1078
   252  04C1                     _TRMT	set	1217
   253  04C5                     _TXEN	set	1221
   254  04C4                     _SYNC	set	1220
   255  04C2                     _BRGH	set	1218
   256  043F                     _TRISC7	set	1087
   257  043E                     _TRISC6	set	1086
   258  0528                     STR_33:	
   259  0528  3420               	retlw	32	;' '
   260  0529  3420               	retlw	32	;' '
   261  052A  3420               	retlw	32	;' '
   262  052B  3420               	retlw	32	;' '
   263  052C  3420               	retlw	32	;' '
   264  052D  3420               	retlw	32	;' '
   265  052E  3420               	retlw	32	;' '
   266  052F  3420               	retlw	32	;' '
   267  0530  3420               	retlw	32	;' '
   268  0531  3420               	retlw	32	;' '
   269  0532  3420               	retlw	32	;' '
   270  0533  3420               	retlw	32	;' '
   271  0534  3420               	retlw	32	;' '
   272  0535  3420               	retlw	32	;' '
   273  0536  3420               	retlw	32	;' '
   274  0537  3420               	retlw	32	;' '
   275  0538  3400               	retlw	0
   276  0539                     STR_10:	
   277  0539  3420               	retlw	32	;' '
   278  053A  3420               	retlw	32	;' '
   279  053B  3420               	retlw	32	;' '
   280  053C  3449               	retlw	73	;'I'
   281  053D  344F               	retlw	79	;'O'
   282  053E  3454               	retlw	84	;'T'
   283  053F  3420               	retlw	32	;' '
   284  0540  344D               	retlw	77	;'M'
   285  0541  344F               	retlw	79	;'O'
   286  0542  3444               	retlw	68	;'D'
   287  0543  3445               	retlw	69	;'E'
   288  0544  344D               	retlw	77	;'M'
   289  0545  3420               	retlw	32	;' '
   290  0546  3420               	retlw	32	;' '
   291  0547  3420               	retlw	32	;' '
   292  0548  3420               	retlw	32	;' '
   293  0549  3400               	retlw	0
   294  054A                     STR_7:	
   295  054A  3420               	retlw	32	;' '
   296  054B  3420               	retlw	32	;' '
   297  054C  3420               	retlw	32	;' '
   298  054D  3420               	retlw	32	;' '
   299  054E  3420               	retlw	32	;' '
   300  054F  3457               	retlw	87	;'W'
   301  0550  3441               	retlw	65	;'A'
   302  0551  344B               	retlw	75	;'K'
   303  0552  3445               	retlw	69	;'E'
   304  0553  3420               	retlw	32	;' '
   305  0554  3455               	retlw	85	;'U'
   306  0555  3450               	retlw	80	;'P'
   307  0556  3420               	retlw	32	;' '
   308  0557  3420               	retlw	32	;' '
   309  0558  3420               	retlw	32	;' '
   310  0559  3420               	retlw	32	;' '
   311  055A  3400               	retlw	0
   312  055B                     STR_32:	
   313  055B  3420               	retlw	32	;' '
   314  055C  3420               	retlw	32	;' '
   315  055D  3420               	retlw	32	;' '
   316  055E  3420               	retlw	32	;' '
   317  055F  3455               	retlw	85	;'U'
   318  0560  3470               	retlw	112	;'p'
   319  0561  346C               	retlw	108	;'l'
   320  0562  346F               	retlw	111	;'o'
   321  0563  3461               	retlw	97	;'a'
   322  0564  3464               	retlw	100	;'d'
   323  0565  3465               	retlw	101	;'e'
   324  0566  3464               	retlw	100	;'d'
   325  0567  3420               	retlw	32	;' '
   326  0568  3420               	retlw	32	;' '
   327  0569  3420               	retlw	32	;' '
   328  056A  3420               	retlw	32	;' '
   329  056B  3400               	retlw	0
   330  056C                     STR_24:	
   331  056C  3420               	retlw	32	;' '
   332  056D  3420               	retlw	32	;' '
   333  056E  3455               	retlw	85	;'U'
   334  056F  3470               	retlw	112	;'p'
   335  0570  346C               	retlw	108	;'l'
   336  0571  346F               	retlw	111	;'o'
   337  0572  3461               	retlw	97	;'a'
   338  0573  3464               	retlw	100	;'d'
   339  0574  3469               	retlw	105	;'i'
   340  0575  346E               	retlw	110	;'n'
   341  0576  3467               	retlw	103	;'g'
   342  0577  342E               	retlw	46	;'.'
   343  0578  342E               	retlw	46	;'.'
   344  0579  342E               	retlw	46	;'.'
   345  057A  3420               	retlw	32	;' '
   346  057B  3420               	retlw	32	;' '
   347  057C  3400               	retlw	0
   348  057D                     STR_26:	
   349  057D  3420               	retlw	32	;' '
   350  057E  3473               	retlw	115	;'s'
   351  057F  3465               	retlw	101	;'e'
   352  0580  346E               	retlw	110	;'n'
   353  0581  3464               	retlw	100	;'d'
   354  0582  3469               	retlw	105	;'i'
   355  0583  346E               	retlw	110	;'n'
   356  0584  3467               	retlw	103	;'g'
   357  0585  3420               	retlw	32	;' '
   358  0586  3468               	retlw	104	;'h'
   359  0587  3472               	retlw	114	;'r'
   360  0588  342E               	retlw	46	;'.'
   361  0589  342E               	retlw	46	;'.'
   362  058A  342E               	retlw	46	;'.'
   363  058B  3420               	retlw	32	;' '
   364  058C  3420               	retlw	32	;' '
   365  058D  3400               	retlw	0
   366  058E                     STR_30:	
   367  058E  3420               	retlw	32	;' '
   368  058F  3473               	retlw	115	;'s'
   369  0590  3465               	retlw	101	;'e'
   370  0591  346E               	retlw	110	;'n'
   371  0592  3464               	retlw	100	;'d'
   372  0593  3469               	retlw	105	;'i'
   373  0594  346E               	retlw	110	;'n'
   374  0595  3467               	retlw	103	;'g'
   375  0596  3420               	retlw	32	;' '
   376  0597  346C               	retlw	108	;'l'
   377  0598  346F               	retlw	111	;'o'
   378  0599  346E               	retlw	110	;'n'
   379  059A  342E               	retlw	46	;'.'
   380  059B  342E               	retlw	46	;'.'
   381  059C  342E               	retlw	46	;'.'
   382  059D  3420               	retlw	32	;' '
   383  059E  3400               	retlw	0
   384  059F                     STR_28:	
   385  059F  3420               	retlw	32	;' '
   386  05A0  3473               	retlw	115	;'s'
   387  05A1  3465               	retlw	101	;'e'
   388  05A2  346E               	retlw	110	;'n'
   389  05A3  3464               	retlw	100	;'d'
   390  05A4  3469               	retlw	105	;'i'
   391  05A5  346E               	retlw	110	;'n'
   392  05A6  3467               	retlw	103	;'g'
   393  05A7  3420               	retlw	32	;' '
   394  05A8  346C               	retlw	108	;'l'
   395  05A9  3461               	retlw	97	;'a'
   396  05AA  3474               	retlw	116	;'t'
   397  05AB  342E               	retlw	46	;'.'
   398  05AC  342E               	retlw	46	;'.'
   399  05AD  342E               	retlw	46	;'.'
   400  05AE  3420               	retlw	32	;' '
   401  05AF  3400               	retlw	0
   402  05B0                     STR_8:	
   403  05B0  3420               	retlw	32	;' '
   404  05B1  3453               	retlw	83	;'S'
   405  05B2  3454               	retlw	84	;'T'
   406  05B3  3452               	retlw	82	;'R'
   407  05B4  344F               	retlw	79	;'O'
   408  05B5  344B               	retlw	75	;'K'
   409  05B6  3445               	retlw	69	;'E'
   410  05B7  3420               	retlw	32	;' '
   411  05B8  3450               	retlw	80	;'P'
   412  05B9  3452               	retlw	82	;'R'
   413  05BA  3445               	retlw	69	;'E'
   414  05BB  3444               	retlw	68	;'D'
   415  05BC  3449               	retlw	73	;'I'
   416  05BD  3443               	retlw	67	;'C'
   417  05BE  3454               	retlw	84	;'T'
   418  05BF  3420               	retlw	32	;' '
   419  05C0  3400               	retlw	0
   420  05C1                     STR_9:	
   421  05C1  3420               	retlw	32	;' '
   422  05C2  3449               	retlw	73	;'I'
   423  05C3  346E               	retlw	110	;'n'
   424  05C4  3469               	retlw	105	;'i'
   425  05C5  3474               	retlw	116	;'t'
   426  05C6  3469               	retlw	105	;'i'
   427  05C7  3461               	retlw	97	;'a'
   428  05C8  346C               	retlw	108	;'l'
   429  05C9  3469               	retlw	105	;'i'
   430  05CA  347A               	retlw	122	;'z'
   431  05CB  3469               	retlw	105	;'i'
   432  05CC  346E               	retlw	110	;'n'
   433  05CD  3467               	retlw	103	;'g'
   434  05CE  342E               	retlw	46	;'.'
   435  05CF  342E               	retlw	46	;'.'
   436  05D0  342E               	retlw	46	;'.'
   437  05D1  3400               	retlw	0
   438  05D2                     STR_25:	
   439  05D2  3420               	retlw	32	;' '
   440  05D3  3473               	retlw	115	;'s'
   441  05D4  3465               	retlw	101	;'e'
   442  05D5  346E               	retlw	110	;'n'
   443  05D6  3464               	retlw	100	;'d'
   444  05D7  3469               	retlw	105	;'i'
   445  05D8  346E               	retlw	110	;'n'
   446  05D9  3467               	retlw	103	;'g'
   447  05DA  3420               	retlw	32	;' '
   448  05DB  3474               	retlw	116	;'t'
   449  05DC  3465               	retlw	101	;'e'
   450  05DD  346D               	retlw	109	;'m'
   451  05DE  3470               	retlw	112	;'p'
   452  05DF  342E               	retlw	46	;'.'
   453  05E0  342E               	retlw	46	;'.'
   454  05E1  342E               	retlw	46	;'.'
   455  05E2  3400               	retlw	0
   456  05E3                     STR_27:	
   457  05E3  3420               	retlw	32	;' '
   458  05E4  3473               	retlw	115	;'s'
   459  05E5  3465               	retlw	101	;'e'
   460  05E6  346E               	retlw	110	;'n'
   461  05E7  3464               	retlw	100	;'d'
   462  05E8  3469               	retlw	105	;'i'
   463  05E9  346E               	retlw	110	;'n'
   464  05EA  3467               	retlw	103	;'g'
   465  05EB  3420               	retlw	32	;' '
   466  05EC  3470               	retlw	112	;'p'
   467  05ED  3472               	retlw	114	;'r'
   468  05EE  3465               	retlw	101	;'e'
   469  05EF  3473               	retlw	115	;'s'
   470  05F0  342E               	retlw	46	;'.'
   471  05F1  342E               	retlw	46	;'.'
   472  05F2  342E               	retlw	46	;'.'
   473  05F3  3400               	retlw	0
   474  05F4                     STR_31:	
   475  05F4  3430               	retlw	48	;'0'
   476  05F5  3438               	retlw	56	;'8'
   477  05F6  3430               	retlw	48	;'0'
   478  05F7  3431               	retlw	49	;'1'
   479  05F8  3433               	retlw	51	;'3'
   480  05F9  342E               	retlw	46	;'.'
   481  05FA  3435               	retlw	53	;'5'
   482  05FB  3434               	retlw	52	;'4'
   483  05FC  340D               	retlw	13
   484  05FD  340A               	retlw	10
   485  05FE  3400               	retlw	0
   486  05FF                     STR_29:	
   487  05FF  3431               	retlw	49	;'1'
   488  0600  3433               	retlw	51	;'3'
   489  0601  3430               	retlw	48	;'0'
   490  0602  3431               	retlw	49	;'1'
   491  0603  342E               	retlw	46	;'.'
   492  0604  3435               	retlw	53	;'5'
   493  0605  3431               	retlw	49	;'1'
   494  0606  340D               	retlw	13
   495  0607  340A               	retlw	10
   496  0608  3400               	retlw	0
   497  0609                     STR_11:	
   498  0609  3448               	retlw	72	;'H'
   499  060A  3449               	retlw	73	;'I'
   500  060B  3447               	retlw	71	;'G'
   501  060C  3448               	retlw	72	;'H'
   502  060D  3420               	retlw	32	;' '
   503  060E  3454               	retlw	84	;'T'
   504  060F  3400               	retlw	0
   505  0610                     STR_19:	
   506  0610  3452               	retlw	82	;'R'
   507  0611  3452               	retlw	82	;'R'
   508  0612  3420               	retlw	32	;' '
   509  0613  343A               	retlw	58	;':'
   510  0614  3420               	retlw	32	;' '
   511  0615  3400               	retlw	0
   512  0616                     STR_1:	
   513  0616  3474               	retlw	116	;'t'
   514  0617  3465               	retlw	101	;'e'
   515  0618  346D               	retlw	109	;'m'
   516  0619  3470               	retlw	112	;'p'
   517  061A  343A               	retlw	58	;':'
   518  061B  3400               	retlw	0
   519  061C                     STR_3:	
   520  061C  3470               	retlw	112	;'p'
   521  061D  3472               	retlw	114	;'r'
   522  061E  3465               	retlw	101	;'e'
   523  061F  3473               	retlw	115	;'s'
   524  0620  343A               	retlw	58	;':'
   525  0621  3400               	retlw	0
   526  0622                     STR_6:	
   527  0622  3452               	retlw	82	;'R'
   528  0623  3445               	retlw	69	;'E'
   529  0624  3441               	retlw	65	;'A'
   530  0625  3444               	retlw	68	;'D'
   531  0626  3459               	retlw	89	;'Y'
   532  0627  3400               	retlw	0
   533  0628                     STR_14:	
   534  0628  3448               	retlw	72	;'H'
   535  0629  3420               	retlw	32	;' '
   536  062A  343A               	retlw	58	;':'
   537  062B  3420               	retlw	32	;' '
   538  062C  3400               	retlw	0
   539  062D                     STR_12:	
   540  062D  3454               	retlw	84	;'T'
   541  062E  3420               	retlw	32	;' '
   542  062F  343A               	retlw	58	;':'
   543  0630  3420               	retlw	32	;' '
   544  0631  3400               	retlw	0
   545  0632                     STR_5:	
   546  0632  346C               	retlw	108	;'l'
   547  0633  346F               	retlw	111	;'o'
   548  0634  346E               	retlw	110	;'n'
   549  0635  343A               	retlw	58	;':'
   550  0636  3400               	retlw	0
   551  0637                     STR_4:	
   552  0637  346C               	retlw	108	;'l'
   553  0638  3461               	retlw	97	;'a'
   554  0639  3474               	retlw	116	;'t'
   555  063A  343A               	retlw	58	;':'
   556  063B  3400               	retlw	0
   557  063C                     STR_15:	
   558  063C  3425               	retlw	37	;'%'
   559  063D  3464               	retlw	100	;'d'
   560  063E  3420               	retlw	32	;' '
   561  063F  3400               	retlw	0
   562  0640                     STR_13:	
   563  0640  3425               	retlw	37	;'%'
   564  0641  3475               	retlw	117	;'u'
   565  0642  3420               	retlw	32	;' '
   566  0643  3400               	retlw	0
   567  0644                     STR_2:	
   568  0644  3468               	retlw	104	;'h'
   569  0645  3472               	retlw	114	;'r'
   570  0646  343A               	retlw	58	;':'
   571  0647  3400               	retlw	0
   572  0534                     
   573                           ; #config settings
   574  0000                     
   575                           	psect	cinit
   576  0015                     start_initialization:	
   577  0015                     __initialization:	
   578                           
   579                           ; Initialize objects allocated to BANK1
   580  0015  1383               	bcf	3,7	;select IRP bank0
   581  0016  30BC               	movlw	low (__pdataBANK1+12)
   582  0017  00FD               	movwf	btemp+-1
   583  0018  3004               	movlw	high __pidataBANK1
   584  0019  00FE               	movwf	btemp
   585  001A  30F3               	movlw	low __pidataBANK1
   586  001B  00FF               	movwf	btemp+1
   587  001C  30B0               	movlw	low __pdataBANK1
   588  001D  0084               	movwf	4
   589  001E  120A  158A  23B1  120A  118A  	fcall	init_ram0
   590                           
   591                           ; Clear objects allocated to BANK1
   592  0023  30A0               	movlw	low __pbssBANK1
   593  0024  0084               	movwf	4
   594  0025  30B0               	movlw	low (__pbssBANK1+16)
   595  0026  120A  158A  2324   	fcall	clear_ram0
   596                           
   597                           ; Clear objects allocated to BANK0
   598  0029  01EB               	clrf	__pbssBANK0& (0+127)
   599  002A  01EC               	clrf	(__pbssBANK0+1)& (0+127)
   600  002B  01ED               	clrf	(__pbssBANK0+2)& (0+127)
   601  002C  01EE               	clrf	(__pbssBANK0+3)& (0+127)
   602                           
   603                           ; Clear objects allocated to COMMON
   604  002D  01FC               	clrf	__pbssCOMMON& (0+127)
   605  002E  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   606  002F                     end_of_initialization:	
   607                           ;End of C runtime variable initialization code
   608                           
   609  002F                     __end_of__initialization:	
   610  002F  0183               	clrf	3
   611  0030  120A  118A  2833   	ljmp	_main	;jump to C main() function
   612                           
   613                           	psect	bssCOMMON
   614  007C                     __pbssCOMMON:	
   615  007C                     _pbeat:	
   616  007C                     	ds	2
   617                           
   618                           	psect	bssBANK0
   619  006B                     __pbssBANK0:	
   620  006B                     _temp:	
   621  006B                     	ds	2
   622  006D                     _cbeat:	
   623  006D                     	ds	2
   624                           
   625                           	psect	bssBANK1
   626  00A0                     __pbssBANK1:	
   627  00A0                     uart_response@F1320:	
   628  00A0                     	ds	6
   629  00A6                     _upload:	
   630  00A6                     	ds	2
   631  00A8                     _p_press_count:	
   632  00A8                     	ds	2
   633  00AA                     _c_press_count:	
   634  00AA                     	ds	2
   635  00AC                     _press:	
   636  00AC                     	ds	2
   637  00AE                     _count:	
   638  00AE                     	ds	2
   639                           
   640                           	psect	dataBANK1
   641  00B0                     __pdataBANK1:	
   642  00B0                     uart_response@F1323:	
   643  00B0                     	ds	12
   644                           
   645                           	psect	inittext
   646  0BAD                     init_fetch0:	
   647                           ;	Called with low address in FSR and high address in W
   648                           
   649  0BAD  087E               	movf	126,w
   650  0BAE  008A               	movwf	10
   651  0BAF  087F               	movf	127,w
   652  0BB0  0082               	movwf	2
   653  0BB1                     init_ram0:	
   654                           ;Called with:
   655                           ;	high address of idata address in btemp 
   656                           ;	low address of idata address in btemp+1 
   657                           ;	low address of data in FSR
   658                           ;	high address + 1 of data in btemp-1
   659                           
   660  0BB1  23AD  120A  158A   	fcall	init_fetch0
   661  0BB4  0080               	movwf	0
   662  0BB5  0A84               	incf	4,f
   663  0BB6  0804               	movf	4,w
   664  0BB7  067D               	xorwf	125,w
   665  0BB8  1903               	btfsc	3,2
   666  0BB9  3400               	retlw	0
   667  0BBA  0AFF               	incf	127,f
   668  0BBB  1903               	btfsc	3,2
   669  0BBC  0AFE               	incf	126,f
   670  0BBD  2BB1               	goto	init_ram0
   671                           
   672                           	psect	clrtext
   673  0B24                     clear_ram0:	
   674                           ;	Called with FSR containing the base address, and
   675                           ;	W with the last address+1
   676                           
   677  0B24  0064               	clrwdt	;clear the watchdog before getting into this loop
   678  0B25                     clrloop0:	
   679  0B25  0180               	clrf	0	;clear RAM location pointed to by FSR
   680  0B26  0A84               	incf	4,f	;increment pointer
   681  0B27  0604               	xorwf	4,w	;XOR with final address
   682  0B28  1903               	btfsc	3,2	;have we reached the end yet?
   683  0B29  3400               	retlw	0	;all done for this memory range, return
   684  0B2A  0604               	xorwf	4,w	;XOR again to restore value
   685  0B2B  2B25               	goto	clrloop0	;do the next byte
   686                           
   687                           	psect	cstackCOMMON
   688  0070                     __pcstackCOMMON:	
   689  0070                     ?_value1:	
   690  0070                     ?_value2:	
   691                           ; 1 bit 
   692                           
   693  0070                     ?_value3:	
   694                           ; 1 bit 
   695                           
   696  0070                     ?_value4:	
   697                           ; 1 bit 
   698                           
   699  0070                     ?_value5:	
   700                           ; 1 bit 
   701                           
   702  0070                     ?_ready:	
   703                           ; 1 bit 
   704                           
   705  0070                     ?_Lcd_Port:	
   706                           ; 1 bit 
   707                           
   708  0070                     ?_Lcd_Cmd:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_Lcd_Init:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_Lcd_Write_Char:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_uart_init:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_uart_txc:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_uart_rx:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?_uart_response:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_adc_init:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?_timer1_init:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ?_buzzer:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?_main:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?_T1:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_Lcd_Clear:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0070                     ?i1___wmul:	
   748                           ; 2 bytes @ 0x0
   749                           
   750  0070                     i1___wmul@multiplier:	
   751                           ; 2 bytes @ 0x0
   752                           
   753                           
   754                           ; 2 bytes @ 0x0
   755  0070                     	ds	2
   756  0072                     i1___wmul@multiplicand:	
   757                           
   758                           ; 2 bytes @ 0x2
   759  0072                     	ds	2
   760  0074                     ??i1___wmul:	
   761  0074                     i1___wmul@product:	
   762                           ; 1 bytes @ 0x4
   763                           
   764                           
   765                           ; 2 bytes @ 0x4
   766  0074                     	ds	2
   767  0076                     ??_T1:	
   768                           
   769                           ; 1 bytes @ 0x6
   770  0076                     	ds	6
   771                           
   772                           	psect	cstackBANK0
   773  0020                     __pcstackBANK0:	
   774  0020                     ??_Lcd_Port:	
   775  0020                     ??_uart_init:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0020                     ??_uart_txc:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0020                     ??_uart_rx:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0020                     ??_uart_response:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0020                     ??_adc_init:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0020                     ??_timer1_init:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0020                     ??_buzzer:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0020                     ?_adc_read:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0020                     ?___lwdiv:	
   800                           ; 2 bytes @ 0x0
   801                           
   802  0020                     ?___ftpack:	
   803                           ; 2 bytes @ 0x0
   804                           
   805  0020                     Lcd_Port@a:	
   806                           ; 3 bytes @ 0x0
   807                           
   808  0020                     uart_txc@ch:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0020                     ___lwdiv@divisor:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     ___ftpack@arg:	
   815                           ; 2 bytes @ 0x0
   816                           
   817                           
   818                           ; 3 bytes @ 0x0
   819  0020                     	ds	1
   820  0021                     ??_Lcd_Cmd:	
   821  0021                     ??_Lcd_Write_Char:	
   822                           ; 1 bytes @ 0x1
   823                           
   824  0021                     ?_uart_txs:	
   825                           ; 1 bytes @ 0x1
   826                           
   827  0021                     uart_txs@st:	
   828                           ; 1 bytes @ 0x1
   829                           
   830                           
   831                           ; 2 bytes @ 0x1
   832  0021                     	ds	1
   833  0022                     ??_adc_read:	
   834  0022                     Lcd_Write_Char@temp:	
   835                           ; 1 bytes @ 0x2
   836                           
   837  0022                     ___lwdiv@dividend:	
   838                           ; 1 bytes @ 0x2
   839                           
   840                           
   841                           ; 2 bytes @ 0x2
   842  0022                     	ds	1
   843  0023                     ??_uart_txs:	
   844  0023                     Lcd_Cmd@a:	
   845                           ; 1 bytes @ 0x3
   846                           
   847  0023                     Lcd_Write_Char@y:	
   848                           ; 1 bytes @ 0x3
   849                           
   850  0023                     ___ftpack@exp:	
   851                           ; 1 bytes @ 0x3
   852                           
   853                           
   854                           ; 1 bytes @ 0x3
   855  0023                     	ds	1
   856  0024                     ??_Lcd_Clear:	
   857  0024                     ?_Lcd_Set_Cursor:	
   858                           ; 1 bytes @ 0x4
   859                           
   860  0024                     ??_Lcd_Init:	
   861                           ; 1 bytes @ 0x4
   862                           
   863  0024                     ??___lwdiv:	
   864                           ; 1 bytes @ 0x4
   865                           
   866  0024                     Lcd_Set_Cursor@b:	
   867                           ; 1 bytes @ 0x4
   868                           
   869  0024                     Lcd_Write_Char@a:	
   870                           ; 1 bytes @ 0x4
   871                           
   872  0024                     adc_read@channel:	
   873                           ; 1 bytes @ 0x4
   874                           
   875  0024                     ___ftpack@sign:	
   876                           ; 1 bytes @ 0x4
   877                           
   878  0024                     uart_response@strings:	
   879                           ; 1 bytes @ 0x4
   880                           
   881                           
   882                           ; 12 bytes @ 0x4
   883  0024                     	ds	1
   884  0025                     ??___ftpack:	
   885  0025                     ??_Lcd_Set_Cursor:	
   886                           ; 1 bytes @ 0x5
   887                           
   888  0025                     ?_Lcd_Write_String:	
   889                           ; 1 bytes @ 0x5
   890                           
   891  0025                     Lcd_Write_String@a:	
   892                           ; 1 bytes @ 0x5
   893                           
   894  0025                     ___lwdiv@quotient:	
   895                           ; 2 bytes @ 0x5
   896                           
   897                           
   898                           ; 2 bytes @ 0x5
   899  0025                     	ds	2
   900  0027                     ??_Lcd_Write_String:	
   901  0027                     Lcd_Set_Cursor@a:	
   902                           ; 1 bytes @ 0x7
   903                           
   904  0027                     ___lwdiv@counter:	
   905                           ; 1 bytes @ 0x7
   906                           
   907                           
   908                           ; 1 bytes @ 0x7
   909  0027                     	ds	1
   910  0028                     ?___lwmod:	
   911  0028                     ?___lwtoft:	
   912                           ; 2 bytes @ 0x8
   913                           
   914  0028                     Lcd_Set_Cursor@z:	
   915                           ; 3 bytes @ 0x8
   916                           
   917  0028                     ___lwmod@divisor:	
   918                           ; 1 bytes @ 0x8
   919                           
   920  0028                     ___lwtoft@c:	
   921                           ; 2 bytes @ 0x8
   922                           
   923                           
   924                           ; 2 bytes @ 0x8
   925  0028                     	ds	1
   926  0029                     Lcd_Set_Cursor@y:	
   927                           
   928                           ; 1 bytes @ 0x9
   929  0029                     	ds	1
   930  002A                     Lcd_Set_Cursor@temp:	
   931  002A                     Lcd_Write_String@i:	
   932                           ; 1 bytes @ 0xA
   933                           
   934  002A                     ___lwmod@dividend:	
   935                           ; 2 bytes @ 0xA
   936                           
   937                           
   938                           ; 2 bytes @ 0xA
   939  002A                     	ds	1
   940  002B                     ??___lwtoft:	
   941                           
   942                           ; 1 bytes @ 0xB
   943  002B                     	ds	1
   944  002C                     ??___lwmod:	
   945  002C                     ?___ftmul:	
   946                           ; 1 bytes @ 0xC
   947                           
   948  002C                     ___ftmul@f1:	
   949                           ; 3 bytes @ 0xC
   950                           
   951                           
   952                           ; 3 bytes @ 0xC
   953  002C                     	ds	1
   954  002D                     ___lwmod@counter:	
   955                           
   956                           ; 1 bytes @ 0xD
   957  002D                     	ds	1
   958  002E                     ?_sprintf:	
   959  002E                     sprintf@f:	
   960                           ; 2 bytes @ 0xE
   961                           
   962                           
   963                           ; 2 bytes @ 0xE
   964  002E                     	ds	1
   965  002F                     ___ftmul@f2:	
   966                           
   967                           ; 3 bytes @ 0xF
   968  002F                     	ds	1
   969  0030                     uart_response@so_far:	
   970                           
   971                           ; 6 bytes @ 0x10
   972  0030                     	ds	2
   973  0032                     ??_sprintf:	
   974  0032                     ??___ftmul:	
   975                           ; 1 bytes @ 0x12
   976                           
   977                           
   978                           ; 1 bytes @ 0x12
   979  0032                     	ds	3
   980  0035                     sprintf@prec:	
   981                           
   982                           ; 1 bytes @ 0x15
   983  0035                     	ds	1
   984  0036                     uart_response@received:	
   985  0036                     sprintf@ap:	
   986                           ; 1 bytes @ 0x16
   987                           
   988  0036                     ___ftmul@exp:	
   989                           ; 1 bytes @ 0x16
   990                           
   991                           
   992                           ; 1 bytes @ 0x16
   993  0036                     	ds	1
   994  0037                     uart_response@response:	
   995  0037                     sprintf@flag:	
   996                           ; 1 bytes @ 0x17
   997                           
   998  0037                     ___ftmul@f3_as_product:	
   999                           ; 1 bytes @ 0x17
  1000                           
  1001                           
  1002                           ; 3 bytes @ 0x17
  1003  0037                     	ds	1
  1004  0038                     uart_response@continue_loop:	
  1005  0038                     sprintf@val:	
  1006                           ; 1 bytes @ 0x18
  1007                           
  1008                           
  1009                           ; 2 bytes @ 0x18
  1010  0038                     	ds	1
  1011  0039                     uart_response@i:	
  1012                           
  1013                           ; 1 bytes @ 0x19
  1014  0039                     	ds	1
  1015  003A                     ??_value1:	
  1016  003A                     ??_value2:	
  1017                           ; 1 bytes @ 0x1A
  1018                           
  1019  003A                     ??_value3:	
  1020                           ; 1 bytes @ 0x1A
  1021                           
  1022  003A                     ??_value4:	
  1023                           ; 1 bytes @ 0x1A
  1024                           
  1025  003A                     ??_value5:	
  1026                           ; 1 bytes @ 0x1A
  1027                           
  1028  003A                     ??_ready:	
  1029                           ; 1 bytes @ 0x1A
  1030                           
  1031  003A                     sprintf@sp:	
  1032                           ; 1 bytes @ 0x1A
  1033                           
  1034  003A                     ___ftmul@cntr:	
  1035                           ; 1 bytes @ 0x1A
  1036                           
  1037                           
  1038                           ; 1 bytes @ 0x1A
  1039  003A                     	ds	1
  1040  003B                     sprintf@c:	
  1041  003B                     ___ftmul@sign:	
  1042                           ; 1 bytes @ 0x1B
  1043                           
  1044                           
  1045                           ; 1 bytes @ 0x1B
  1046  003B                     	ds	1
  1047  003C                     ?___fttol:	
  1048  003C                     ___fttol@f1:	
  1049                           ; 4 bytes @ 0x1C
  1050                           
  1051                           
  1052                           ; 3 bytes @ 0x1C
  1053  003C                     	ds	4
  1054  0040                     ??___fttol:	
  1055                           
  1056                           ; 1 bytes @ 0x20
  1057  0040                     	ds	4
  1058  0044                     ___fttol@sign1:	
  1059                           
  1060                           ; 1 bytes @ 0x24
  1061  0044                     	ds	1
  1062  0045                     ___fttol@lval:	
  1063                           
  1064                           ; 4 bytes @ 0x25
  1065  0045                     	ds	4
  1066  0049                     ___fttol@exp1:	
  1067                           
  1068                           ; 1 bytes @ 0x29
  1069  0049                     	ds	1
  1070  004A                     ??_main:	
  1071                           
  1072                           ; 1 bytes @ 0x2A
  1073  004A                     	ds	3
  1074  004D                     main@t:	
  1075                           
  1076                           ; 10 bytes @ 0x2D
  1077  004D                     	ds	10
  1078  0057                     main@p:	
  1079                           
  1080                           ; 10 bytes @ 0x37
  1081  0057                     	ds	10
  1082  0061                     main@h:	
  1083                           
  1084                           ; 10 bytes @ 0x41
  1085  0061                     	ds	10
  1086                           
  1087                           	psect	maintext
  1088  0033                     __pmaintext:	
  1089 ;;
  1090 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1091 ;;
  1092 ;; *************** function _main *****************
  1093 ;; Defined at:
  1094 ;;		line 153 in file "stroke main.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  h              10   65[BANK0 ] unsigned char [10]
  1099 ;;  p              10   55[BANK0 ] unsigned char [10]
  1100 ;;  t              10   45[BANK0 ] unsigned char [10]
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  1    wreg      void 
  1103 ;; Registers used:
  1104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : B00/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1110 ;;      Params:         0       0       0       0       0
  1111 ;;      Locals:         0      30       0       0       0
  1112 ;;      Temps:          0       3       0       0       0
  1113 ;;      Totals:         0      33       0       0       0
  1114 ;;Total ram usage:       33 bytes
  1115 ;; Hardware stack levels required when called:    5
  1116 ;; This function calls:
  1117 ;;		_Lcd_Clear
  1118 ;;		_Lcd_Init
  1119 ;;		_Lcd_Set_Cursor
  1120 ;;		_Lcd_Write_String
  1121 ;;		___ftmul
  1122 ;;		___fttol
  1123 ;;		___lwtoft
  1124 ;;		_adc_init
  1125 ;;		_adc_read
  1126 ;;		_buzzer
  1127 ;;		_ready
  1128 ;;		_sprintf
  1129 ;;		_timer1_init
  1130 ;;		_uart_init
  1131 ;;		_uart_txc
  1132 ;;		_uart_txs
  1133 ;;		_value1
  1134 ;;		_value2
  1135 ;;		_value3
  1136 ;;		_value4
  1137 ;;		_value5
  1138 ;; This function is called by:
  1139 ;;		Startup code after reset
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           
  1144                           ;psect for function _main
  1145  0033                     _main:	
  1146                           
  1147                           ;stroke main.c: 154: TRISB6 = 1;
  1148                           
  1149                           ;incstack = 0
  1150                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1151  0033  1683               	bsf	3,5	;RP0=1, select bank1
  1152  0034  1303               	bcf	3,6	;RP1=0, select bank1
  1153  0035  1706               	bsf	6,6	;volatile
  1154                           
  1155                           ;stroke main.c: 155: TRISB7 = 1;
  1156  0036  1786               	bsf	6,7	;volatile
  1157                           
  1158                           ;stroke main.c: 156: TRISB0 = 0;
  1159  0037  1006               	bcf	6,0	;volatile
  1160                           
  1161                           ;stroke main.c: 157: RB0 = 0;
  1162  0038  1283               	bcf	3,5	;RP0=0, select bank0
  1163  0039  1303               	bcf	3,6	;RP1=0, select bank0
  1164  003A  1006               	bcf	6,0	;volatile
  1165                           
  1166                           ;stroke main.c: 158: TRISA =0xFF;
  1167  003B  30FF               	movlw	255
  1168  003C  1683               	bsf	3,5	;RP0=1, select bank1
  1169  003D  1303               	bcf	3,6	;RP1=0, select bank1
  1170  003E  0085               	movwf	5	;volatile
  1171                           
  1172                           ;stroke main.c: 159: TRISD = 0x00;
  1173  003F  0188               	clrf	8	;volatile
  1174                           
  1175                           ;stroke main.c: 160: timer1_init();
  1176  0040  120A  158A  239E  120A  118A  	fcall	_timer1_init
  1177                           
  1178                           ;stroke main.c: 161: OPTION_REG = 0b00101000;
  1179  0045  3028               	movlw	40
  1180  0046  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0047  1303               	bcf	3,6	;RP1=0, select bank1
  1182  0048  0081               	movwf	1	;volatile
  1183                           
  1184                           ;stroke main.c: 162: TMR0 = 0;
  1185  0049  1283               	bcf	3,5	;RP0=0, select bank0
  1186  004A  1303               	bcf	3,6	;RP1=0, select bank0
  1187  004B  0181               	clrf	1	;volatile
  1188                           
  1189                           ;stroke main.c: 163: INTCON = 0xC0;
  1190  004C  30C0               	movlw	192
  1191  004D  008B               	movwf	11	;volatile
  1192                           
  1193                           ;stroke main.c: 164: char t[10],p[10],h[10];
  1194                           ;stroke main.c: 165: Lcd_Init();
  1195  004E  120A  158A  263E  120A  118A  	fcall	_Lcd_Init
  1196                           
  1197                           ;stroke main.c: 166: uart_init();
  1198  0053  120A  158A  23BE  120A  118A  	fcall	_uart_init
  1199                           
  1200                           ;stroke main.c: 167: adc_init();
  1201  0058  120A  158A  232C  120A  118A  	fcall	_adc_init
  1202                           
  1203                           ;stroke main.c: 168: Lcd_Clear();
  1204  005D  120A  158A  233F  120A  118A  	fcall	_Lcd_Clear
  1205                           
  1206                           ;stroke main.c: 169: Lcd_Set_Cursor(1,1);
  1207  0062  1283               	bcf	3,5	;RP0=0, select bank0
  1208  0063  1303               	bcf	3,6	;RP1=0, select bank0
  1209  0064  01A4               	clrf	Lcd_Set_Cursor@b
  1210  0065  0AA4               	incf	Lcd_Set_Cursor@b,f
  1211  0066  3001               	movlw	1
  1212  0067  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1213                           
  1214                           ;stroke main.c: 170: Lcd_Write_String("     WAKE UP    ");
  1215  006C  304A               	movlw	low (STR_7| (0+32768))
  1216  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1217  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1218  006F  00A5               	movwf	Lcd_Write_String@a
  1219  0070  3085               	movlw	high (STR_7| (0+32768))
  1220  0071  00A6               	movwf	Lcd_Write_String@a+1
  1221  0072  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1222                           
  1223                           ;stroke main.c: 171: Lcd_Set_Cursor(2,1);
  1224  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0079  01A4               	clrf	Lcd_Set_Cursor@b
  1227  007A  0AA4               	incf	Lcd_Set_Cursor@b,f
  1228  007B  3002               	movlw	2
  1229  007C  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1230                           
  1231                           ;stroke main.c: 172: Lcd_Write_String(" STROKE PREDICT ");
  1232  0081  30B0               	movlw	low (STR_8| (0+32768))
  1233  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0084  00A5               	movwf	Lcd_Write_String@a
  1236  0085  3085               	movlw	high (STR_8| (0+32768))
  1237  0086  00A6               	movwf	Lcd_Write_String@a+1
  1238  0087  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1239                           
  1240                           ;stroke main.c: 173: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1241  008C  3033               	movlw	51
  1242  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1243  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1244  008F  00CC               	movwf	??_main+2
  1245  0090  30BB               	movlw	187
  1246  0091  00CB               	movwf	??_main+1
  1247  0092  30DF               	movlw	223
  1248  0093  00CA               	movwf	??_main
  1249  0094                     u2197:	
  1250  0094  0BCA               	decfsz	??_main,f
  1251  0095  2894               	goto	u2197
  1252  0096  0BCB               	decfsz	??_main+1,f
  1253  0097  2894               	goto	u2197
  1254  0098  0BCC               	decfsz	??_main+2,f
  1255  0099  2894               	goto	u2197
  1256                           
  1257                           ;stroke main.c: 174: Lcd_Clear();
  1258  009A  120A  158A  233F  120A  118A  	fcall	_Lcd_Clear
  1259  009F                     l2172:	
  1260                           ;stroke main.c: 175: do{
  1261                           
  1262                           
  1263                           ;stroke main.c: 176: Lcd_Set_Cursor(1,1);
  1264  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1265  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1266  00A1  01A4               	clrf	Lcd_Set_Cursor@b
  1267  00A2  0AA4               	incf	Lcd_Set_Cursor@b,f
  1268  00A3  3001               	movlw	1
  1269  00A4  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1270                           
  1271                           ;stroke main.c: 177: Lcd_Write_String(" Initializing...");
  1272  00A9  30C1               	movlw	low (STR_9| (0+32768))
  1273  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1274  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1275  00AC  00A5               	movwf	Lcd_Write_String@a
  1276  00AD  3085               	movlw	high (STR_9| (0+32768))
  1277  00AE  00A6               	movwf	Lcd_Write_String@a+1
  1278  00AF  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1279                           
  1280                           ;stroke main.c: 178: Lcd_Set_Cursor(2,1);
  1281  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1282  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1283  00B6  01A4               	clrf	Lcd_Set_Cursor@b
  1284  00B7  0AA4               	incf	Lcd_Set_Cursor@b,f
  1285  00B8  3002               	movlw	2
  1286  00B9  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1287                           
  1288                           ;stroke main.c: 179: Lcd_Write_String("   IOT MODEM    ");
  1289  00BE  3039               	movlw	low (STR_10| (0+32768))
  1290  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1291  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  1292  00C1  00A5               	movwf	Lcd_Write_String@a
  1293  00C2  3085               	movlw	high (STR_10| (0+32768))
  1294  00C3  00A6               	movwf	Lcd_Write_String@a+1
  1295  00C4  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1296                           
  1297                           ;stroke main.c: 180: }while(!ready());
  1298  00C9  120A  158A  234A  120A  118A  	fcall	_ready
  1299  00CE  1C03               	btfss	3,0
  1300  00CF  289F               	goto	l2172
  1301  00D0                     l2182:	
  1302                           
  1303                           ;stroke main.c: 181: Lcd_Clear();
  1304  00D0  120A  158A  233F  120A  118A  	fcall	_Lcd_Clear
  1305  00D5                     l222:	
  1306                           ;stroke main.c: 182: while(1){
  1307                           
  1308                           
  1309                           ;stroke main.c: 183: temp = adc_read(0);
  1310  00D5  3000               	movlw	0
  1311  00D6  120A  158A  2441  120A  118A  	fcall	_adc_read
  1312  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  1313  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1314  00DD  0821               	movf	?_adc_read+1,w
  1315  00DE  00EC               	movwf	_temp+1
  1316  00DF  0820               	movf	?_adc_read,w
  1317  00E0  00EB               	movwf	_temp
  1318                           
  1319                           ;stroke main.c: 184: press = adc_read(1);
  1320  00E1  3001               	movlw	1
  1321  00E2  120A  158A  2441  120A  118A  	fcall	_adc_read
  1322  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1323  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1324  00E9  0821               	movf	?_adc_read+1,w
  1325  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1326  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1327  00EC  00AD               	movwf	(_press+1)^(0+128)
  1328  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1329  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1330  00EF  0820               	movf	?_adc_read,w
  1331  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1332  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  1333  00F2  00AC               	movwf	_press^(0+128)
  1334                           
  1335                           ;stroke main.c: 185: temp = (float)temp * 0.4887;
  1336  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1337  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1338  00F5  086C               	movf	_temp+1,w
  1339  00F6  00A9               	movwf	___lwtoft@c+1
  1340  00F7  086B               	movf	_temp,w
  1341  00F8  00A8               	movwf	___lwtoft@c
  1342  00F9  120A  158A  23E8  120A  118A  	fcall	___lwtoft
  1343  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1344  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0100  0828               	movf	?___lwtoft,w
  1346  0101  00AF               	movwf	___ftmul@f2
  1347  0102  0829               	movf	?___lwtoft+1,w
  1348  0103  00B0               	movwf	___ftmul@f2+1
  1349  0104  082A               	movf	?___lwtoft+2,w
  1350  0105  00B1               	movwf	___ftmul@f2+2
  1351  0106  3037               	movlw	55
  1352  0107  00AC               	movwf	___ftmul@f1
  1353  0108  30FA               	movlw	250
  1354  0109  00AD               	movwf	___ftmul@f1+1
  1355  010A  303E               	movlw	62
  1356  010B  00AE               	movwf	___ftmul@f1+2
  1357  010C  120A  158A  272D  120A  118A  	fcall	___ftmul
  1358  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0112  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0113  082C               	movf	?___ftmul,w
  1361  0114  00BC               	movwf	___fttol@f1
  1362  0115  082D               	movf	?___ftmul+1,w
  1363  0116  00BD               	movwf	___fttol@f1+1
  1364  0117  082E               	movf	?___ftmul+2,w
  1365  0118  00BE               	movwf	___fttol@f1+2
  1366  0119  120A  158A  269F  120A  118A  	fcall	___fttol
  1367  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1368  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1369  0120  083D               	movf	?___fttol+1,w
  1370  0121  00EC               	movwf	_temp+1
  1371  0122  083C               	movf	?___fttol,w
  1372  0123  00EB               	movwf	_temp
  1373                           
  1374                           ;stroke main.c: 186: if(temp>=35){
  1375  0124  3000               	movlw	0
  1376  0125  026C               	subwf	_temp+1,w
  1377  0126  3023               	movlw	35
  1378  0127  1903               	skipnz
  1379  0128  026B               	subwf	_temp,w
  1380  0129  1C03               	skipc
  1381  012A  2944               	goto	l2192
  1382                           
  1383                           ;stroke main.c: 187: Lcd_Set_Cursor(1,1);
  1384  012B  01A4               	clrf	Lcd_Set_Cursor@b
  1385  012C  0AA4               	incf	Lcd_Set_Cursor@b,f
  1386  012D  3001               	movlw	1
  1387  012E  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1388                           
  1389                           ;stroke main.c: 188: Lcd_Write_String("HIGH T");
  1390  0133  3009               	movlw	low (STR_11| (0+32768))
  1391  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0135  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0136  00A5               	movwf	Lcd_Write_String@a
  1394  0137  3086               	movlw	high (STR_11| (0+32768))
  1395  0138  00A6               	movwf	Lcd_Write_String@a+1
  1396  0139  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1397                           
  1398                           ;stroke main.c: 189: buzzer();
  1399  013E  120A  158A  25A3  120A  118A  	fcall	_buzzer
  1400                           
  1401                           ;stroke main.c: 190: }
  1402  0143  2980               	goto	l2198
  1403  0144                     l2192:	
  1404                           
  1405                           ;stroke main.c: 191: else{
  1406                           ;stroke main.c: 192: Lcd_Set_Cursor(1,1);
  1407  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0145  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0146  01A4               	clrf	Lcd_Set_Cursor@b
  1410  0147  0AA4               	incf	Lcd_Set_Cursor@b,f
  1411  0148  3001               	movlw	1
  1412  0149  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1413                           
  1414                           ;stroke main.c: 193: Lcd_Write_String("T : ");
  1415  014E  302D               	movlw	low (STR_12| (0+32768))
  1416  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0151  00A5               	movwf	Lcd_Write_String@a
  1419  0152  3086               	movlw	high (STR_12| (0+32768))
  1420  0153  00A6               	movwf	Lcd_Write_String@a+1
  1421  0154  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1422                           
  1423                           ;stroke main.c: 194: Lcd_Set_Cursor(1,5);
  1424  0159  3005               	movlw	5
  1425  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1426  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1427  015C  00CA               	movwf	??_main
  1428  015D  084A               	movf	??_main,w
  1429  015E  00A4               	movwf	Lcd_Set_Cursor@b
  1430  015F  3001               	movlw	1
  1431  0160  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1432                           
  1433                           ;stroke main.c: 195: sprintf(t,"%u ",temp);
  1434  0165  3040               	movlw	low (STR_13| (0+32768))
  1435  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1436  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1437  0168  00AE               	movwf	sprintf@f
  1438  0169  3086               	movlw	high (STR_13| (0+32768))
  1439  016A  00AF               	movwf	sprintf@f+1
  1440  016B  086C               	movf	_temp+1,w
  1441  016C  00B1               	movwf	?_sprintf+3
  1442  016D  086B               	movf	_temp,w
  1443  016E  00B0               	movwf	?_sprintf+2
  1444  016F  304D               	movlw	(low (main@t| 0))& (0+255)
  1445  0170  120A  118A  2648  120A  118A  	fcall	_sprintf
  1446                           
  1447                           ;stroke main.c: 196: Lcd_Write_String(t);
  1448  0175  304D               	movlw	(low (main@t| 0))& (0+255)
  1449  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1450  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1451  0178  00A5               	movwf	Lcd_Write_String@a
  1452  0179  3000               	movlw	0
  1453  017A  00A6               	movwf	Lcd_Write_String@a+1
  1454  017B  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1455  0180                     l2198:	
  1456                           
  1457                           ;stroke main.c: 197: }
  1458                           ;stroke main.c: 198: if(pbeat != cbeat){
  1459  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1461  0182  086E               	movf	_cbeat+1,w
  1462  0183  067D               	xorwf	_pbeat+1,w
  1463  0184  1D03               	skipz
  1464  0185  2988               	goto	u2065
  1465  0186  086D               	movf	_cbeat,w
  1466  0187  067C               	xorwf	_pbeat,w
  1467  0188                     u2065:	
  1468  0188  1903               	skipnz
  1469  0189  29D9               	goto	l2212
  1470                           
  1471                           ;stroke main.c: 199: Lcd_Set_Cursor(1,10);
  1472  018A  300A               	movlw	10
  1473  018B  00CA               	movwf	??_main
  1474  018C  084A               	movf	??_main,w
  1475  018D  00A4               	movwf	Lcd_Set_Cursor@b
  1476  018E  3001               	movlw	1
  1477  018F  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1478                           
  1479                           ;stroke main.c: 200: Lcd_Write_String("H : ");
  1480  0194  3028               	movlw	low (STR_14| (0+32768))
  1481  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0197  00A5               	movwf	Lcd_Write_String@a
  1484  0198  3086               	movlw	high (STR_14| (0+32768))
  1485  0199  00A6               	movwf	Lcd_Write_String@a+1
  1486  019A  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1487                           
  1488                           ;stroke main.c: 201: Lcd_Set_Cursor(1,14);
  1489  019F  300E               	movlw	14
  1490  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1491  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1492  01A2  00CA               	movwf	??_main
  1493  01A3  084A               	movf	??_main,w
  1494  01A4  00A4               	movwf	Lcd_Set_Cursor@b
  1495  01A5  3001               	movlw	1
  1496  01A6  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1497                           
  1498                           ;stroke main.c: 202: sprintf(h,"%d ",cbeat);
  1499  01AB  303C               	movlw	low (STR_15| (0+32768))
  1500  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1501  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1502  01AE  00AE               	movwf	sprintf@f
  1503  01AF  3086               	movlw	high (STR_15| (0+32768))
  1504  01B0  00AF               	movwf	sprintf@f+1
  1505  01B1  086E               	movf	_cbeat+1,w
  1506  01B2  00B1               	movwf	?_sprintf+3
  1507  01B3  086D               	movf	_cbeat,w
  1508  01B4  00B0               	movwf	?_sprintf+2
  1509  01B5  3061               	movlw	(low (main@h| 0))& (0+255)
  1510  01B6  120A  118A  2648  120A  118A  	fcall	_sprintf
  1511                           
  1512                           ;stroke main.c: 203: Lcd_Write_String(h);
  1513  01BB  3061               	movlw	(low (main@h| 0))& (0+255)
  1514  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1515  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1516  01BE  00A5               	movwf	Lcd_Write_String@a
  1517  01BF  3000               	movlw	0
  1518  01C0  00A6               	movwf	Lcd_Write_String@a+1
  1519  01C1  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1520                           
  1521                           ;stroke main.c: 204: pbeat = cbeat;
  1522  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1523  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  1524  01C8  086E               	movf	_cbeat+1,w
  1525  01C9  00FD               	movwf	_pbeat+1
  1526  01CA  086D               	movf	_cbeat,w
  1527  01CB  00FC               	movwf	_pbeat
  1528                           
  1529                           ;stroke main.c: 205: if(cbeat >= 140)
  1530  01CC  3000               	movlw	0
  1531  01CD  026E               	subwf	_cbeat+1,w
  1532  01CE  308C               	movlw	140
  1533  01CF  1903               	skipnz
  1534  01D0  026D               	subwf	_cbeat,w
  1535  01D1  1C03               	skipc
  1536  01D2  2A17               	goto	l2218
  1537                           
  1538                           ;stroke main.c: 206: buzzer();
  1539  01D3  120A  158A  25A3  120A  118A  	fcall	_buzzer
  1540                           
  1541                           ;stroke main.c: 207: }
  1542  01D8  2A17               	goto	l2218
  1543  01D9                     l2212:	
  1544                           
  1545                           ;stroke main.c: 208: else{
  1546                           ;stroke main.c: 209: Lcd_Set_Cursor(1,10);
  1547  01D9  300A               	movlw	10
  1548  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1549  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1550  01DC  00CA               	movwf	??_main
  1551  01DD  084A               	movf	??_main,w
  1552  01DE  00A4               	movwf	Lcd_Set_Cursor@b
  1553  01DF  3001               	movlw	1
  1554  01E0  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1555                           
  1556                           ;stroke main.c: 210: Lcd_Write_String("H : ");
  1557  01E5  3028               	movlw	low (STR_14| (0+32768))
  1558  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1559  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  1560  01E8  00A5               	movwf	Lcd_Write_String@a
  1561  01E9  3086               	movlw	high (STR_14| (0+32768))
  1562  01EA  00A6               	movwf	Lcd_Write_String@a+1
  1563  01EB  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1564                           
  1565                           ;stroke main.c: 211: Lcd_Set_Cursor(1,14);
  1566  01F0  300E               	movlw	14
  1567  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1568  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1569  01F3  00CA               	movwf	??_main
  1570  01F4  084A               	movf	??_main,w
  1571  01F5  00A4               	movwf	Lcd_Set_Cursor@b
  1572  01F6  3001               	movlw	1
  1573  01F7  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1574                           
  1575                           ;stroke main.c: 212: sprintf(h,"%d ",pbeat);
  1576  01FC  303C               	movlw	low (STR_15| (0+32768))
  1577  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1578  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1579  01FF  00AE               	movwf	sprintf@f
  1580  0200  3086               	movlw	high (STR_15| (0+32768))
  1581  0201  00AF               	movwf	sprintf@f+1
  1582  0202  087D               	movf	_pbeat+1,w
  1583  0203  00B1               	movwf	?_sprintf+3
  1584  0204  087C               	movf	_pbeat,w
  1585  0205  00B0               	movwf	?_sprintf+2
  1586  0206  3061               	movlw	(low (main@h| 0))& (0+255)
  1587  0207  120A  118A  2648  120A  118A  	fcall	_sprintf
  1588                           
  1589                           ;stroke main.c: 213: Lcd_Write_String(h);
  1590  020C  3061               	movlw	(low (main@h| 0))& (0+255)
  1591  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1592  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1593  020F  00A5               	movwf	Lcd_Write_String@a
  1594  0210  3000               	movlw	0
  1595  0211  00A6               	movwf	Lcd_Write_String@a+1
  1596  0212  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1597  0217                     l2218:	
  1598                           
  1599                           ;stroke main.c: 214: }
  1600                           ;stroke main.c: 215: if(press > 25){
  1601  0217  3000               	movlw	0
  1602  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1603  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1604  021A  022D               	subwf	(_press+1)^(0+128),w
  1605  021B  301A               	movlw	26
  1606  021C  1903               	skipnz
  1607  021D  022C               	subwf	_press^(0+128),w
  1608  021E  1C03               	skipc
  1609  021F  2A82               	goto	l2236
  1610                           
  1611                           ;stroke main.c: 216: c_press_count++;
  1612  0220  3001               	movlw	1
  1613  0221  07AA               	addwf	_c_press_count^(0+128),f
  1614  0222  1803               	skipnc
  1615  0223  0AAB               	incf	(_c_press_count+1)^(0+128),f
  1616  0224  3000               	movlw	0
  1617  0225  07AB               	addwf	(_c_press_count+1)^(0+128),f
  1618                           
  1619                           ;stroke main.c: 217: Lcd_Set_Cursor(2,1);
  1620  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1621  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1622  0228  01A4               	clrf	Lcd_Set_Cursor@b
  1623  0229  0AA4               	incf	Lcd_Set_Cursor@b,f
  1624  022A  3002               	movlw	2
  1625  022B  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1626                           
  1627                           ;stroke main.c: 218: Lcd_Write_String("    ");
  1628  0230  3034               	movlw	low ((STR_33+12)| (0+32768))
  1629  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0233  00A5               	movwf	Lcd_Write_String@a
  1632  0234  3085               	movlw	high ((STR_33+12)| (0+32768))
  1633  0235  00A6               	movwf	Lcd_Write_String@a+1
  1634  0236  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1635                           
  1636                           ;stroke main.c: 219: Lcd_Set_Cursor(2,5);
  1637  023B  3005               	movlw	5
  1638  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1639  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1640  023E  00CA               	movwf	??_main
  1641  023F  084A               	movf	??_main,w
  1642  0240  00A4               	movwf	Lcd_Set_Cursor@b
  1643  0241  3002               	movlw	2
  1644  0242  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1645                           
  1646                           ;stroke main.c: 220: Lcd_Write_String("RR : ");
  1647  0247  3010               	movlw	low (STR_19| (0+32768))
  1648  0248  1283               	bcf	3,5	;RP0=0, select bank0
  1649  0249  1303               	bcf	3,6	;RP1=0, select bank0
  1650  024A  00A5               	movwf	Lcd_Write_String@a
  1651  024B  3086               	movlw	high (STR_19| (0+32768))
  1652  024C  00A6               	movwf	Lcd_Write_String@a+1
  1653  024D  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1654                           
  1655                           ;stroke main.c: 221: Lcd_Set_Cursor(2,10);
  1656  0252  300A               	movlw	10
  1657  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0254  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0255  00CA               	movwf	??_main
  1660  0256  084A               	movf	??_main,w
  1661  0257  00A4               	movwf	Lcd_Set_Cursor@b
  1662  0258  3002               	movlw	2
  1663  0259  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1664                           
  1665                           ;stroke main.c: 222: sprintf(p,"%d ",c_press_count);
  1666  025E  303C               	movlw	low (STR_15| (0+32768))
  1667  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1668  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1669  0261  00AE               	movwf	sprintf@f
  1670  0262  3086               	movlw	high (STR_15| (0+32768))
  1671  0263  00AF               	movwf	sprintf@f+1
  1672  0264  1683               	bsf	3,5	;RP0=1, select bank1
  1673  0265  1303               	bcf	3,6	;RP1=0, select bank1
  1674  0266  082B               	movf	(_c_press_count+1)^(0+128),w
  1675  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1677  0269  00B1               	movwf	?_sprintf+3
  1678  026A  1683               	bsf	3,5	;RP0=1, select bank1
  1679  026B  1303               	bcf	3,6	;RP1=0, select bank1
  1680  026C  082A               	movf	_c_press_count^(0+128),w
  1681  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1682  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1683  026F  00B0               	movwf	?_sprintf+2
  1684  0270  3057               	movlw	(low (main@p| 0))& (0+255)
  1685  0271  120A  118A  2648  120A  118A  	fcall	_sprintf
  1686                           
  1687                           ;stroke main.c: 223: Lcd_Write_String(p);
  1688  0276  3057               	movlw	(low (main@p| 0))& (0+255)
  1689  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0278  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0279  00A5               	movwf	Lcd_Write_String@a
  1692  027A  3000               	movlw	0
  1693  027B  00A6               	movwf	Lcd_Write_String@a+1
  1694  027C  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1695                           
  1696                           ;stroke main.c: 224: }
  1697  0281  2AE1               	goto	l2250
  1698  0282                     l2236:	
  1699                           
  1700                           ;stroke main.c: 225: else
  1701                           ;stroke main.c: 226: {
  1702                           ;stroke main.c: 227: Lcd_Set_Cursor(2,1);
  1703  0282  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0283  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0284  01A4               	clrf	Lcd_Set_Cursor@b
  1706  0285  0AA4               	incf	Lcd_Set_Cursor@b,f
  1707  0286  3002               	movlw	2
  1708  0287  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1709                           
  1710                           ;stroke main.c: 228: Lcd_Write_String("    ");
  1711  028C  3034               	movlw	low ((STR_33+12)| (0+32768))
  1712  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1713  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1714  028F  00A5               	movwf	Lcd_Write_String@a
  1715  0290  3085               	movlw	high ((STR_33+12)| (0+32768))
  1716  0291  00A6               	movwf	Lcd_Write_String@a+1
  1717  0292  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1718                           
  1719                           ;stroke main.c: 229: Lcd_Set_Cursor(2,5);
  1720  0297  3005               	movlw	5
  1721  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1723  029A  00CA               	movwf	??_main
  1724  029B  084A               	movf	??_main,w
  1725  029C  00A4               	movwf	Lcd_Set_Cursor@b
  1726  029D  3002               	movlw	2
  1727  029E  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1728                           
  1729                           ;stroke main.c: 230: Lcd_Write_String("RR : ");
  1730  02A3  3010               	movlw	low (STR_19| (0+32768))
  1731  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1732  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  1733  02A6  00A5               	movwf	Lcd_Write_String@a
  1734  02A7  3086               	movlw	high (STR_19| (0+32768))
  1735  02A8  00A6               	movwf	Lcd_Write_String@a+1
  1736  02A9  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1737                           
  1738                           ;stroke main.c: 231: Lcd_Set_Cursor(2,10);
  1739  02AE  300A               	movlw	10
  1740  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1741  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1742  02B1  00CA               	movwf	??_main
  1743  02B2  084A               	movf	??_main,w
  1744  02B3  00A4               	movwf	Lcd_Set_Cursor@b
  1745  02B4  3002               	movlw	2
  1746  02B5  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1747                           
  1748                           ;stroke main.c: 232: sprintf(p,"%d ",c_press_count);
  1749  02BA  303C               	movlw	low (STR_15| (0+32768))
  1750  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  1751  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  1752  02BD  00AE               	movwf	sprintf@f
  1753  02BE  3086               	movlw	high (STR_15| (0+32768))
  1754  02BF  00AF               	movwf	sprintf@f+1
  1755  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  1756  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  1757  02C2  082B               	movf	(_c_press_count+1)^(0+128),w
  1758  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  1759  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  1760  02C5  00B1               	movwf	?_sprintf+3
  1761  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  1762  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  1763  02C8  082A               	movf	_c_press_count^(0+128),w
  1764  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1765  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  1766  02CB  00B0               	movwf	?_sprintf+2
  1767  02CC  3057               	movlw	(low (main@p| 0))& (0+255)
  1768  02CD  120A  118A  2648  120A  118A  	fcall	_sprintf
  1769                           
  1770                           ;stroke main.c: 233: Lcd_Write_String(p);
  1771  02D2  3057               	movlw	(low (main@p| 0))& (0+255)
  1772  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1773  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1774  02D5  00A5               	movwf	Lcd_Write_String@a
  1775  02D6  3000               	movlw	0
  1776  02D7  00A6               	movwf	Lcd_Write_String@a+1
  1777  02D8  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1778                           
  1779                           ;stroke main.c: 234: c_press_count = 0;
  1780  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  1781  02DE  1303               	bcf	3,6	;RP1=0, select bank1
  1782  02DF  01AA               	clrf	_c_press_count^(0+128)
  1783  02E0  01AB               	clrf	(_c_press_count+1)^(0+128)
  1784  02E1                     l2250:	
  1785                           
  1786                           ;stroke main.c: 235: }
  1787                           ;stroke main.c: 236: if(RB7 == 0){
  1788  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1789  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1790  02E3  1B86               	btfsc	6,7	;volatile
  1791  02E4  28D5               	goto	l222
  1792                           
  1793                           ;stroke main.c: 237: _delay((unsigned long)((50)*(20000000/4000.0)));
  1794  02E5  3002               	movlw	2
  1795  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1796  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1797  02E8  00CC               	movwf	??_main+2
  1798  02E9  3045               	movlw	69
  1799  02EA  00CB               	movwf	??_main+1
  1800  02EB  30A9               	movlw	169
  1801  02EC  00CA               	movwf	??_main
  1802  02ED                     u2207:	
  1803  02ED  0BCA               	decfsz	??_main,f
  1804  02EE  2AED               	goto	u2207
  1805  02EF  0BCB               	decfsz	??_main+1,f
  1806  02F0  2AED               	goto	u2207
  1807  02F1  0BCC               	decfsz	??_main+2,f
  1808  02F2  2AED               	goto	u2207
  1809                           
  1810                           ;stroke main.c: 238: if(RB7 == 0){
  1811  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  1812  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  1813  02F5  1B86               	btfsc	6,7	;volatile
  1814  02F6  28D5               	goto	l222
  1815                           
  1816                           ;stroke main.c: 239: Lcd_Clear();
  1817  02F7  120A  158A  233F  120A  118A  	fcall	_Lcd_Clear
  1818                           
  1819                           ;stroke main.c: 240: Lcd_Set_Cursor(1,1);
  1820  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1821  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1822  02FE  01A4               	clrf	Lcd_Set_Cursor@b
  1823  02FF  0AA4               	incf	Lcd_Set_Cursor@b,f
  1824  0300  3001               	movlw	1
  1825  0301  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1826                           
  1827                           ;stroke main.c: 241: Lcd_Write_String("  Uploading...  ");
  1828  0306  306C               	movlw	low (STR_24| (0+32768))
  1829  0307  1283               	bcf	3,5	;RP0=0, select bank0
  1830  0308  1303               	bcf	3,6	;RP1=0, select bank0
  1831  0309  00A5               	movwf	Lcd_Write_String@a
  1832  030A  3085               	movlw	high (STR_24| (0+32768))
  1833  030B  00A6               	movwf	Lcd_Write_String@a+1
  1834  030C  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1835                           
  1836                           ;stroke main.c: 242: uart_txc('~');
  1837  0311  307E               	movlw	126
  1838  0312  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1839  0317                     l2262:	
  1840                           ;stroke main.c: 243: while(!value1());
  1841                           
  1842  0317  120A  158A  2362  120A  118A  	fcall	_value1
  1843  031C  1C03               	btfss	3,0
  1844  031D  2B17               	goto	l2262
  1845                           
  1846                           ;stroke main.c: 244: Lcd_Set_Cursor(1,1);
  1847  031E  1283               	bcf	3,5	;RP0=0, select bank0
  1848  031F  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0320  01A4               	clrf	Lcd_Set_Cursor@b
  1850  0321  0AA4               	incf	Lcd_Set_Cursor@b,f
  1851  0322  3001               	movlw	1
  1852  0323  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1853                           
  1854                           ;stroke main.c: 245: Lcd_Write_String(" sending temp...");
  1855  0328  30D2               	movlw	low (STR_25| (0+32768))
  1856  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1857  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1858  032B  00A5               	movwf	Lcd_Write_String@a
  1859  032C  3085               	movlw	high (STR_25| (0+32768))
  1860  032D  00A6               	movwf	Lcd_Write_String@a+1
  1861  032E  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1862                           
  1863                           ;stroke main.c: 246: _delay((unsigned long)((50)*(20000000/4000.0)));
  1864  0333  3002               	movlw	2
  1865  0334  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0335  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0336  00CC               	movwf	??_main+2
  1868  0337  3045               	movlw	69
  1869  0338  00CB               	movwf	??_main+1
  1870  0339  30A9               	movlw	169
  1871  033A  00CA               	movwf	??_main
  1872  033B                     u2217:	
  1873  033B  0BCA               	decfsz	??_main,f
  1874  033C  2B3B               	goto	u2217
  1875  033D  0BCB               	decfsz	??_main+1,f
  1876  033E  2B3B               	goto	u2217
  1877  033F  0BCC               	decfsz	??_main+2,f
  1878  0340  2B3B               	goto	u2217
  1879                           
  1880                           ;stroke main.c: 247: uart_txs(t);uart_txc(0x0D);uart_txc(0x0A);
  1881  0341  304D               	movlw	(low (main@t| 0))& (0+255)
  1882  0342  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0343  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0344  00A1               	movwf	uart_txs@st
  1885  0345  3000               	movlw	0
  1886  0346  00A2               	movwf	uart_txs@st+1
  1887  0347  120A  158A  241C  120A  118A  	fcall	_uart_txs
  1888  034C  300D               	movlw	13
  1889  034D  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1890  0352  300A               	movlw	10
  1891  0353  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1892  0358                     l2276:	
  1893                           ;stroke main.c: 248: while(!value2());
  1894                           
  1895  0358  120A  158A  236E  120A  118A  	fcall	_value2
  1896  035D  1C03               	btfss	3,0
  1897  035E  2B58               	goto	l2276
  1898                           
  1899                           ;stroke main.c: 249: Lcd_Set_Cursor(1,1);
  1900  035F  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0360  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0361  01A4               	clrf	Lcd_Set_Cursor@b
  1903  0362  0AA4               	incf	Lcd_Set_Cursor@b,f
  1904  0363  3001               	movlw	1
  1905  0364  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1906                           
  1907                           ;stroke main.c: 250: Lcd_Write_String(" sending hr...  ");
  1908  0369  307D               	movlw	low (STR_26| (0+32768))
  1909  036A  1283               	bcf	3,5	;RP0=0, select bank0
  1910  036B  1303               	bcf	3,6	;RP1=0, select bank0
  1911  036C  00A5               	movwf	Lcd_Write_String@a
  1912  036D  3085               	movlw	high (STR_26| (0+32768))
  1913  036E  00A6               	movwf	Lcd_Write_String@a+1
  1914  036F  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1915                           
  1916                           ;stroke main.c: 251: _delay((unsigned long)((50)*(20000000/4000.0)));
  1917  0374  3002               	movlw	2
  1918  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1919  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1920  0377  00CC               	movwf	??_main+2
  1921  0378  3045               	movlw	69
  1922  0379  00CB               	movwf	??_main+1
  1923  037A  30A9               	movlw	169
  1924  037B  00CA               	movwf	??_main
  1925  037C                     u2227:	
  1926  037C  0BCA               	decfsz	??_main,f
  1927  037D  2B7C               	goto	u2227
  1928  037E  0BCB               	decfsz	??_main+1,f
  1929  037F  2B7C               	goto	u2227
  1930  0380  0BCC               	decfsz	??_main+2,f
  1931  0381  2B7C               	goto	u2227
  1932                           
  1933                           ;stroke main.c: 252: uart_txs(h);uart_txc(0x0D);uart_txc(0x0A);
  1934  0382  3061               	movlw	(low (main@h| 0))& (0+255)
  1935  0383  1283               	bcf	3,5	;RP0=0, select bank0
  1936  0384  1303               	bcf	3,6	;RP1=0, select bank0
  1937  0385  00A1               	movwf	uart_txs@st
  1938  0386  3000               	movlw	0
  1939  0387  00A2               	movwf	uart_txs@st+1
  1940  0388  120A  158A  241C  120A  118A  	fcall	_uart_txs
  1941  038D  300D               	movlw	13
  1942  038E  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1943  0393  300A               	movlw	10
  1944  0394  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1945  0399                     l2290:	
  1946                           ;stroke main.c: 253: while(!value3());
  1947                           
  1948  0399  120A  158A  237A  120A  118A  	fcall	_value3
  1949  039E  1C03               	btfss	3,0
  1950  039F  2B99               	goto	l2290
  1951                           
  1952                           ;stroke main.c: 254: Lcd_Set_Cursor(1,1);
  1953  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  1954  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  1955  03A2  01A4               	clrf	Lcd_Set_Cursor@b
  1956  03A3  0AA4               	incf	Lcd_Set_Cursor@b,f
  1957  03A4  3001               	movlw	1
  1958  03A5  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  1959                           
  1960                           ;stroke main.c: 255: Lcd_Write_String(" sending pres...");
  1961  03AA  30E3               	movlw	low (STR_27| (0+32768))
  1962  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  1963  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  1964  03AD  00A5               	movwf	Lcd_Write_String@a
  1965  03AE  3085               	movlw	high (STR_27| (0+32768))
  1966  03AF  00A6               	movwf	Lcd_Write_String@a+1
  1967  03B0  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  1968                           
  1969                           ;stroke main.c: 256: _delay((unsigned long)((50)*(20000000/4000.0)));
  1970  03B5  3002               	movlw	2
  1971  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  1972  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  1973  03B8  00CC               	movwf	??_main+2
  1974  03B9  3045               	movlw	69
  1975  03BA  00CB               	movwf	??_main+1
  1976  03BB  30A9               	movlw	169
  1977  03BC  00CA               	movwf	??_main
  1978  03BD                     u2237:	
  1979  03BD  0BCA               	decfsz	??_main,f
  1980  03BE  2BBD               	goto	u2237
  1981  03BF  0BCB               	decfsz	??_main+1,f
  1982  03C0  2BBD               	goto	u2237
  1983  03C1  0BCC               	decfsz	??_main+2,f
  1984  03C2  2BBD               	goto	u2237
  1985                           
  1986                           ;stroke main.c: 257: uart_txs(p);uart_txc(0x0D);uart_txc(0x0A);
  1987  03C3  3057               	movlw	(low (main@p| 0))& (0+255)
  1988  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1989  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  1990  03C6  00A1               	movwf	uart_txs@st
  1991  03C7  3000               	movlw	0
  1992  03C8  00A2               	movwf	uart_txs@st+1
  1993  03C9  120A  158A  241C  120A  118A  	fcall	_uart_txs
  1994  03CE  300D               	movlw	13
  1995  03CF  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1996  03D4  300A               	movlw	10
  1997  03D5  120A  158A  2356  120A  118A  	fcall	_uart_txc
  1998  03DA                     l2304:	
  1999                           ;stroke main.c: 258: while(!value4());
  2000                           
  2001  03DA  120A  158A  2386  120A  118A  	fcall	_value4
  2002  03DF  1C03               	btfss	3,0
  2003  03E0  2BDA               	goto	l2304
  2004                           
  2005                           ;stroke main.c: 259: Lcd_Set_Cursor(1,1);
  2006  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2007  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2008  03E3  01A4               	clrf	Lcd_Set_Cursor@b
  2009  03E4  0AA4               	incf	Lcd_Set_Cursor@b,f
  2010  03E5  3001               	movlw	1
  2011  03E6  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  2012                           
  2013                           ;stroke main.c: 260: Lcd_Write_String(" sending lat... ");
  2014  03EB  309F               	movlw	low (STR_28| (0+32768))
  2015  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2016  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2017  03EE  00A5               	movwf	Lcd_Write_String@a
  2018  03EF  3085               	movlw	high (STR_28| (0+32768))
  2019  03F0  00A6               	movwf	Lcd_Write_String@a+1
  2020  03F1  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  2021                           
  2022                           ;stroke main.c: 261: _delay((unsigned long)((50)*(20000000/4000.0)));
  2023  03F6  3002               	movlw	2
  2024  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2025  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2026  03F9  00CC               	movwf	??_main+2
  2027  03FA  3045               	movlw	69
  2028  03FB  00CB               	movwf	??_main+1
  2029  03FC  30A9               	movlw	169
  2030  03FD  00CA               	movwf	??_main
  2031  03FE                     u2247:	
  2032  03FE  0BCA               	decfsz	??_main,f
  2033  03FF  2BFE               	goto	u2247
  2034  0400  0BCB               	decfsz	??_main+1,f
  2035  0401  2BFE               	goto	u2247
  2036  0402  0BCC               	decfsz	??_main+2,f
  2037  0403  2BFE               	goto	u2247
  2038                           
  2039                           ;stroke main.c: 262: uart_txs("1301.51\r\n");
  2040  0404  30FF               	movlw	low (STR_29| (0+32768))
  2041  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0406  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0407  00A1               	movwf	uart_txs@st
  2044  0408  3085               	movlw	high (STR_29| (0+32768))
  2045  0409  00A2               	movwf	uart_txs@st+1
  2046  040A  120A  158A  241C  120A  118A  	fcall	_uart_txs
  2047  040F                     l2314:	
  2048                           ;stroke main.c: 263: while(!value5());
  2049                           
  2050  040F  120A  158A  2392  120A  118A  	fcall	_value5
  2051  0414  1C03               	btfss	3,0
  2052  0415  2C0F               	goto	l2314
  2053                           
  2054                           ;stroke main.c: 264: Lcd_Set_Cursor(1,1);
  2055  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0418  01A4               	clrf	Lcd_Set_Cursor@b
  2058  0419  0AA4               	incf	Lcd_Set_Cursor@b,f
  2059  041A  3001               	movlw	1
  2060  041B  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  2061                           
  2062                           ;stroke main.c: 265: Lcd_Write_String(" sending lon... ");
  2063  0420  308E               	movlw	low (STR_30| (0+32768))
  2064  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0423  00A5               	movwf	Lcd_Write_String@a
  2067  0424  3085               	movlw	high (STR_30| (0+32768))
  2068  0425  00A6               	movwf	Lcd_Write_String@a+1
  2069  0426  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  2070                           
  2071                           ;stroke main.c: 266: _delay((unsigned long)((50)*(20000000/4000.0)));
  2072  042B  3002               	movlw	2
  2073  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2074  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2075  042E  00CC               	movwf	??_main+2
  2076  042F  3045               	movlw	69
  2077  0430  00CB               	movwf	??_main+1
  2078  0431  30A9               	movlw	169
  2079  0432  00CA               	movwf	??_main
  2080  0433                     u2257:	
  2081  0433  0BCA               	decfsz	??_main,f
  2082  0434  2C33               	goto	u2257
  2083  0435  0BCB               	decfsz	??_main+1,f
  2084  0436  2C33               	goto	u2257
  2085  0437  0BCC               	decfsz	??_main+2,f
  2086  0438  2C33               	goto	u2257
  2087                           
  2088                           ;stroke main.c: 267: uart_txs("08013.54\r\n");
  2089  0439  30F4               	movlw	low (STR_31| (0+32768))
  2090  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2091  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2092  043C  00A1               	movwf	uart_txs@st
  2093  043D  3085               	movlw	high (STR_31| (0+32768))
  2094  043E  00A2               	movwf	uart_txs@st+1
  2095  043F  120A  158A  241C  120A  118A  	fcall	_uart_txs
  2096  0444                     l2324:	
  2097                           ;stroke main.c: 268: while(!ready());
  2098                           
  2099  0444  120A  158A  234A  120A  118A  	fcall	_ready
  2100  0449  1C03               	btfss	3,0
  2101  044A  2C44               	goto	l2324
  2102                           
  2103                           ;stroke main.c: 269: Lcd_Set_Cursor(1,1);
  2104  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2105  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2106  044D  01A4               	clrf	Lcd_Set_Cursor@b
  2107  044E  0AA4               	incf	Lcd_Set_Cursor@b,f
  2108  044F  3001               	movlw	1
  2109  0450  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  2110                           
  2111                           ;stroke main.c: 270: Lcd_Write_String("    Uploaded    ");
  2112  0455  305B               	movlw	low (STR_32| (0+32768))
  2113  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0458  00A5               	movwf	Lcd_Write_String@a
  2116  0459  3085               	movlw	high (STR_32| (0+32768))
  2117  045A  00A6               	movwf	Lcd_Write_String@a+1
  2118  045B  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  2119                           
  2120                           ;stroke main.c: 271: Lcd_Set_Cursor(2,1);
  2121  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2122  0461  1303               	bcf	3,6	;RP1=0, select bank0
  2123  0462  01A4               	clrf	Lcd_Set_Cursor@b
  2124  0463  0AA4               	incf	Lcd_Set_Cursor@b,f
  2125  0464  3002               	movlw	2
  2126  0465  120A  158A  25EC  120A  118A  	fcall	_Lcd_Set_Cursor
  2127                           
  2128                           ;stroke main.c: 272: Lcd_Write_String("                ");
  2129  046A  3028               	movlw	low (STR_33| (0+32768))
  2130  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2131  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2132  046D  00A5               	movwf	Lcd_Write_String@a
  2133  046E  3085               	movlw	high (STR_33| (0+32768))
  2134  046F  00A6               	movwf	Lcd_Write_String@a+1
  2135  0470  120A  158A  2562  120A  118A  	fcall	_Lcd_Write_String
  2136                           
  2137                           ;stroke main.c: 273: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2138  0475  301A               	movlw	26
  2139  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2140  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0478  00CC               	movwf	??_main+2
  2142  0479  305E               	movlw	94
  2143  047A  00CB               	movwf	??_main+1
  2144  047B  306D               	movlw	109
  2145  047C  00CA               	movwf	??_main
  2146  047D                     u2267:	
  2147  047D  0BCA               	decfsz	??_main,f
  2148  047E  2C7D               	goto	u2267
  2149  047F  0BCB               	decfsz	??_main+1,f
  2150  0480  2C7D               	goto	u2267
  2151  0481  0BCC               	decfsz	??_main+2,f
  2152  0482  2C7D               	goto	u2267
  2153  0483  2C84               	nop2
  2154  0484  28D0               	goto	l2182
  2155  0485                     __end_of_main:	
  2156                           ;stroke main.c: 274: Lcd_Clear();
  2157                           
  2158                           
  2159                           	psect	text1
  2160  0B92                     __ptext1:	
  2161 ;; *************** function _value5 *****************
  2162 ;; Defined at:
  2163 ;;		line 108 in file "stroke main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;		None               void
  2170 ;; Registers used:
  2171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2177 ;;      Params:         0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0
  2180 ;;      Totals:         0       0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    4
  2184 ;; This function calls:
  2185 ;;		_uart_response
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function _value5
  2193  0B92                     _value5:	
  2194                           
  2195                           ;stroke main.c: 109: return (uart_response() == 5);
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in _value5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2199  0B92  120A  118A  2747  120A  158A  	fcall	_uart_response
  2200  0B97  3A05               	xorlw	5
  2201  0B98  1903               	skipnz
  2202  0B99  2B9C               	goto	l1924
  2203  0B9A  1003               	clrc
  2204  0B9B  0008               	return
  2205  0B9C                     l1924:	
  2206  0B9C  1403               	setc
  2207  0B9D  0008               	return
  2208  0B9E                     __end_of_value5:	
  2209                           
  2210                           	psect	text2
  2211  0B86                     __ptext2:	
  2212 ;; *************** function _value4 *****************
  2213 ;; Defined at:
  2214 ;;		line 105 in file "stroke main.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;		None               void
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2228 ;;      Params:         0       0       0       0       0
  2229 ;;      Locals:         0       0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0
  2231 ;;      Totals:         0       0       0       0       0
  2232 ;;Total ram usage:        0 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    4
  2235 ;; This function calls:
  2236 ;;		_uart_response
  2237 ;; This function is called by:
  2238 ;;		_main
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           
  2243                           ;psect for function _value4
  2244  0B86                     _value4:	
  2245                           
  2246                           ;stroke main.c: 106: return (uart_response() == 4);
  2247                           
  2248                           ;incstack = 0
  2249                           ; Regs used in _value4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2250  0B86  120A  118A  2747  120A  158A  	fcall	_uart_response
  2251  0B8B  3A04               	xorlw	4
  2252  0B8C  1903               	skipnz
  2253  0B8D  2B90               	goto	l1916
  2254  0B8E  1003               	clrc
  2255  0B8F  0008               	return
  2256  0B90                     l1916:	
  2257  0B90  1403               	setc
  2258  0B91  0008               	return
  2259  0B92                     __end_of_value4:	
  2260                           
  2261                           	psect	text3
  2262  0B7A                     __ptext3:	
  2263 ;; *************** function _value3 *****************
  2264 ;; Defined at:
  2265 ;;		line 102 in file "stroke main.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;		None
  2270 ;; Return value:  Size  Location     Type
  2271 ;;		None               void
  2272 ;; Registers used:
  2273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2279 ;;      Params:         0       0       0       0       0
  2280 ;;      Locals:         0       0       0       0       0
  2281 ;;      Temps:          0       0       0       0       0
  2282 ;;      Totals:         0       0       0       0       0
  2283 ;;Total ram usage:        0 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    4
  2286 ;; This function calls:
  2287 ;;		_uart_response
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           
  2294                           ;psect for function _value3
  2295  0B7A                     _value3:	
  2296                           
  2297                           ;stroke main.c: 103: return (uart_response() == 3);
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _value3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2301  0B7A  120A  118A  2747  120A  158A  	fcall	_uart_response
  2302  0B7F  3A03               	xorlw	3
  2303  0B80  1903               	skipnz
  2304  0B81  2B84               	goto	l1908
  2305  0B82  1003               	clrc
  2306  0B83  0008               	return
  2307  0B84                     l1908:	
  2308  0B84  1403               	setc
  2309  0B85  0008               	return
  2310  0B86                     __end_of_value3:	
  2311                           
  2312                           	psect	text4
  2313  0B6E                     __ptext4:	
  2314 ;; *************** function _value2 *****************
  2315 ;; Defined at:
  2316 ;;		line 99 in file "stroke main.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;		None
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;		None
  2321 ;; Return value:  Size  Location     Type
  2322 ;;		None               void
  2323 ;; Registers used:
  2324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2330 ;;      Params:         0       0       0       0       0
  2331 ;;      Locals:         0       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0
  2333 ;;      Totals:         0       0       0       0       0
  2334 ;;Total ram usage:        0 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    4
  2337 ;; This function calls:
  2338 ;;		_uart_response
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           
  2345                           ;psect for function _value2
  2346  0B6E                     _value2:	
  2347                           
  2348                           ;stroke main.c: 100: return (uart_response() == 2);
  2349                           
  2350                           ;incstack = 0
  2351                           ; Regs used in _value2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2352  0B6E  120A  118A  2747  120A  158A  	fcall	_uart_response
  2353  0B73  3A02               	xorlw	2
  2354  0B74  1903               	skipnz
  2355  0B75  2B78               	goto	l1900
  2356  0B76  1003               	clrc
  2357  0B77  0008               	return
  2358  0B78                     l1900:	
  2359  0B78  1403               	setc
  2360  0B79  0008               	return
  2361  0B7A                     __end_of_value2:	
  2362                           
  2363                           	psect	text5
  2364  0B62                     __ptext5:	
  2365 ;; *************** function _value1 *****************
  2366 ;; Defined at:
  2367 ;;		line 96 in file "stroke main.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;		None
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;		None
  2372 ;; Return value:  Size  Location     Type
  2373 ;;		None               void
  2374 ;; Registers used:
  2375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2381 ;;      Params:         0       0       0       0       0
  2382 ;;      Locals:         0       0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0
  2384 ;;      Totals:         0       0       0       0       0
  2385 ;;Total ram usage:        0 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    4
  2388 ;; This function calls:
  2389 ;;		_uart_response
  2390 ;; This function is called by:
  2391 ;;		_main
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _value1
  2397  0B62                     _value1:	
  2398                           
  2399                           ;stroke main.c: 97: return (uart_response() == 1);
  2400                           
  2401                           ;incstack = 0
  2402                           ; Regs used in _value1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2403  0B62  120A  118A  2747  120A  158A  	fcall	_uart_response
  2404  0B67  3A01               	xorlw	1
  2405  0B68  1903               	skipnz
  2406  0B69  2B6C               	goto	l1892
  2407  0B6A  1003               	clrc
  2408  0B6B  0008               	return
  2409  0B6C                     l1892:	
  2410  0B6C  1403               	setc
  2411  0B6D  0008               	return
  2412  0B6E                     __end_of_value1:	
  2413                           
  2414                           	psect	text6
  2415  0C1C                     __ptext6:	
  2416 ;; *************** function _uart_txs *****************
  2417 ;; Defined at:
  2418 ;;		line 53 in file "stroke main.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  st              2    1[BANK0 ] PTR unsigned char 
  2421 ;;		 -> STR_31(11), STR_29(10), main@p(10), main@h(10), 
  2422 ;;		 -> main@t(10), 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;		None
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2434 ;;      Params:         0       2       0       0       0
  2435 ;;      Locals:         0       0       0       0       0
  2436 ;;      Temps:          0       0       0       0       0
  2437 ;;      Totals:         0       2       0       0       0
  2438 ;;Total ram usage:        2 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    3
  2441 ;; This function calls:
  2442 ;;		_uart_txc
  2443 ;; This function is called by:
  2444 ;;		_main
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _uart_txs
  2450  0C1C                     _uart_txs:	
  2451  0C1C                     l1886:	
  2452                           ;stroke main.c: 54: while(*st)
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _uart_txs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2456                           
  2457  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0C1E  0822               	movf	uart_txs@st+1,w
  2460  0C1F  00FF               	movwf	127
  2461  0C20  0821               	movf	uart_txs@st,w
  2462  0C21  0084               	movwf	4
  2463  0C22  120A  118A  2500  120A  158A  	fcall	stringtab
  2464  0C27  3A00               	xorlw	0
  2465  0C28  1903               	btfsc	3,2
  2466  0C29  0008               	return
  2467                           
  2468                           ;stroke main.c: 55: uart_txc(*st++);
  2469  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  2470  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  2471  0C2C  0822               	movf	uart_txs@st+1,w
  2472  0C2D  00FF               	movwf	127
  2473  0C2E  0821               	movf	uart_txs@st,w
  2474  0C2F  0084               	movwf	4
  2475  0C30  120A  118A  2500  120A  158A  	fcall	stringtab
  2476  0C35  120A  158A  2356  120A  158A  	fcall	_uart_txc
  2477  0C3A  3001               	movlw	1
  2478  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  2479  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  2480  0C3D  07A1               	addwf	uart_txs@st,f
  2481  0C3E  1803               	skipnc
  2482  0C3F  0AA2               	incf	uart_txs@st+1,f
  2483  0C40  2C1C               	goto	l1886
  2484  0C41                     __end_of_uart_txs:	
  2485                           
  2486                           	psect	text7
  2487  0B56                     __ptext7:	
  2488 ;; *************** function _uart_txc *****************
  2489 ;; Defined at:
  2490 ;;		line 48 in file "stroke main.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  ch              1    wreg     unsigned char 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  ch              1    0[BANK0 ] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2504 ;;      Params:         0       0       0       0       0
  2505 ;;      Locals:         0       1       0       0       0
  2506 ;;      Temps:          0       0       0       0       0
  2507 ;;      Totals:         0       1       0       0       0
  2508 ;;Total ram usage:        1 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    2
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_uart_txs
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _uart_txc
  2521  0B56                     _uart_txc:	
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _uart_txc: [wreg]
  2525                           ;uart_txc@ch stored from wreg
  2526  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0B58  00A0               	movwf	uart_txc@ch
  2529  0B59                     l143:	
  2530                           ;stroke main.c: 49: while(!TXIF);
  2531                           
  2532  0B59  1E0C               	btfss	12,4	;volatile
  2533  0B5A  2B59               	goto	l143
  2534                           
  2535                           ;stroke main.c: 50: TXREG = ch;
  2536  0B5B  0820               	movf	uart_txc@ch,w
  2537  0B5C  0099               	movwf	25	;volatile
  2538  0B5D                     l146:	
  2539                           ;stroke main.c: 51: while(!TRMT);
  2540                           
  2541  0B5D  1683               	bsf	3,5	;RP0=1, select bank1
  2542  0B5E  1303               	bcf	3,6	;RP1=0, select bank1
  2543  0B5F  1898               	btfsc	24,1	;volatile
  2544  0B60  0008               	return
  2545  0B61  2B5D               	goto	l146
  2546  0B62                     __end_of_uart_txc:	
  2547                           
  2548                           	psect	text8
  2549  0BBE                     __ptext8:	
  2550 ;; *************** function _uart_init *****************
  2551 ;; Defined at:
  2552 ;;		line 38 in file "stroke main.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;		None
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;		None
  2557 ;; Return value:  Size  Location     Type
  2558 ;;                  1    wreg      void 
  2559 ;; Registers used:
  2560 ;;		wreg
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2566 ;;      Params:         0       0       0       0       0
  2567 ;;      Locals:         0       0       0       0       0
  2568 ;;      Temps:          0       0       0       0       0
  2569 ;;      Totals:         0       0       0       0       0
  2570 ;;Total ram usage:        0 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    2
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function _uart_init
  2582  0BBE                     _uart_init:	
  2583                           
  2584                           ;stroke main.c: 39: TRISC6 = 0;
  2585                           
  2586                           ;incstack = 0
  2587                           ; Regs used in _uart_init: [wreg]
  2588  0BBE  1683               	bsf	3,5	;RP0=1, select bank1
  2589  0BBF  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0BC0  1307               	bcf	7,6	;volatile
  2591                           
  2592                           ;stroke main.c: 40: TRISC7 = 1;
  2593  0BC1  1787               	bsf	7,7	;volatile
  2594                           
  2595                           ;stroke main.c: 41: SPBRG = ((20000000/16)/9600) - 1;
  2596  0BC2  3081               	movlw	129
  2597  0BC3  0099               	movwf	25	;volatile
  2598                           
  2599                           ;stroke main.c: 42: BRGH = 1;
  2600  0BC4  1518               	bsf	24,2	;volatile
  2601                           
  2602                           ;stroke main.c: 43: SYNC = 0;
  2603  0BC5  1218               	bcf	24,4	;volatile
  2604                           
  2605                           ;stroke main.c: 44: SPEN = 1;
  2606  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  2607  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0BC8  1798               	bsf	24,7	;volatile
  2609                           
  2610                           ;stroke main.c: 45: TXEN = 1;
  2611  0BC9  1683               	bsf	3,5	;RP0=1, select bank1
  2612  0BCA  1303               	bcf	3,6	;RP1=0, select bank1
  2613  0BCB  1698               	bsf	24,5	;volatile
  2614                           
  2615                           ;stroke main.c: 46: CREN = 1;
  2616  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  2617  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  2618  0BCE  1618               	bsf	24,4	;volatile
  2619  0BCF  0008               	return
  2620  0BD0                     __end_of_uart_init:	
  2621                           
  2622                           	psect	text9
  2623  0B9E                     __ptext9:	
  2624 ;; *************** function _timer1_init *****************
  2625 ;; Defined at:
  2626 ;;		line 131 in file "stroke main.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;		None
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;		None
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		status,2
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2640 ;;      Params:         0       0       0       0       0
  2641 ;;      Locals:         0       0       0       0       0
  2642 ;;      Temps:          0       0       0       0       0
  2643 ;;      Totals:         0       0       0       0       0
  2644 ;;Total ram usage:        0 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    2
  2647 ;; This function calls:
  2648 ;;		Nothing
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           
  2655                           ;psect for function _timer1_init
  2656  0B9E                     _timer1_init:	
  2657                           
  2658                           ;stroke main.c: 132: TMR1H = 0x00;
  2659                           
  2660                           ;incstack = 0
  2661                           ; Regs used in _timer1_init: [status,2]
  2662  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0B9F  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0BA0  018F               	clrf	15	;volatile
  2665                           
  2666                           ;stroke main.c: 133: TMR1L = 0x00;
  2667  0BA1  018E               	clrf	14	;volatile
  2668                           
  2669                           ;stroke main.c: 134: PIR1bits.TMR1IF = 0;
  2670  0BA2  100C               	bcf	12,0	;volatile
  2671                           
  2672                           ;stroke main.c: 135: T1CONbits.TMR1CS = 0;
  2673  0BA3  1090               	bcf	16,1	;volatile
  2674                           
  2675                           ;stroke main.c: 136: T1CONbits.T1CKPS0 = 1;
  2676  0BA4  1610               	bsf	16,4	;volatile
  2677                           
  2678                           ;stroke main.c: 137: T1CONbits.T1CKPS1 = 1;
  2679  0BA5  1690               	bsf	16,5	;volatile
  2680                           
  2681                           ;stroke main.c: 138: PIE1bits.TMR1IE = 1;
  2682  0BA6  1683               	bsf	3,5	;RP0=1, select bank1
  2683  0BA7  1303               	bcf	3,6	;RP1=0, select bank1
  2684  0BA8  140C               	bsf	12,0	;volatile
  2685                           
  2686                           ;stroke main.c: 139: T1CONbits.TMR1ON = 1;
  2687  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  2688  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  2689  0BAB  1410               	bsf	16,0	;volatile
  2690  0BAC  0008               	return
  2691  0BAD                     __end_of_timer1_init:	
  2692                           
  2693                           	psect	text10
  2694  0648                     __ptext10:	
  2695 ;; *************** function _sprintf *****************
  2696 ;; Defined at:
  2697 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  sp              1    wreg     PTR unsigned char 
  2700 ;;		 -> main@p(10), main@h(10), main@t(10), 
  2701 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  2702 ;;		 -> STR_23(4), STR_20(4), STR_17(4), STR_15(4), 
  2703 ;;		 -> STR_13(4), 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  sp              1   26[BANK0 ] PTR unsigned char 
  2706 ;;		 -> main@p(10), main@h(10), main@t(10), 
  2707 ;;  tmpval          4    0        struct .
  2708 ;;  val             2   24[BANK0 ] unsigned int 
  2709 ;;  cp              2    0        PTR const unsigned char 
  2710 ;;  len             2    0        unsigned int 
  2711 ;;  c               1   27[BANK0 ] char 
  2712 ;;  flag            1   23[BANK0 ] unsigned char 
  2713 ;;  ap              1   22[BANK0 ] PTR void [1]
  2714 ;;		 -> ?_sprintf(2), 
  2715 ;;  prec            1   21[BANK0 ] char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  2   14[BANK0 ] int 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2725 ;;      Params:         0       4       0       0       0
  2726 ;;      Locals:         0       7       0       0       0
  2727 ;;      Temps:          0       3       0       0       0
  2728 ;;      Totals:         0      14       0       0       0
  2729 ;;Total ram usage:       14 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    3
  2732 ;; This function calls:
  2733 ;;		___lwdiv
  2734 ;;		___lwmod
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _sprintf
  2742  0648                     _sprintf:	
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2746                           ;sprintf@sp stored from wreg
  2747  0648  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0649  1303               	bcf	3,6	;RP1=0, select bank0
  2749  064A  00BA               	movwf	sprintf@sp
  2750                           
  2751                           ;doprnt.c: 494: va_list ap;
  2752                           ;doprnt.c: 499: signed char c;
  2753                           ;doprnt.c: 506: signed char prec;
  2754                           ;doprnt.c: 508: unsigned char flag;
  2755                           ;doprnt.c: 523: union {
  2756                           ;doprnt.c: 524: unsigned long vd;
  2757                           ;doprnt.c: 525: double integ;
  2758                           ;doprnt.c: 526: } tmpval;
  2759                           ;doprnt.c: 528: unsigned int val;
  2760                           ;doprnt.c: 529: unsigned len;
  2761                           ;doprnt.c: 530: const char * cp;
  2762                           ;doprnt.c: 533: *ap = __va_start();
  2763  064B  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2764  064C  00B2               	movwf	??_sprintf
  2765  064D  0832               	movf	??_sprintf,w
  2766  064E  00B6               	movwf	sprintf@ap
  2767  064F                     l2034:	
  2768                           ;doprnt.c: 536: while(c = *f++) {
  2769                           
  2770  064F  082F               	movf	sprintf@f+1,w
  2771  0650  00B3               	movwf	??_sprintf+1
  2772  0651  082E               	movf	sprintf@f,w
  2773  0652  00B2               	movwf	??_sprintf
  2774  0653  0AAE               	incf	sprintf@f,f
  2775  0654  1903               	skipnz
  2776  0655  0AAF               	incf	sprintf@f+1,f
  2777  0656  0833               	movf	??_sprintf+1,w
  2778  0657  00FF               	movwf	127
  2779  0658  0832               	movf	??_sprintf,w
  2780  0659  0084               	movwf	4
  2781  065A  120A  118A  2500  120A  118A  	fcall	stringtab
  2782  065F  00B4               	movwf	??_sprintf+2
  2783  0660  0834               	movf	??_sprintf+2,w
  2784  0661  00BB               	movwf	sprintf@c
  2785  0662  083B               	movf	sprintf@c,w
  2786  0663  1903               	btfsc	3,2
  2787  0664  2F42               	goto	l2036
  2788                           
  2789                           ;doprnt.c: 538: if(c != '%')
  2790  0665  3025               	movlw	37
  2791  0666  063B               	xorwf	sprintf@c,w
  2792  0667  1903               	btfsc	3,2
  2793  0668  2E75               	goto	l1986
  2794                           
  2795                           ;doprnt.c: 540: {
  2796                           ;doprnt.c: 541: ((*sp++ = (c)));
  2797  0669  083B               	movf	sprintf@c,w
  2798  066A  00B2               	movwf	??_sprintf
  2799  066B  083A               	movf	sprintf@sp,w
  2800  066C  0084               	movwf	4
  2801  066D  0832               	movf	??_sprintf,w
  2802  066E  1383               	bcf	3,7	;select IRP bank0
  2803  066F  0080               	movwf	0
  2804  0670  3001               	movlw	1
  2805  0671  00B2               	movwf	??_sprintf
  2806  0672  0832               	movf	??_sprintf,w
  2807  0673  07BA               	addwf	sprintf@sp,f
  2808                           
  2809                           ;doprnt.c: 542: continue;
  2810  0674  2E4F               	goto	l2034
  2811  0675                     l1986:	
  2812                           
  2813                           ;doprnt.c: 543: }
  2814                           ;doprnt.c: 548: flag = 0;
  2815  0675  01B7               	clrf	sprintf@flag
  2816                           
  2817                           ;doprnt.c: 635: switch(c = *f++) {
  2818  0676  2E79               	goto	l1990
  2819  0677                     l276:	
  2820                           ;doprnt.c: 817: case 'u':
  2821                           
  2822                           ;doprnt.c: 813: continue;
  2823                           
  2824                           ;doprnt.c: 802: default:
  2825                           
  2826                           ;doprnt.c: 698: case 'i':
  2827                           ;doprnt.c: 699: break;
  2828                           
  2829                           ;doprnt.c: 697: case 'd':
  2830                           
  2831                           ;doprnt.c: 638: goto alldone;
  2832                           
  2833                           ;doprnt.c: 637: case 0:
  2834                           
  2835                           
  2836                           ;doprnt.c: 818: flag |= 0x40;
  2837  0677  1737               	bsf	sprintf@flag,6
  2838                           
  2839                           ;doprnt.c: 822: }
  2840                           
  2841                           ;doprnt.c: 819: break;
  2842  0678  2E97               	goto	l274
  2843  0679                     l1990:	
  2844  0679  082F               	movf	sprintf@f+1,w
  2845  067A  00B3               	movwf	??_sprintf+1
  2846  067B  082E               	movf	sprintf@f,w
  2847  067C  00B2               	movwf	??_sprintf
  2848  067D  0AAE               	incf	sprintf@f,f
  2849  067E  1903               	skipnz
  2850  067F  0AAF               	incf	sprintf@f+1,f
  2851  0680  0833               	movf	??_sprintf+1,w
  2852  0681  00FF               	movwf	127
  2853  0682  0832               	movf	??_sprintf,w
  2854  0683  0084               	movwf	4
  2855  0684  120A  118A  2500  120A  118A  	fcall	stringtab
  2856  0689  00BB               	movwf	sprintf@c
  2857                           
  2858                           ; Switch size 1, requested type "space"
  2859                           ; Number of cases is 4, Range of values is 0 to 117
  2860                           ; switch strategies available:
  2861                           ; Name         Instructions Cycles
  2862                           ; simple_byte           13     7 (average)
  2863                           ; jumptable            260     6 (fixed)
  2864                           ;	Chosen strategy is simple_byte
  2865  068A  3A00               	xorlw	0	; case 0
  2866  068B  1903               	skipnz
  2867  068C  2F42               	goto	l2036
  2868  068D  3A64               	xorlw	100	; case 100
  2869  068E  1903               	skipnz
  2870  068F  2E97               	goto	l274
  2871  0690  3A0D               	xorlw	13	; case 105
  2872  0691  1903               	skipnz
  2873  0692  2E97               	goto	l274
  2874  0693  3A1C               	xorlw	28	; case 117
  2875  0694  1903               	skipnz
  2876  0695  2E77               	goto	l276
  2877  0696  2E4F               	goto	l2034
  2878  0697                     l274:	
  2879                           
  2880                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2881  0697  1B37               	btfsc	sprintf@flag,6
  2882  0698  2EB1               	goto	l2002
  2883                           
  2884                           ;doprnt.c: 1253: {
  2885                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2886  0699  0836               	movf	sprintf@ap,w
  2887  069A  0084               	movwf	4
  2888  069B  1383               	bcf	3,7	;select IRP bank0
  2889  069C  0800               	movf	0,w
  2890  069D  00B8               	movwf	sprintf@val
  2891  069E  0A84               	incf	4,f
  2892  069F  0800               	movf	0,w
  2893  06A0  00B9               	movwf	sprintf@val+1
  2894  06A1  3002               	movlw	2
  2895  06A2  00B2               	movwf	??_sprintf
  2896  06A3  0832               	movf	??_sprintf,w
  2897  06A4  07B6               	addwf	sprintf@ap,f
  2898                           
  2899                           ;doprnt.c: 1261: if((int)val < 0) {
  2900  06A5  1FB9               	btfss	sprintf@val+1,7
  2901  06A6  2EBD               	goto	l2006
  2902                           
  2903                           ;doprnt.c: 1262: flag |= 0x03;
  2904  06A7  3003               	movlw	3
  2905  06A8  00B2               	movwf	??_sprintf
  2906  06A9  0832               	movf	??_sprintf,w
  2907  06AA  04B7               	iorwf	sprintf@flag,f
  2908                           
  2909                           ;doprnt.c: 1263: val = -val;
  2910  06AB  09B8               	comf	sprintf@val,f
  2911  06AC  09B9               	comf	sprintf@val+1,f
  2912  06AD  0AB8               	incf	sprintf@val,f
  2913  06AE  1903               	skipnz
  2914  06AF  0AB9               	incf	sprintf@val+1,f
  2915                           
  2916                           ;doprnt.c: 1264: }
  2917                           ;doprnt.c: 1266: }
  2918  06B0  2EBD               	goto	l2006
  2919  06B1                     l2002:	
  2920                           
  2921                           ;doprnt.c: 1268: else
  2922                           ;doprnt.c: 1273: {
  2923                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2924  06B1  0836               	movf	sprintf@ap,w
  2925  06B2  0084               	movwf	4
  2926  06B3  1383               	bcf	3,7	;select IRP bank0
  2927  06B4  0800               	movf	0,w
  2928  06B5  00B8               	movwf	sprintf@val
  2929  06B6  0A84               	incf	4,f
  2930  06B7  0800               	movf	0,w
  2931  06B8  00B9               	movwf	sprintf@val+1
  2932  06B9  3002               	movlw	2
  2933  06BA  00B2               	movwf	??_sprintf
  2934  06BB  0832               	movf	??_sprintf,w
  2935  06BC  07B6               	addwf	sprintf@ap,f
  2936  06BD                     l2006:	
  2937                           
  2938                           ;doprnt.c: 1287: }
  2939                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2940  06BD  01BB               	clrf	sprintf@c
  2941  06BE  0ABB               	incf	sprintf@c,f
  2942  06BF  3005               	movlw	5
  2943  06C0  063B               	xorwf	sprintf@c,w
  2944  06C1  1903               	btfsc	3,2
  2945  06C2  2EE8               	goto	l2018
  2946  06C3                     l2012:	
  2947                           
  2948                           ;doprnt.c: 1306: if(val < dpowers[c])
  2949  06C3  083B               	movf	sprintf@c,w
  2950  06C4  00B2               	movwf	??_sprintf
  2951  06C5  0732               	addwf	??_sprintf,w
  2952  06C6  3E12               	addlw	low (_dpowers| (0+32768))
  2953  06C7  0084               	movwf	4
  2954  06C8  3085               	movlw	high (_dpowers| (0+32768))
  2955  06C9  1803               	skipnc
  2956  06CA  3E01               	addlw	1
  2957  06CB  00FF               	movwf	127
  2958  06CC  120A  118A  2500  120A  118A  	fcall	stringtab
  2959  06D1  00B3               	movwf	??_sprintf+1
  2960  06D2  120A  118A  2500  120A  118A  	fcall	stringtab
  2961  06D7  00B4               	movwf	??_sprintf+2
  2962  06D8  0834               	movf	??_sprintf+2,w
  2963  06D9  0239               	subwf	sprintf@val+1,w
  2964  06DA  1D03               	skipz
  2965  06DB  2EDE               	goto	u1715
  2966  06DC  0833               	movf	??_sprintf+1,w
  2967  06DD  0238               	subwf	sprintf@val,w
  2968  06DE                     u1715:	
  2969  06DE  1C03               	btfss	3,0
  2970  06DF  2EE8               	goto	l2018
  2971                           
  2972                           ;doprnt.c: 1307: break;
  2973  06E0  3001               	movlw	1
  2974  06E1  00B2               	movwf	??_sprintf
  2975  06E2  0832               	movf	??_sprintf,w
  2976  06E3  07BB               	addwf	sprintf@c,f
  2977  06E4  3005               	movlw	5
  2978  06E5  063B               	xorwf	sprintf@c,w
  2979  06E6  1D03               	btfss	3,2
  2980  06E7  2EC3               	goto	l2012
  2981  06E8                     l2018:	
  2982                           
  2983                           ;doprnt.c: 1422: {
  2984                           ;doprnt.c: 1438: if(flag & 0x03)
  2985  06E8  0837               	movf	sprintf@flag,w
  2986  06E9  3903               	andlw	3
  2987  06EA  1903               	btfsc	3,2
  2988  06EB  2EF7               	goto	l2024
  2989                           
  2990                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2991  06EC  302D               	movlw	45
  2992  06ED  00B2               	movwf	??_sprintf
  2993  06EE  083A               	movf	sprintf@sp,w
  2994  06EF  0084               	movwf	4
  2995  06F0  0832               	movf	??_sprintf,w
  2996  06F1  1383               	bcf	3,7	;select IRP bank0
  2997  06F2  0080               	movwf	0
  2998  06F3  3001               	movlw	1
  2999  06F4  00B2               	movwf	??_sprintf
  3000  06F5  0832               	movf	??_sprintf,w
  3001  06F6  07BA               	addwf	sprintf@sp,f
  3002  06F7                     l2024:	
  3003                           
  3004                           ;doprnt.c: 1469: }
  3005                           ;doprnt.c: 1472: prec = c;
  3006  06F7  083B               	movf	sprintf@c,w
  3007  06F8  00B2               	movwf	??_sprintf
  3008  06F9  0832               	movf	??_sprintf,w
  3009  06FA  00B5               	movwf	sprintf@prec
  3010  06FB                     l2032:	
  3011                           ;doprnt.c: 1474: while(prec--) {
  3012                           
  3013  06FB  30FF               	movlw	255
  3014  06FC  00B2               	movwf	??_sprintf
  3015  06FD  0832               	movf	??_sprintf,w
  3016  06FE  07B5               	addwf	sprintf@prec,f
  3017  06FF  0A35               	incf	sprintf@prec,w
  3018  0700  1903               	btfsc	3,2
  3019  0701  2E4F               	goto	l2034
  3020                           
  3021                           ;doprnt.c: 1478: {
  3022                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3023  0702  300A               	movlw	10
  3024  0703  00A8               	movwf	___lwmod@divisor
  3025  0704  3000               	movlw	0
  3026  0705  00A9               	movwf	___lwmod@divisor+1
  3027  0706  0835               	movf	sprintf@prec,w
  3028  0707  00B2               	movwf	??_sprintf
  3029  0708  0732               	addwf	??_sprintf,w
  3030  0709  3E12               	addlw	low (_dpowers| (0+32768))
  3031  070A  0084               	movwf	4
  3032  070B  3085               	movlw	high (_dpowers| (0+32768))
  3033  070C  1803               	skipnc
  3034  070D  3E01               	addlw	1
  3035  070E  00FF               	movwf	127
  3036  070F  120A  118A  2500  120A  118A  	fcall	stringtab
  3037  0714  00A0               	movwf	___lwdiv@divisor
  3038  0715  120A  118A  2500  120A  118A  	fcall	stringtab
  3039  071A  00A1               	movwf	___lwdiv@divisor+1
  3040  071B  0839               	movf	sprintf@val+1,w
  3041  071C  00A3               	movwf	___lwdiv@dividend+1
  3042  071D  0838               	movf	sprintf@val,w
  3043  071E  00A2               	movwf	___lwdiv@dividend
  3044  071F  120A  158A  24E5  120A  118A  	fcall	___lwdiv
  3045  0724  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0725  1303               	bcf	3,6	;RP1=0, select bank0
  3047  0726  0821               	movf	?___lwdiv+1,w
  3048  0727  00AB               	movwf	___lwmod@dividend+1
  3049  0728  0820               	movf	?___lwdiv,w
  3050  0729  00AA               	movwf	___lwmod@dividend
  3051  072A  120A  158A  2474  120A  118A  	fcall	___lwmod
  3052  072F  1283               	bcf	3,5	;RP0=0, select bank0
  3053  0730  1303               	bcf	3,6	;RP1=0, select bank0
  3054  0731  0828               	movf	?___lwmod,w
  3055  0732  3E30               	addlw	48
  3056  0733  00B3               	movwf	??_sprintf+1
  3057  0734  0833               	movf	??_sprintf+1,w
  3058  0735  00BB               	movwf	sprintf@c
  3059                           
  3060                           ;doprnt.c: 1523: }
  3061                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3062  0736  083B               	movf	sprintf@c,w
  3063  0737  00B2               	movwf	??_sprintf
  3064  0738  083A               	movf	sprintf@sp,w
  3065  0739  0084               	movwf	4
  3066  073A  0832               	movf	??_sprintf,w
  3067  073B  1383               	bcf	3,7	;select IRP bank0
  3068  073C  0080               	movwf	0
  3069  073D  3001               	movlw	1
  3070  073E  00B2               	movwf	??_sprintf
  3071  073F  0832               	movf	??_sprintf,w
  3072  0740  07BA               	addwf	sprintf@sp,f
  3073  0741  2EFB               	goto	l2032
  3074  0742                     l2036:	
  3075                           ;doprnt.c: 1525: }
  3076                           ;doprnt.c: 1533: }
  3077                           ;doprnt.c: 1535: alldone:
  3078                           
  3079                           
  3080                           ;doprnt.c: 1538: *sp = 0;
  3081  0742  083A               	movf	sprintf@sp,w
  3082  0743  0084               	movwf	4
  3083  0744  1383               	bcf	3,7	;select IRP bank0
  3084  0745  0180               	clrf	0
  3085  0746  0008               	return
  3086  0747                     __end_of_sprintf:	
  3087                           ;doprnt.c: 1540: return 0;
  3088                           ;	Return value of _sprintf is never used
  3089                           
  3090                           
  3091                           	psect	text11
  3092  0C74                     __ptext11:	
  3093 ;; *************** function ___lwmod *****************
  3094 ;; Defined at:
  3095 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  divisor         2    8[BANK0 ] unsigned int 
  3098 ;;  dividend        2   10[BANK0 ] unsigned int 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  counter         1   13[BANK0 ] unsigned char 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  2    8[BANK0 ] unsigned int 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2, status,0
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3110 ;;      Params:         0       4       0       0       0
  3111 ;;      Locals:         0       1       0       0       0
  3112 ;;      Temps:          0       1       0       0       0
  3113 ;;      Totals:         0       6       0       0       0
  3114 ;;Total ram usage:        6 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    2
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_sprintf
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           
  3125                           ;psect for function ___lwmod
  3126  0C74                     ___lwmod:	
  3127                           
  3128                           ;incstack = 0
  3129                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3130  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  3131  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  3132  0C76  0828               	movf	___lwmod@divisor,w
  3133  0C77  0429               	iorwf	___lwmod@divisor+1,w
  3134  0C78  1903               	btfsc	3,2
  3135  0C79  2CA3               	goto	l1822
  3136  0C7A  01AD               	clrf	___lwmod@counter
  3137  0C7B  0AAD               	incf	___lwmod@counter,f
  3138  0C7C                     l1812:	
  3139  0C7C  1BA9               	btfsc	___lwmod@divisor+1,7
  3140  0C7D  2C8A               	goto	l1814
  3141  0C7E  3001               	movlw	1
  3142  0C7F                     u1455:	
  3143  0C7F  1003               	clrc
  3144  0C80  0DA8               	rlf	___lwmod@divisor,f
  3145  0C81  0DA9               	rlf	___lwmod@divisor+1,f
  3146  0C82  3EFF               	addlw	-1
  3147  0C83  1D03               	skipz
  3148  0C84  2C7F               	goto	u1455
  3149  0C85  3001               	movlw	1
  3150  0C86  00AC               	movwf	??___lwmod
  3151  0C87  082C               	movf	??___lwmod,w
  3152  0C88  07AD               	addwf	___lwmod@counter,f
  3153  0C89  2C7C               	goto	l1812
  3154  0C8A                     l1814:	
  3155  0C8A  0829               	movf	___lwmod@divisor+1,w
  3156  0C8B  022B               	subwf	___lwmod@dividend+1,w
  3157  0C8C  1D03               	skipz
  3158  0C8D  2C90               	goto	u1475
  3159  0C8E  0828               	movf	___lwmod@divisor,w
  3160  0C8F  022A               	subwf	___lwmod@dividend,w
  3161  0C90                     u1475:	
  3162  0C90  1C03               	skipc
  3163  0C91  2C98               	goto	l1818
  3164  0C92  0828               	movf	___lwmod@divisor,w
  3165  0C93  02AA               	subwf	___lwmod@dividend,f
  3166  0C94  0829               	movf	___lwmod@divisor+1,w
  3167  0C95  1C03               	skipc
  3168  0C96  03AB               	decf	___lwmod@dividend+1,f
  3169  0C97  02AB               	subwf	___lwmod@dividend+1,f
  3170  0C98                     l1818:	
  3171  0C98  3001               	movlw	1
  3172  0C99                     u1485:	
  3173  0C99  1003               	clrc
  3174  0C9A  0CA9               	rrf	___lwmod@divisor+1,f
  3175  0C9B  0CA8               	rrf	___lwmod@divisor,f
  3176  0C9C  3EFF               	addlw	-1
  3177  0C9D  1D03               	skipz
  3178  0C9E  2C99               	goto	u1485
  3179  0C9F  3001               	movlw	1
  3180  0CA0  02AD               	subwf	___lwmod@counter,f
  3181  0CA1  1D03               	btfss	3,2
  3182  0CA2  2C8A               	goto	l1814
  3183  0CA3                     l1822:	
  3184  0CA3  082B               	movf	___lwmod@dividend+1,w
  3185  0CA4  00A9               	movwf	?___lwmod+1
  3186  0CA5  082A               	movf	___lwmod@dividend,w
  3187  0CA6  00A8               	movwf	?___lwmod
  3188  0CA7  0008               	return
  3189  0CA8                     __end_of___lwmod:	
  3190                           
  3191                           	psect	text12
  3192  0CE5                     __ptext12:	
  3193 ;; *************** function ___lwdiv *****************
  3194 ;; Defined at:
  3195 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  divisor         2    0[BANK0 ] unsigned int 
  3198 ;;  dividend        2    2[BANK0 ] unsigned int 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  quotient        2    5[BANK0 ] unsigned int 
  3201 ;;  counter         1    7[BANK0 ] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  2    0[BANK0 ] unsigned int 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3211 ;;      Params:         0       4       0       0       0
  3212 ;;      Locals:         0       3       0       0       0
  3213 ;;      Temps:          0       1       0       0       0
  3214 ;;      Totals:         0       8       0       0       0
  3215 ;;Total ram usage:        8 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    2
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_sprintf
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           
  3226                           ;psect for function ___lwdiv
  3227  0CE5                     ___lwdiv:	
  3228                           
  3229                           ;incstack = 0
  3230                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3231  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  3232  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  3233  0CE7  01A5               	clrf	___lwdiv@quotient
  3234  0CE8  01A6               	clrf	___lwdiv@quotient+1
  3235  0CE9  0820               	movf	___lwdiv@divisor,w
  3236  0CEA  0421               	iorwf	___lwdiv@divisor+1,w
  3237  0CEB  1903               	btfsc	3,2
  3238  0CEC  2D1E               	goto	l1800
  3239  0CED  01A7               	clrf	___lwdiv@counter
  3240  0CEE  0AA7               	incf	___lwdiv@counter,f
  3241  0CEF                     l1788:	
  3242  0CEF  1BA1               	btfsc	___lwdiv@divisor+1,7
  3243  0CF0  2CFD               	goto	l1790
  3244  0CF1  3001               	movlw	1
  3245  0CF2                     u1385:	
  3246  0CF2  1003               	clrc
  3247  0CF3  0DA0               	rlf	___lwdiv@divisor,f
  3248  0CF4  0DA1               	rlf	___lwdiv@divisor+1,f
  3249  0CF5  3EFF               	addlw	-1
  3250  0CF6  1D03               	skipz
  3251  0CF7  2CF2               	goto	u1385
  3252  0CF8  3001               	movlw	1
  3253  0CF9  00A4               	movwf	??___lwdiv
  3254  0CFA  0824               	movf	??___lwdiv,w
  3255  0CFB  07A7               	addwf	___lwdiv@counter,f
  3256  0CFC  2CEF               	goto	l1788
  3257  0CFD                     l1790:	
  3258  0CFD  3001               	movlw	1
  3259  0CFE                     u1405:	
  3260  0CFE  1003               	clrc
  3261  0CFF  0DA5               	rlf	___lwdiv@quotient,f
  3262  0D00  0DA6               	rlf	___lwdiv@quotient+1,f
  3263  0D01  3EFF               	addlw	-1
  3264  0D02  1D03               	skipz
  3265  0D03  2CFE               	goto	u1405
  3266  0D04  0821               	movf	___lwdiv@divisor+1,w
  3267  0D05  0223               	subwf	___lwdiv@dividend+1,w
  3268  0D06  1D03               	skipz
  3269  0D07  2D0A               	goto	u1415
  3270  0D08  0820               	movf	___lwdiv@divisor,w
  3271  0D09  0222               	subwf	___lwdiv@dividend,w
  3272  0D0A                     u1415:	
  3273  0D0A  1C03               	skipc
  3274  0D0B  2D13               	goto	l1796
  3275  0D0C  0820               	movf	___lwdiv@divisor,w
  3276  0D0D  02A2               	subwf	___lwdiv@dividend,f
  3277  0D0E  0821               	movf	___lwdiv@divisor+1,w
  3278  0D0F  1C03               	skipc
  3279  0D10  03A3               	decf	___lwdiv@dividend+1,f
  3280  0D11  02A3               	subwf	___lwdiv@dividend+1,f
  3281  0D12  1425               	bsf	___lwdiv@quotient,0
  3282  0D13                     l1796:	
  3283  0D13  3001               	movlw	1
  3284  0D14                     u1425:	
  3285  0D14  1003               	clrc
  3286  0D15  0CA1               	rrf	___lwdiv@divisor+1,f
  3287  0D16  0CA0               	rrf	___lwdiv@divisor,f
  3288  0D17  3EFF               	addlw	-1
  3289  0D18  1D03               	skipz
  3290  0D19  2D14               	goto	u1425
  3291  0D1A  3001               	movlw	1
  3292  0D1B  02A7               	subwf	___lwdiv@counter,f
  3293  0D1C  1D03               	btfss	3,2
  3294  0D1D  2CFD               	goto	l1790
  3295  0D1E                     l1800:	
  3296  0D1E  0826               	movf	___lwdiv@quotient+1,w
  3297  0D1F  00A1               	movwf	?___lwdiv+1
  3298  0D20  0825               	movf	___lwdiv@quotient,w
  3299  0D21  00A0               	movwf	?___lwdiv
  3300  0D22  0008               	return
  3301  0D23                     __end_of___lwdiv:	
  3302                           
  3303                           	psect	text13
  3304  0B4A                     __ptext13:	
  3305 ;; *************** function _ready *****************
  3306 ;; Defined at:
  3307 ;;		line 111 in file "stroke main.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;		None
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;		None               void
  3314 ;; Registers used:
  3315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3321 ;;      Params:         0       0       0       0       0
  3322 ;;      Locals:         0       0       0       0       0
  3323 ;;      Temps:          0       0       0       0       0
  3324 ;;      Totals:         0       0       0       0       0
  3325 ;;Total ram usage:        0 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    4
  3328 ;; This function calls:
  3329 ;;		_uart_response
  3330 ;; This function is called by:
  3331 ;;		_main
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _ready
  3337  0B4A                     _ready:	
  3338                           
  3339                           ;stroke main.c: 112: return (uart_response() == 6);
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _ready: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3343  0B4A  120A  118A  2747  120A  158A  	fcall	_uart_response
  3344  0B4F  3A06               	xorlw	6
  3345  0B50  1903               	skipnz
  3346  0B51  2B54               	goto	l1932
  3347  0B52  1003               	clrc
  3348  0B53  0008               	return
  3349  0B54                     l1932:	
  3350  0B54  1403               	setc
  3351  0B55  0008               	return
  3352  0B56                     __end_of_ready:	
  3353                           
  3354                           	psect	text14
  3355  0747                     __ptext14:	
  3356 ;; *************** function _uart_response *****************
  3357 ;; Defined at:
  3358 ;;		line 66 in file "stroke main.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  i               1   25[BANK0 ] unsigned char 
  3363 ;;  strings        12    4[BANK0 ] PTR const unsigned char 
  3364 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(6), 
  3365 ;;		 -> STR_2(4), STR_1(6), 
  3366 ;;  so_far          6   16[BANK0 ] unsigned char [6]
  3367 ;;  continue_loo    1   24[BANK0 ] unsigned char 
  3368 ;;  response        1   23[BANK0 ] unsigned char 
  3369 ;;  received        1   22[BANK0 ] unsigned char 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      unsigned char 
  3372 ;; Registers used:
  3373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3379 ;;      Params:         0       0       0       0       0
  3380 ;;      Locals:         0      22       0       0       0
  3381 ;;      Temps:          0       4       0       0       0
  3382 ;;      Totals:         0      26       0       0       0
  3383 ;;Total ram usage:       26 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    3
  3386 ;; This function calls:
  3387 ;;		_uart_rx
  3388 ;; This function is called by:
  3389 ;;		_value1
  3390 ;;		_value2
  3391 ;;		_value3
  3392 ;;		_value4
  3393 ;;		_value5
  3394 ;;		_ready
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function _uart_response
  3400  0747                     _uart_response:	
  3401                           
  3402                           ;stroke main.c: 67: unsigned char so_far[6] = {0,0,0,0,0,0};
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in _uart_response: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3406  0747  3030               	movlw	uart_response@so_far& (0+255)
  3407  0748  0084               	movwf	4
  3408  0749  1683               	bsf	3,5	;RP0=1, select bank1
  3409  074A  1303               	bcf	3,6	;RP1=0, select bank1
  3410  074B  0820               	movf	uart_response@F1320^(0+128),w
  3411  074C  1383               	bcf	3,7	;select IRP bank0
  3412  074D  0080               	movwf	0
  3413  074E  0A84               	incf	4,f
  3414  074F  0821               	movf	(uart_response@F1320^(0+128)+1),w
  3415  0750  0080               	movwf	0
  3416  0751  0A84               	incf	4,f
  3417  0752  0822               	movf	(uart_response@F1320^(0+128)+2),w
  3418  0753  0080               	movwf	0
  3419  0754  0A84               	incf	4,f
  3420  0755  0823               	movf	(uart_response@F1320^(0+128)+3),w
  3421  0756  0080               	movwf	0
  3422  0757  0A84               	incf	4,f
  3423  0758  0824               	movf	(uart_response@F1320^(0+128)+4),w
  3424  0759  0080               	movwf	0
  3425  075A  0A84               	incf	4,f
  3426  075B  0825               	movf	(uart_response@F1320^(0+128)+5),w
  3427  075C  0080               	movwf	0
  3428                           
  3429                           ;stroke main.c: 68: unsigned const char lengths[6] = {5,3,5,4,4,5};
  3430                           ;stroke main.c: 69: unsigned const char* strings[6] = {"temp:", "hr:", "pres:", "lat:", 
      +                          "lon:", "READY"};
  3431  075D  3024               	movlw	uart_response@strings& (0+255)
  3432  075E  0084               	movwf	4
  3433  075F  30B0               	movlw	low uart_response@F1323
  3434  0760  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0761  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0762  00A0               	movwf	??_uart_response
  3437  0763  0804               	movf	4,w
  3438  0764  00A1               	movwf	??_uart_response+1
  3439  0765  300C               	movlw	12
  3440  0766  00A2               	movwf	??_uart_response+2
  3441  0767                     u1190:	
  3442  0767  0820               	movf	??_uart_response,w
  3443  0768  0084               	movwf	4
  3444  0769  1383               	bcf	3,7	;select IRP bank1
  3445  076A  0800               	movf	0,w
  3446  076B  00A3               	movwf	??_uart_response+3
  3447  076C  0AA0               	incf	??_uart_response,f
  3448  076D  0821               	movf	??_uart_response+1,w
  3449  076E  0084               	movwf	4
  3450  076F  0823               	movf	??_uart_response+3,w
  3451  0770  0080               	movwf	0
  3452  0771  0AA1               	incf	??_uart_response+1,f
  3453  0772  0BA2               	decfsz	??_uart_response+2,f
  3454  0773  2F67               	goto	u1190
  3455                           
  3456                           ;stroke main.c: 70: unsigned const char responses[6] = {1, 2, 3, 4 , 5 , 6};
  3457                           ;stroke main.c: 71: unsigned char received;
  3458                           ;stroke main.c: 72: unsigned char response;
  3459                           ;stroke main.c: 73: char continue_loop = 1;
  3460  0774  01B8               	clrf	uart_response@continue_loop
  3461  0775  0AB8               	incf	uart_response@continue_loop,f
  3462  0776                     l1740:	
  3463                           ;stroke main.c: 74: while (continue_loop)
  3464                           
  3465  0776  0838               	movf	uart_response@continue_loop,w
  3466  0777  1903               	btfsc	3,2
  3467  0778  2FDD               	goto	l1742
  3468                           
  3469                           ;stroke main.c: 75: {
  3470                           ;stroke main.c: 76: received = uart_rx();
  3471  0779  120A  158A  2335  120A  118A  	fcall	_uart_rx
  3472  077E  1283               	bcf	3,5	;RP0=0, select bank0
  3473  077F  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0780  00A0               	movwf	??_uart_response
  3475  0781  0820               	movf	??_uart_response,w
  3476  0782  00B6               	movwf	uart_response@received
  3477                           
  3478                           ;stroke main.c: 77: for (unsigned char i = 0; i < 6; i++)
  3479  0783  01B9               	clrf	uart_response@i
  3480  0784                     L1:	
  3481  0784  3006               	movlw	6
  3482  0785  0239               	subwf	uart_response@i,w
  3483  0786  1803               	btfsc	3,0
  3484  0787  2F76               	goto	l1740
  3485                           
  3486                           ;stroke main.c: 78: {
  3487                           ;stroke main.c: 79: if (strings[i][so_far[i]] == received)
  3488  0788  0839               	movf	uart_response@i,w
  3489  0789  00A0               	movwf	??_uart_response
  3490  078A  0720               	addwf	??_uart_response,w
  3491  078B  3E24               	addlw	(low (uart_response@strings| 0))& (0+255)
  3492  078C  0084               	movwf	4
  3493  078D  1383               	bcf	3,7	;select IRP bank0
  3494  078E  0800               	movf	0,w
  3495  078F  00A1               	movwf	??_uart_response+1
  3496  0790  0A84               	incf	4,f
  3497  0791  0800               	movf	0,w
  3498  0792  00A2               	movwf	??_uart_response+2
  3499  0793  0839               	movf	uart_response@i,w
  3500  0794  3E30               	addlw	(low (uart_response@so_far| 0))& (0+255)
  3501  0795  0084               	movwf	4
  3502  0796  0800               	movf	0,w
  3503  0797  0721               	addwf	??_uart_response+1,w
  3504  0798  0084               	movwf	4
  3505  0799  0822               	movf	??_uart_response+2,w
  3506  079A  1803               	skipnc
  3507  079B  0A22               	incf	??_uart_response+2,w
  3508  079C  00FF               	movwf	127
  3509  079D  120A  118A  2500  120A  118A  	fcall	stringtab
  3510  07A2  0636               	xorwf	uart_response@received,w
  3511  07A3  1D03               	skipz
  3512  07A4  2FD3               	goto	l1734
  3513                           
  3514                           ;stroke main.c: 80: {
  3515                           ;stroke main.c: 81: so_far[i]++;
  3516  07A5  3001               	movlw	1
  3517  07A6  00A0               	movwf	??_uart_response
  3518  07A7  0839               	movf	uart_response@i,w
  3519  07A8  3E30               	addlw	(low (uart_response@so_far| 0))& (0+255)
  3520  07A9  0084               	movwf	4
  3521  07AA  0820               	movf	??_uart_response,w
  3522  07AB  1383               	bcf	3,7	;select IRP bank0
  3523  07AC  0780               	addwf	0,f
  3524                           
  3525                           ;stroke main.c: 82: if (so_far[i] == lengths[i])
  3526  07AD  0839               	movf	uart_response@i,w
  3527  07AE  3E22               	addlw	low (uart_response@lengths| (0+32768))
  3528  07AF  0084               	movwf	4
  3529  07B0  3085               	movlw	high (uart_response@lengths| (0+32768))
  3530  07B1  1803               	skipnc
  3531  07B2  3E01               	addlw	1
  3532  07B3  00FF               	movwf	127
  3533  07B4  120A  118A  2500  120A  118A  	fcall	stringtab
  3534  07B9  00A0               	movwf	??_uart_response
  3535  07BA  0839               	movf	uart_response@i,w
  3536  07BB  3E30               	addlw	(low (uart_response@so_far| 0))& (0+255)
  3537  07BC  0084               	movwf	4
  3538  07BD  1383               	bcf	3,7	;select IRP bank0
  3539  07BE  0800               	movf	0,w
  3540  07BF  0620               	xorwf	??_uart_response,w
  3541  07C0  1D03               	skipz
  3542  07C1  2FD8               	goto	l1736
  3543                           
  3544                           ;stroke main.c: 83: {
  3545                           ;stroke main.c: 84: response = responses[i];
  3546  07C2  0839               	movf	uart_response@i,w
  3547  07C3  3E1C               	addlw	low (uart_response@responses| (0+32768))
  3548  07C4  0084               	movwf	4
  3549  07C5  3085               	movlw	high (uart_response@responses| (0+32768))
  3550  07C6  1803               	skipnc
  3551  07C7  3E01               	addlw	1
  3552  07C8  00FF               	movwf	127
  3553  07C9  120A  118A  2500  120A  118A  	fcall	stringtab
  3554  07CE  00A0               	movwf	??_uart_response
  3555  07CF  0820               	movf	??_uart_response,w
  3556  07D0  00B7               	movwf	uart_response@response
  3557                           
  3558                           ;stroke main.c: 85: continue_loop = 0;
  3559  07D1  01B8               	clrf	uart_response@continue_loop
  3560                           
  3561                           ;stroke main.c: 86: }
  3562                           ;stroke main.c: 87: }
  3563  07D2  2FD8               	goto	l1736
  3564  07D3                     l1734:	
  3565                           
  3566                           ;stroke main.c: 88: else
  3567                           ;stroke main.c: 89: {
  3568                           ;stroke main.c: 90: so_far[i] = 0;
  3569  07D3  0839               	movf	uart_response@i,w
  3570  07D4  3E30               	addlw	(low (uart_response@so_far| 0))& (0+255)
  3571  07D5  0084               	movwf	4
  3572  07D6  1383               	bcf	3,7	;select IRP bank0
  3573  07D7  0180               	clrf	0
  3574  07D8                     l1736:	
  3575  07D8  3001               	movlw	1
  3576  07D9  00A0               	movwf	??_uart_response
  3577  07DA  0820               	movf	??_uart_response,w
  3578  07DB  07B9               	addwf	uart_response@i,f
  3579  07DC  2F84               	goto	L1
  3580  07DD                     l1742:	
  3581                           
  3582                           ;stroke main.c: 91: }
  3583                           ;stroke main.c: 92: }
  3584                           ;stroke main.c: 93: }
  3585                           ;stroke main.c: 94: return response;
  3586  07DD  0837               	movf	uart_response@response,w
  3587  07DE  0008               	return
  3588  07DF                     __end_of_uart_response:	
  3589                           
  3590                           	psect	text15
  3591  0B35                     __ptext15:	
  3592 ;; *************** function _uart_rx *****************
  3593 ;; Defined at:
  3594 ;;		line 57 in file "stroke main.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      unsigned char 
  3601 ;; Registers used:
  3602 ;;		wreg
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3608 ;;      Params:         0       0       0       0       0
  3609 ;;      Locals:         0       0       0       0       0
  3610 ;;      Temps:          0       0       0       0       0
  3611 ;;      Totals:         0       0       0       0       0
  3612 ;;Total ram usage:        0 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    2
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_uart_response
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _uart_rx
  3624  0B35                     _uart_rx:	
  3625                           
  3626                           ;stroke main.c: 58: if(OERR)
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _uart_rx: [wreg]
  3630  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  3631  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  3632  0B37  1C98               	btfss	24,1	;volatile
  3633  0B38  2B3B               	goto	l159
  3634                           
  3635                           ;stroke main.c: 59: {
  3636                           ;stroke main.c: 60: CREN = 0;
  3637  0B39  1218               	bcf	24,4	;volatile
  3638                           
  3639                           ;stroke main.c: 61: CREN = 1;
  3640  0B3A  1618               	bsf	24,4	;volatile
  3641  0B3B                     l159:	
  3642                           ;stroke main.c: 62: }
  3643                           ;stroke main.c: 63: while(!RCIF);
  3644                           
  3645  0B3B  1E8C               	btfss	12,5	;volatile
  3646  0B3C  2B3B               	goto	l159
  3647                           
  3648                           ;stroke main.c: 64: return RCREG;
  3649  0B3D  081A               	movf	26,w	;volatile
  3650  0B3E  0008               	return
  3651  0B3F                     __end_of_uart_rx:	
  3652                           
  3653                           	psect	text16
  3654  0DA3                     __ptext16:	
  3655 ;; *************** function _buzzer *****************
  3656 ;; Defined at:
  3657 ;;		line 142 in file "stroke main.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3671 ;;      Params:         0       0       0       0       0
  3672 ;;      Locals:         0       0       0       0       0
  3673 ;;      Temps:          0       3       0       0       0
  3674 ;;      Totals:         0       3       0       0       0
  3675 ;;Total ram usage:        3 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    2
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_main
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           
  3686                           ;psect for function _buzzer
  3687  0DA3                     _buzzer:	
  3688                           
  3689                           ;stroke main.c: 143: RB0 = 1;
  3690                           
  3691                           ;incstack = 0
  3692                           ; Regs used in _buzzer: [wreg]
  3693  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
  3694  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
  3695  0DA5  1406               	bsf	6,0	;volatile
  3696                           
  3697                           ;stroke main.c: 144: _delay((unsigned long)((500)*(20000000/4000.0)));
  3698  0DA6  300D               	movlw	13
  3699  0DA7  1283               	bcf	3,5	;RP0=0, select bank0
  3700  0DA8  1303               	bcf	3,6	;RP1=0, select bank0
  3701  0DA9  00A2               	movwf	??_buzzer+2
  3702  0DAA  30AF               	movlw	175
  3703  0DAB  00A1               	movwf	??_buzzer+1
  3704  0DAC  30B5               	movlw	181
  3705  0DAD  00A0               	movwf	??_buzzer
  3706  0DAE                     u2277:	
  3707  0DAE  0BA0               	decfsz	??_buzzer,f
  3708  0DAF  2DAE               	goto	u2277
  3709  0DB0  0BA1               	decfsz	??_buzzer+1,f
  3710  0DB1  2DAE               	goto	u2277
  3711  0DB2  0BA2               	decfsz	??_buzzer+2,f
  3712  0DB3  2DAE               	goto	u2277
  3713  0DB4  2DB5               	nop2
  3714                           
  3715                           ;stroke main.c: 145: RB0 = 0;
  3716  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  3718  0DB7  1006               	bcf	6,0	;volatile
  3719                           
  3720                           ;stroke main.c: 146: _delay((unsigned long)((500)*(20000000/4000.0)));
  3721  0DB8  300D               	movlw	13
  3722  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  3723  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  3724  0DBB  00A2               	movwf	??_buzzer+2
  3725  0DBC  30AF               	movlw	175
  3726  0DBD  00A1               	movwf	??_buzzer+1
  3727  0DBE  30B5               	movlw	181
  3728  0DBF  00A0               	movwf	??_buzzer
  3729  0DC0                     u2287:	
  3730  0DC0  0BA0               	decfsz	??_buzzer,f
  3731  0DC1  2DC0               	goto	u2287
  3732  0DC2  0BA1               	decfsz	??_buzzer+1,f
  3733  0DC3  2DC0               	goto	u2287
  3734  0DC4  0BA2               	decfsz	??_buzzer+2,f
  3735  0DC5  2DC0               	goto	u2287
  3736  0DC6  2DC7               	nop2
  3737                           
  3738                           ;stroke main.c: 147: RB0 = 1;
  3739  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  3740  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  3741  0DC9  1406               	bsf	6,0	;volatile
  3742                           
  3743                           ;stroke main.c: 148: _delay((unsigned long)((500)*(20000000/4000.0)));
  3744  0DCA  300D               	movlw	13
  3745  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  3747  0DCD  00A2               	movwf	??_buzzer+2
  3748  0DCE  30AF               	movlw	175
  3749  0DCF  00A1               	movwf	??_buzzer+1
  3750  0DD0  30B5               	movlw	181
  3751  0DD1  00A0               	movwf	??_buzzer
  3752  0DD2                     u2297:	
  3753  0DD2  0BA0               	decfsz	??_buzzer,f
  3754  0DD3  2DD2               	goto	u2297
  3755  0DD4  0BA1               	decfsz	??_buzzer+1,f
  3756  0DD5  2DD2               	goto	u2297
  3757  0DD6  0BA2               	decfsz	??_buzzer+2,f
  3758  0DD7  2DD2               	goto	u2297
  3759  0DD8  2DD9               	nop2
  3760                           
  3761                           ;stroke main.c: 149: RB0 = 0;
  3762  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  3763  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  3764  0DDB  1006               	bcf	6,0	;volatile
  3765                           
  3766                           ;stroke main.c: 150: _delay((unsigned long)((500)*(20000000/4000.0)));
  3767  0DDC  300D               	movlw	13
  3768  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  3769  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  3770  0DDF  00A2               	movwf	??_buzzer+2
  3771  0DE0  30AF               	movlw	175
  3772  0DE1  00A1               	movwf	??_buzzer+1
  3773  0DE2  30B5               	movlw	181
  3774  0DE3  00A0               	movwf	??_buzzer
  3775  0DE4                     u2307:	
  3776  0DE4  0BA0               	decfsz	??_buzzer,f
  3777  0DE5  2DE4               	goto	u2307
  3778  0DE6  0BA1               	decfsz	??_buzzer+1,f
  3779  0DE7  2DE4               	goto	u2307
  3780  0DE8  0BA2               	decfsz	??_buzzer+2,f
  3781  0DE9  2DE4               	goto	u2307
  3782  0DEA  2DEB               	nop2
  3783  0DEB  0008               	return
  3784  0DEC                     __end_of_buzzer:	
  3785                           
  3786                           	psect	text17
  3787  0C41                     __ptext17:	
  3788 ;; *************** function _adc_read *****************
  3789 ;; Defined at:
  3790 ;;		line 119 in file "stroke main.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  channel         1    wreg     unsigned char 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  channel         1    4[BANK0 ] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  2    0[BANK0 ] unsigned int 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3804 ;;      Params:         0       2       0       0       0
  3805 ;;      Locals:         0       1       0       0       0
  3806 ;;      Temps:          0       2       0       0       0
  3807 ;;      Totals:         0       5       0       0       0
  3808 ;;Total ram usage:        5 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    2
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_main
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _adc_read
  3820  0C41                     _adc_read:	
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  3824                           ;adc_read@channel stored from wreg
  3825  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  3826  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  3827  0C43  00A4               	movwf	adc_read@channel
  3828                           
  3829                           ;stroke main.c: 120: if(channel > 7)
  3830  0C44  3008               	movlw	8
  3831  0C45  0224               	subwf	adc_read@channel,w
  3832  0C46  1C03               	skipc
  3833  0C47  2C4B               	goto	l1944
  3834                           
  3835                           ;stroke main.c: 121: return 0;
  3836  0C48  01A0               	clrf	?_adc_read
  3837  0C49  01A1               	clrf	?_adc_read+1
  3838  0C4A  0008               	return
  3839  0C4B                     l1944:	
  3840                           
  3841                           ;stroke main.c: 123: ADCON0 &= 0xC5;
  3842  0C4B  30C5               	movlw	197
  3843  0C4C  00A2               	movwf	??_adc_read
  3844  0C4D  0822               	movf	??_adc_read,w
  3845  0C4E  059F               	andwf	31,f	;volatile
  3846                           
  3847                           ;stroke main.c: 124: ADCON0 |= channel<<3;
  3848  0C4F  0824               	movf	adc_read@channel,w
  3849  0C50  00A2               	movwf	??_adc_read
  3850  0C51  3002               	movlw	2
  3851  0C52                     u1655:	
  3852  0C52  1003               	clrc
  3853  0C53  0DA2               	rlf	??_adc_read,f
  3854  0C54  3EFF               	addlw	-1
  3855  0C55  1D03               	skipz
  3856  0C56  2C52               	goto	u1655
  3857  0C57  1003               	clrc
  3858  0C58  0D22               	rlf	??_adc_read,w
  3859  0C59  00A3               	movwf	??_adc_read+1
  3860  0C5A  0823               	movf	??_adc_read+1,w
  3861  0C5B  049F               	iorwf	31,f	;volatile
  3862                           
  3863                           ;stroke main.c: 125: _delay((unsigned long)((2)*(20000000/4000.0)));
  3864  0C5C  300D               	movlw	13
  3865  0C5D  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0C5E  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0C5F  00A3               	movwf	??_adc_read+1
  3868  0C60  30FB               	movlw	251
  3869  0C61  00A2               	movwf	??_adc_read
  3870  0C62                     u2317:	
  3871  0C62  0BA2               	decfsz	??_adc_read,f
  3872  0C63  2C62               	goto	u2317
  3873  0C64  0BA3               	decfsz	??_adc_read+1,f
  3874  0C65  2C62               	goto	u2317
  3875                           
  3876                           ;stroke main.c: 126: GO_nDONE = 1;
  3877  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0C68  151F               	bsf	31,2	;volatile
  3880  0C69                     l207:	
  3881                           ;stroke main.c: 127: while(GO_nDONE);
  3882                           
  3883  0C69  191F               	btfsc	31,2	;volatile
  3884  0C6A  2C69               	goto	l207
  3885                           
  3886                           ;stroke main.c: 128: return ((ADRESH<<8)+ADRESL);
  3887  0C6B  081E               	movf	30,w	;volatile
  3888  0C6C  00A1               	movwf	?_adc_read+1
  3889  0C6D  1683               	bsf	3,5	;RP0=1, select bank1
  3890  0C6E  1303               	bcf	3,6	;RP1=0, select bank1
  3891  0C6F  081E               	movf	30,w	;volatile
  3892  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  3893  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  3894  0C72  00A0               	movwf	?_adc_read
  3895  0C73  0008               	return
  3896  0C74                     __end_of_adc_read:	
  3897                           
  3898                           	psect	text18
  3899  0B2C                     __ptext18:	
  3900 ;; *************** function _adc_init *****************
  3901 ;; Defined at:
  3902 ;;		line 115 in file "stroke main.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3916 ;;      Params:         0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0
  3919 ;;      Totals:         0       0       0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    2
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           
  3931                           ;psect for function _adc_init
  3932  0B2C                     _adc_init:	
  3933                           
  3934                           ;stroke main.c: 116: ADCON0 = 0x81;
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _adc_init: [wreg]
  3938  0B2C  3081               	movlw	129
  3939  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  3940  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  3941  0B2F  009F               	movwf	31	;volatile
  3942                           
  3943                           ;stroke main.c: 117: ADCON1 = 0xC0;
  3944  0B30  30C0               	movlw	192
  3945  0B31  1683               	bsf	3,5	;RP0=1, select bank1
  3946  0B32  1303               	bcf	3,6	;RP1=0, select bank1
  3947  0B33  009F               	movwf	31	;volatile
  3948  0B34  0008               	return
  3949  0B35                     __end_of_adc_init:	
  3950                           
  3951                           	psect	text19
  3952  0BE8                     __ptext19:	
  3953 ;; *************** function ___lwtoft *****************
  3954 ;; Defined at:
  3955 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  c               2    8[BANK0 ] unsigned int 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  3    8[BANK0 ] float 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0, pclath, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3969 ;;      Params:         0       3       0       0       0
  3970 ;;      Locals:         0       0       0       0       0
  3971 ;;      Temps:          0       1       0       0       0
  3972 ;;      Totals:         0       4       0       0       0
  3973 ;;Total ram usage:        4 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    3
  3976 ;; This function calls:
  3977 ;;		___ftpack
  3978 ;; This function is called by:
  3979 ;;		_main
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           
  3984                           ;psect for function ___lwtoft
  3985  0BE8                     ___lwtoft:	
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3989  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  3990  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  3991  0BEA  0828               	movf	___lwtoft@c,w
  3992  0BEB  00A0               	movwf	___ftpack@arg
  3993  0BEC  0829               	movf	___lwtoft@c+1,w
  3994  0BED  00A1               	movwf	___ftpack@arg+1
  3995  0BEE  01A2               	clrf	___ftpack@arg+2
  3996  0BEF  308E               	movlw	142
  3997  0BF0  00AB               	movwf	??___lwtoft
  3998  0BF1  082B               	movf	??___lwtoft,w
  3999  0BF2  00A3               	movwf	___ftpack@exp
  4000  0BF3  01A4               	clrf	___ftpack@sign
  4001  0BF4  120A  118A  2485   	fcall	___ftpack
  4002  0BF7  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0BF8  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0BF9  0820               	movf	?___ftpack,w
  4005  0BFA  00A8               	movwf	?___lwtoft
  4006  0BFB  0821               	movf	?___ftpack+1,w
  4007  0BFC  00A9               	movwf	?___lwtoft+1
  4008  0BFD  0822               	movf	?___ftpack+2,w
  4009  0BFE  00AA               	movwf	?___lwtoft+2
  4010  0BFF  0008               	return
  4011  0C00                     __end_of___lwtoft:	
  4012                           
  4013                           	psect	text20
  4014  0E9F                     __ptext20:	
  4015 ;; *************** function ___fttol *****************
  4016 ;; Defined at:
  4017 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  f1              3   28[BANK0 ] float 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  lval            4   37[BANK0 ] unsigned long 
  4022 ;;  exp1            1   41[BANK0 ] unsigned char 
  4023 ;;  sign1           1   36[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  4   28[BANK0 ] long 
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4033 ;;      Params:         0       4       0       0       0
  4034 ;;      Locals:         0       6       0       0       0
  4035 ;;      Temps:          0       4       0       0       0
  4036 ;;      Totals:         0      14       0       0       0
  4037 ;;Total ram usage:       14 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    2
  4040 ;; This function calls:
  4041 ;;		Nothing
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function ___fttol
  4049  0E9F                     ___fttol:	
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4053  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  4054  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  4055  0EA1  083C               	movf	___fttol@f1,w
  4056  0EA2  00C0               	movwf	??___fttol
  4057  0EA3  083D               	movf	___fttol@f1+1,w
  4058  0EA4  00C1               	movwf	??___fttol+1
  4059  0EA5  083E               	movf	___fttol@f1+2,w
  4060  0EA6  00C2               	movwf	??___fttol+2
  4061  0EA7  1003               	clrc
  4062  0EA8  0D41               	rlf	??___fttol+1,w
  4063  0EA9  0D42               	rlf	??___fttol+2,w
  4064  0EAA  00C3               	movwf	??___fttol+3
  4065  0EAB  0843               	movf	??___fttol+3,w
  4066  0EAC  00C9               	movwf	___fttol@exp1
  4067  0EAD  0849               	movf	___fttol@exp1,w
  4068  0EAE  1D03               	btfss	3,2
  4069  0EAF  2EB9               	goto	l2096
  4070  0EB0  3000               	movlw	0
  4071  0EB1  00BF               	movwf	?___fttol+3
  4072  0EB2  3000               	movlw	0
  4073  0EB3  00BE               	movwf	?___fttol+2
  4074  0EB4  3000               	movlw	0
  4075  0EB5  00BD               	movwf	?___fttol+1
  4076  0EB6  3000               	movlw	0
  4077  0EB7  00BC               	movwf	?___fttol
  4078  0EB8  0008               	return
  4079  0EB9                     l2096:	
  4080  0EB9  083C               	movf	___fttol@f1,w
  4081  0EBA  00C0               	movwf	??___fttol
  4082  0EBB  083D               	movf	___fttol@f1+1,w
  4083  0EBC  00C1               	movwf	??___fttol+1
  4084  0EBD  083E               	movf	___fttol@f1+2,w
  4085  0EBE  00C2               	movwf	??___fttol+2
  4086  0EBF  3017               	movlw	23
  4087  0EC0                     u1915:	
  4088  0EC0  1003               	clrc
  4089  0EC1  0CC2               	rrf	??___fttol+2,f
  4090  0EC2  0CC1               	rrf	??___fttol+1,f
  4091  0EC3  0CC0               	rrf	??___fttol,f
  4092  0EC4  3EFF               	addlw	-1
  4093  0EC5  1D03               	skipz
  4094  0EC6  2EC0               	goto	u1915
  4095  0EC7  0840               	movf	??___fttol,w
  4096  0EC8  00C3               	movwf	??___fttol+3
  4097  0EC9  0843               	movf	??___fttol+3,w
  4098  0ECA  00C4               	movwf	___fttol@sign1
  4099  0ECB  17BD               	bsf	___fttol@f1+1,7
  4100  0ECC  30FF               	movlw	255
  4101  0ECD  05BC               	andwf	___fttol@f1,f
  4102  0ECE  30FF               	movlw	255
  4103  0ECF  05BD               	andwf	___fttol@f1+1,f
  4104  0ED0  3000               	movlw	0
  4105  0ED1  05BE               	andwf	___fttol@f1+2,f
  4106  0ED2  083C               	movf	___fttol@f1,w
  4107  0ED3  00C5               	movwf	___fttol@lval
  4108  0ED4  083D               	movf	___fttol@f1+1,w
  4109  0ED5  00C6               	movwf	___fttol@lval+1
  4110  0ED6  083E               	movf	___fttol@f1+2,w
  4111  0ED7  00C7               	movwf	___fttol@lval+2
  4112  0ED8  01C8               	clrf	___fttol@lval+3
  4113  0ED9  308E               	movlw	142
  4114  0EDA  02C9               	subwf	___fttol@exp1,f
  4115  0EDB  1FC9               	btfss	___fttol@exp1,7
  4116  0EDC  2EFB               	goto	l2116
  4117  0EDD  0849               	movf	___fttol@exp1,w
  4118  0EDE  3A80               	xorlw	128
  4119  0EDF  3E8F               	addlw	143
  4120  0EE0  1803               	skipnc
  4121  0EE1  2EEB               	goto	l2114
  4122  0EE2  3000               	movlw	0
  4123  0EE3  00BF               	movwf	?___fttol+3
  4124  0EE4  3000               	movlw	0
  4125  0EE5  00BE               	movwf	?___fttol+2
  4126  0EE6  3000               	movlw	0
  4127  0EE7  00BD               	movwf	?___fttol+1
  4128  0EE8  3000               	movlw	0
  4129  0EE9  00BC               	movwf	?___fttol
  4130  0EEA  0008               	return
  4131  0EEB                     l2114:	
  4132  0EEB  3001               	movlw	1
  4133  0EEC                     u1945:	
  4134  0EEC  1003               	clrc
  4135  0EED  0CC8               	rrf	___fttol@lval+3,f
  4136  0EEE  0CC7               	rrf	___fttol@lval+2,f
  4137  0EEF  0CC6               	rrf	___fttol@lval+1,f
  4138  0EF0  0CC5               	rrf	___fttol@lval,f
  4139  0EF1  3EFF               	addlw	-1
  4140  0EF2  1D03               	skipz
  4141  0EF3  2EEC               	goto	u1945
  4142  0EF4  3001               	movlw	1
  4143  0EF5  00C0               	movwf	??___fttol
  4144  0EF6  0840               	movf	??___fttol,w
  4145  0EF7  07C9               	addwf	___fttol@exp1,f
  4146  0EF8  1903               	btfsc	3,2
  4147  0EF9  2F16               	goto	l2124
  4148  0EFA  2EEB               	goto	l2114
  4149  0EFB                     l2116:	
  4150  0EFB  3018               	movlw	24
  4151  0EFC  0249               	subwf	___fttol@exp1,w
  4152  0EFD  1C03               	skipc
  4153  0EFE  2F13               	goto	l624
  4154  0EFF  3000               	movlw	0
  4155  0F00  00BF               	movwf	?___fttol+3
  4156  0F01  3000               	movlw	0
  4157  0F02  00BE               	movwf	?___fttol+2
  4158  0F03  3000               	movlw	0
  4159  0F04  00BD               	movwf	?___fttol+1
  4160  0F05  3000               	movlw	0
  4161  0F06  00BC               	movwf	?___fttol
  4162  0F07  0008               	return
  4163  0F08                     l2122:	
  4164  0F08  3001               	movlw	1
  4165  0F09  00C0               	movwf	??___fttol
  4166  0F0A                     u1975:	
  4167  0F0A  1003               	clrc
  4168  0F0B  0DC5               	rlf	___fttol@lval,f
  4169  0F0C  0DC6               	rlf	___fttol@lval+1,f
  4170  0F0D  0DC7               	rlf	___fttol@lval+2,f
  4171  0F0E  0DC8               	rlf	___fttol@lval+3,f
  4172  0F0F  0BC0               	decfsz	??___fttol,f
  4173  0F10  2F0A               	goto	u1975
  4174  0F11  3001               	movlw	1
  4175  0F12  02C9               	subwf	___fttol@exp1,f
  4176  0F13                     l624:	
  4177  0F13  0849               	movf	___fttol@exp1,w
  4178  0F14  1D03               	btfss	3,2
  4179  0F15  2F08               	goto	l2122
  4180  0F16                     l2124:	
  4181  0F16  0844               	movf	___fttol@sign1,w
  4182  0F17  1903               	btfsc	3,2
  4183  0F18  2F24               	goto	l2128
  4184  0F19  09C5               	comf	___fttol@lval,f
  4185  0F1A  09C6               	comf	___fttol@lval+1,f
  4186  0F1B  09C7               	comf	___fttol@lval+2,f
  4187  0F1C  09C8               	comf	___fttol@lval+3,f
  4188  0F1D  0AC5               	incf	___fttol@lval,f
  4189  0F1E  1903               	skipnz
  4190  0F1F  0AC6               	incf	___fttol@lval+1,f
  4191  0F20  1903               	skipnz
  4192  0F21  0AC7               	incf	___fttol@lval+2,f
  4193  0F22  1903               	skipnz
  4194  0F23  0AC8               	incf	___fttol@lval+3,f
  4195  0F24                     l2128:	
  4196  0F24  0848               	movf	___fttol@lval+3,w
  4197  0F25  00BF               	movwf	?___fttol+3
  4198  0F26  0847               	movf	___fttol@lval+2,w
  4199  0F27  00BE               	movwf	?___fttol+2
  4200  0F28  0846               	movf	___fttol@lval+1,w
  4201  0F29  00BD               	movwf	?___fttol+1
  4202  0F2A  0845               	movf	___fttol@lval,w
  4203  0F2B  00BC               	movwf	?___fttol
  4204  0F2C  0008               	return
  4205  0F2D                     __end_of___fttol:	
  4206                           
  4207                           	psect	text21
  4208  0F2D                     __ptext21:	
  4209 ;; *************** function ___ftmul *****************
  4210 ;; Defined at:
  4211 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  f1              3   12[BANK0 ] float 
  4214 ;;  f2              3   15[BANK0 ] float 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  4217 ;;  sign            1   27[BANK0 ] unsigned char 
  4218 ;;  cntr            1   26[BANK0 ] unsigned char 
  4219 ;;  exp             1   22[BANK0 ] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  3   12[BANK0 ] float 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       6       0       0       0
  4230 ;;      Locals:         0       6       0       0       0
  4231 ;;      Temps:          0       4       0       0       0
  4232 ;;      Totals:         0      16       0       0       0
  4233 ;;Total ram usage:       16 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    3
  4236 ;; This function calls:
  4237 ;;		___ftpack
  4238 ;; This function is called by:
  4239 ;;		_main
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           
  4244                           ;psect for function ___ftmul
  4245  0F2D                     ___ftmul:	
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4249  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  4250  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0F2F  082C               	movf	___ftmul@f1,w
  4252  0F30  00B2               	movwf	??___ftmul
  4253  0F31  082D               	movf	___ftmul@f1+1,w
  4254  0F32  00B3               	movwf	??___ftmul+1
  4255  0F33  082E               	movf	___ftmul@f1+2,w
  4256  0F34  00B4               	movwf	??___ftmul+2
  4257  0F35  1003               	clrc
  4258  0F36  0D33               	rlf	??___ftmul+1,w
  4259  0F37  0D34               	rlf	??___ftmul+2,w
  4260  0F38  00B5               	movwf	??___ftmul+3
  4261  0F39  0835               	movf	??___ftmul+3,w
  4262  0F3A  00B6               	movwf	___ftmul@exp
  4263  0F3B  0836               	movf	___ftmul@exp,w
  4264  0F3C  1D03               	btfss	3,2
  4265  0F3D  2F45               	goto	l2046
  4266  0F3E  3000               	movlw	0
  4267  0F3F  00AC               	movwf	?___ftmul
  4268  0F40  3000               	movlw	0
  4269  0F41  00AD               	movwf	?___ftmul+1
  4270  0F42  3000               	movlw	0
  4271  0F43  00AE               	movwf	?___ftmul+2
  4272  0F44  0008               	return
  4273  0F45                     l2046:	
  4274  0F45  082F               	movf	___ftmul@f2,w
  4275  0F46  00B2               	movwf	??___ftmul
  4276  0F47  0830               	movf	___ftmul@f2+1,w
  4277  0F48  00B3               	movwf	??___ftmul+1
  4278  0F49  0831               	movf	___ftmul@f2+2,w
  4279  0F4A  00B4               	movwf	??___ftmul+2
  4280  0F4B  1003               	clrc
  4281  0F4C  0D33               	rlf	??___ftmul+1,w
  4282  0F4D  0D34               	rlf	??___ftmul+2,w
  4283  0F4E  00B5               	movwf	??___ftmul+3
  4284  0F4F  0835               	movf	??___ftmul+3,w
  4285  0F50  00BB               	movwf	___ftmul@sign
  4286  0F51  083B               	movf	___ftmul@sign,w
  4287  0F52  1D03               	btfss	3,2
  4288  0F53  2F5B               	goto	l2052
  4289  0F54  3000               	movlw	0
  4290  0F55  00AC               	movwf	?___ftmul
  4291  0F56  3000               	movlw	0
  4292  0F57  00AD               	movwf	?___ftmul+1
  4293  0F58  3000               	movlw	0
  4294  0F59  00AE               	movwf	?___ftmul+2
  4295  0F5A  0008               	return
  4296  0F5B                     l2052:	
  4297  0F5B  083B               	movf	___ftmul@sign,w
  4298  0F5C  3E7B               	addlw	123
  4299  0F5D  00B2               	movwf	??___ftmul
  4300  0F5E  0832               	movf	??___ftmul,w
  4301  0F5F  07B6               	addwf	___ftmul@exp,f
  4302  0F60  082C               	movf	___ftmul@f1,w
  4303  0F61  00B2               	movwf	??___ftmul
  4304  0F62  082D               	movf	___ftmul@f1+1,w
  4305  0F63  00B3               	movwf	??___ftmul+1
  4306  0F64  082E               	movf	___ftmul@f1+2,w
  4307  0F65  00B4               	movwf	??___ftmul+2
  4308  0F66  3010               	movlw	16
  4309  0F67                     u1785:	
  4310  0F67  1003               	clrc
  4311  0F68  0CB4               	rrf	??___ftmul+2,f
  4312  0F69  0CB3               	rrf	??___ftmul+1,f
  4313  0F6A  0CB2               	rrf	??___ftmul,f
  4314  0F6B  3EFF               	addlw	-1
  4315  0F6C  1D03               	skipz
  4316  0F6D  2F67               	goto	u1785
  4317  0F6E  0832               	movf	??___ftmul,w
  4318  0F6F  00B5               	movwf	??___ftmul+3
  4319  0F70  0835               	movf	??___ftmul+3,w
  4320  0F71  00BB               	movwf	___ftmul@sign
  4321  0F72  082F               	movf	___ftmul@f2,w
  4322  0F73  00B2               	movwf	??___ftmul
  4323  0F74  0830               	movf	___ftmul@f2+1,w
  4324  0F75  00B3               	movwf	??___ftmul+1
  4325  0F76  0831               	movf	___ftmul@f2+2,w
  4326  0F77  00B4               	movwf	??___ftmul+2
  4327  0F78  3010               	movlw	16
  4328  0F79                     u1795:	
  4329  0F79  1003               	clrc
  4330  0F7A  0CB4               	rrf	??___ftmul+2,f
  4331  0F7B  0CB3               	rrf	??___ftmul+1,f
  4332  0F7C  0CB2               	rrf	??___ftmul,f
  4333  0F7D  3EFF               	addlw	-1
  4334  0F7E  1D03               	skipz
  4335  0F7F  2F79               	goto	u1795
  4336  0F80  0832               	movf	??___ftmul,w
  4337  0F81  00B5               	movwf	??___ftmul+3
  4338  0F82  0835               	movf	??___ftmul+3,w
  4339  0F83  06BB               	xorwf	___ftmul@sign,f
  4340  0F84  3080               	movlw	128
  4341  0F85  00B2               	movwf	??___ftmul
  4342  0F86  0832               	movf	??___ftmul,w
  4343  0F87  05BB               	andwf	___ftmul@sign,f
  4344  0F88  17AD               	bsf	___ftmul@f1+1,7
  4345  0F89  17B0               	bsf	___ftmul@f2+1,7
  4346  0F8A  30FF               	movlw	255
  4347  0F8B  05AF               	andwf	___ftmul@f2,f
  4348  0F8C  30FF               	movlw	255
  4349  0F8D  05B0               	andwf	___ftmul@f2+1,f
  4350  0F8E  3000               	movlw	0
  4351  0F8F  05B1               	andwf	___ftmul@f2+2,f
  4352  0F90  3000               	movlw	0
  4353  0F91  00B7               	movwf	___ftmul@f3_as_product
  4354  0F92  3000               	movlw	0
  4355  0F93  00B8               	movwf	___ftmul@f3_as_product+1
  4356  0F94  3000               	movlw	0
  4357  0F95  00B9               	movwf	___ftmul@f3_as_product+2
  4358  0F96  3007               	movlw	7
  4359  0F97  00B2               	movwf	??___ftmul
  4360  0F98  0832               	movf	??___ftmul,w
  4361  0F99  00BA               	movwf	___ftmul@cntr
  4362  0F9A                     l2064:	
  4363  0F9A  1C2C               	btfss	___ftmul@f1,0
  4364  0F9B  2FAA               	goto	l2068
  4365  0F9C  082F               	movf	___ftmul@f2,w
  4366  0F9D  07B7               	addwf	___ftmul@f3_as_product,f
  4367  0F9E  0830               	movf	___ftmul@f2+1,w
  4368  0F9F  1103               	clrz
  4369  0FA0  1803               	skipnc
  4370  0FA1  0A30               	incf	___ftmul@f2+1,w
  4371  0FA2  1D03               	btfss	3,2
  4372  0FA3  07B8               	addwf	___ftmul@f3_as_product+1,f
  4373  0FA4  0831               	movf	___ftmul@f2+2,w
  4374  0FA5  1103               	clrz
  4375  0FA6  1803               	skipnc
  4376  0FA7  0A31               	incf	___ftmul@f2+2,w
  4377  0FA8  1D03               	btfss	3,2
  4378  0FA9  07B9               	addwf	___ftmul@f3_as_product+2,f
  4379  0FAA                     l2068:	
  4380  0FAA  3001               	movlw	1
  4381  0FAB                     u1825:	
  4382  0FAB  1003               	clrc
  4383  0FAC  0CAE               	rrf	___ftmul@f1+2,f
  4384  0FAD  0CAD               	rrf	___ftmul@f1+1,f
  4385  0FAE  0CAC               	rrf	___ftmul@f1,f
  4386  0FAF  3EFF               	addlw	-1
  4387  0FB0  1D03               	skipz
  4388  0FB1  2FAB               	goto	u1825
  4389  0FB2  3001               	movlw	1
  4390  0FB3                     u1835:	
  4391  0FB3  1003               	clrc
  4392  0FB4  0DAF               	rlf	___ftmul@f2,f
  4393  0FB5  0DB0               	rlf	___ftmul@f2+1,f
  4394  0FB6  0DB1               	rlf	___ftmul@f2+2,f
  4395  0FB7  3EFF               	addlw	-1
  4396  0FB8  1D03               	skipz
  4397  0FB9  2FB3               	goto	u1835
  4398  0FBA  3001               	movlw	1
  4399  0FBB  02BA               	subwf	___ftmul@cntr,f
  4400  0FBC  1D03               	btfss	3,2
  4401  0FBD  2F9A               	goto	l2064
  4402  0FBE  3009               	movlw	9
  4403  0FBF  00B2               	movwf	??___ftmul
  4404  0FC0  0832               	movf	??___ftmul,w
  4405  0FC1  00BA               	movwf	___ftmul@cntr
  4406  0FC2                     l2076:	
  4407  0FC2  1C2C               	btfss	___ftmul@f1,0
  4408  0FC3  2FD2               	goto	l2080
  4409  0FC4  082F               	movf	___ftmul@f2,w
  4410  0FC5  07B7               	addwf	___ftmul@f3_as_product,f
  4411  0FC6  0830               	movf	___ftmul@f2+1,w
  4412  0FC7  1103               	clrz
  4413  0FC8  1803               	skipnc
  4414  0FC9  0A30               	incf	___ftmul@f2+1,w
  4415  0FCA  1D03               	btfss	3,2
  4416  0FCB  07B8               	addwf	___ftmul@f3_as_product+1,f
  4417  0FCC  0831               	movf	___ftmul@f2+2,w
  4418  0FCD  1103               	clrz
  4419  0FCE  1803               	skipnc
  4420  0FCF  0A31               	incf	___ftmul@f2+2,w
  4421  0FD0  1D03               	btfss	3,2
  4422  0FD1  07B9               	addwf	___ftmul@f3_as_product+2,f
  4423  0FD2                     l2080:	
  4424  0FD2  3001               	movlw	1
  4425  0FD3                     u1875:	
  4426  0FD3  1003               	clrc
  4427  0FD4  0CAE               	rrf	___ftmul@f1+2,f
  4428  0FD5  0CAD               	rrf	___ftmul@f1+1,f
  4429  0FD6  0CAC               	rrf	___ftmul@f1,f
  4430  0FD7  3EFF               	addlw	-1
  4431  0FD8  1D03               	skipz
  4432  0FD9  2FD3               	goto	u1875
  4433  0FDA  3001               	movlw	1
  4434  0FDB                     u1885:	
  4435  0FDB  1003               	clrc
  4436  0FDC  0CB9               	rrf	___ftmul@f3_as_product+2,f
  4437  0FDD  0CB8               	rrf	___ftmul@f3_as_product+1,f
  4438  0FDE  0CB7               	rrf	___ftmul@f3_as_product,f
  4439  0FDF  3EFF               	addlw	-1
  4440  0FE0  1D03               	skipz
  4441  0FE1  2FDB               	goto	u1885
  4442  0FE2  3001               	movlw	1
  4443  0FE3  02BA               	subwf	___ftmul@cntr,f
  4444  0FE4  1D03               	btfss	3,2
  4445  0FE5  2FC2               	goto	l2076
  4446  0FE6  0837               	movf	___ftmul@f3_as_product,w
  4447  0FE7  00A0               	movwf	___ftpack@arg
  4448  0FE8  0838               	movf	___ftmul@f3_as_product+1,w
  4449  0FE9  00A1               	movwf	___ftpack@arg+1
  4450  0FEA  0839               	movf	___ftmul@f3_as_product+2,w
  4451  0FEB  00A2               	movwf	___ftpack@arg+2
  4452  0FEC  0836               	movf	___ftmul@exp,w
  4453  0FED  00B2               	movwf	??___ftmul
  4454  0FEE  0832               	movf	??___ftmul,w
  4455  0FEF  00A3               	movwf	___ftpack@exp
  4456  0FF0  083B               	movf	___ftmul@sign,w
  4457  0FF1  00B3               	movwf	??___ftmul+1
  4458  0FF2  0833               	movf	??___ftmul+1,w
  4459  0FF3  00A4               	movwf	___ftpack@sign
  4460  0FF4  120A  118A  2485   	fcall	___ftpack
  4461  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0FF9  0820               	movf	?___ftpack,w
  4464  0FFA  00AC               	movwf	?___ftmul
  4465  0FFB  0821               	movf	?___ftpack+1,w
  4466  0FFC  00AD               	movwf	?___ftmul+1
  4467  0FFD  0822               	movf	?___ftpack+2,w
  4468  0FFE  00AE               	movwf	?___ftmul+2
  4469  0FFF  0008               	return
  4470  1000                     __end_of___ftmul:	
  4471                           
  4472                           	psect	text22
  4473  0485                     __ptext22:	
  4474 ;; *************** function ___ftpack *****************
  4475 ;; Defined at:
  4476 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  arg             3    0[BANK0 ] unsigned um
  4479 ;;  exp             1    3[BANK0 ] unsigned char 
  4480 ;;  sign            1    4[BANK0 ] unsigned char 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  3    0[BANK0 ] float 
  4485 ;; Registers used:
  4486 ;;		wreg, status,2, status,0
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4492 ;;      Params:         0       5       0       0       0
  4493 ;;      Locals:         0       0       0       0       0
  4494 ;;      Temps:          0       3       0       0       0
  4495 ;;      Totals:         0       8       0       0       0
  4496 ;;Total ram usage:        8 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    2
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		___ftmul
  4503 ;;		___lwtoft
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function ___ftpack
  4509  0485                     ___ftpack:	
  4510                           
  4511                           ;incstack = 0
  4512                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4513  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0486  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0487  0823               	movf	___ftpack@exp,w
  4516  0488  1903               	btfsc	3,2
  4517  0489  2C8F               	goto	l1750
  4518  048A  0822               	movf	___ftpack@arg+2,w
  4519  048B  0421               	iorwf	___ftpack@arg+1,w
  4520  048C  0420               	iorwf	___ftpack@arg,w
  4521  048D  1D03               	skipz
  4522  048E  2CA2               	goto	l1756
  4523  048F                     l1750:	
  4524  048F  3000               	movlw	0
  4525  0490  00A0               	movwf	?___ftpack
  4526  0491  3000               	movlw	0
  4527  0492  00A1               	movwf	?___ftpack+1
  4528  0493  3000               	movlw	0
  4529  0494  00A2               	movwf	?___ftpack+2
  4530  0495  0008               	return
  4531  0496                     l1754:	
  4532  0496  3001               	movlw	1
  4533  0497  00A5               	movwf	??___ftpack
  4534  0498  0825               	movf	??___ftpack,w
  4535  0499  07A3               	addwf	___ftpack@exp,f
  4536  049A  3001               	movlw	1
  4537  049B                     u1275:	
  4538  049B  1003               	clrc
  4539  049C  0CA2               	rrf	___ftpack@arg+2,f
  4540  049D  0CA1               	rrf	___ftpack@arg+1,f
  4541  049E  0CA0               	rrf	___ftpack@arg,f
  4542  049F  3EFF               	addlw	-1
  4543  04A0  1D03               	skipz
  4544  04A1  2C9B               	goto	u1275
  4545  04A2                     l1756:	
  4546  04A2  30FE               	movlw	254
  4547  04A3  0522               	andwf	___ftpack@arg+2,w
  4548  04A4  1903               	btfsc	3,2
  4549  04A5  2CBD               	goto	l533
  4550  04A6  2C96               	goto	l1754
  4551  04A7                     l1758:	
  4552  04A7  3001               	movlw	1
  4553  04A8  00A5               	movwf	??___ftpack
  4554  04A9  0825               	movf	??___ftpack,w
  4555  04AA  07A3               	addwf	___ftpack@exp,f
  4556  04AB  3001               	movlw	1
  4557  04AC  07A0               	addwf	___ftpack@arg,f
  4558  04AD  3000               	movlw	0
  4559  04AE  1803               	skipnc
  4560  04AF  3001               	movlw	1
  4561  04B0  07A1               	addwf	___ftpack@arg+1,f
  4562  04B1  3000               	movlw	0
  4563  04B2  1803               	skipnc
  4564  04B3  3001               	movlw	1
  4565  04B4  07A2               	addwf	___ftpack@arg+2,f
  4566  04B5  3001               	movlw	1
  4567  04B6                     u1295:	
  4568  04B6  1003               	clrc
  4569  04B7  0CA2               	rrf	___ftpack@arg+2,f
  4570  04B8  0CA1               	rrf	___ftpack@arg+1,f
  4571  04B9  0CA0               	rrf	___ftpack@arg,f
  4572  04BA  3EFF               	addlw	-1
  4573  04BB  1D03               	skipz
  4574  04BC  2CB6               	goto	u1295
  4575  04BD                     l533:	
  4576  04BD  30FF               	movlw	255
  4577  04BE  0522               	andwf	___ftpack@arg+2,w
  4578  04BF  1903               	btfsc	3,2
  4579  04C0  2CCC               	goto	l1766
  4580  04C1  2CA7               	goto	l1758
  4581  04C2                     l1764:	
  4582  04C2  3001               	movlw	1
  4583  04C3  02A3               	subwf	___ftpack@exp,f
  4584  04C4  3001               	movlw	1
  4585  04C5                     u1315:	
  4586  04C5  1003               	clrc
  4587  04C6  0DA0               	rlf	___ftpack@arg,f
  4588  04C7  0DA1               	rlf	___ftpack@arg+1,f
  4589  04C8  0DA2               	rlf	___ftpack@arg+2,f
  4590  04C9  3EFF               	addlw	-1
  4591  04CA  1D03               	skipz
  4592  04CB  2CC5               	goto	u1315
  4593  04CC                     l1766:	
  4594  04CC  1BA1               	btfsc	___ftpack@arg+1,7
  4595  04CD  2CD2               	goto	l540
  4596  04CE  3002               	movlw	2
  4597  04CF  0223               	subwf	___ftpack@exp,w
  4598  04D0  1803               	skipnc
  4599  04D1  2CC2               	goto	l1764
  4600  04D2                     l540:	
  4601  04D2  1823               	btfsc	___ftpack@exp,0
  4602  04D3  2CDA               	goto	l541
  4603  04D4  30FF               	movlw	255
  4604  04D5  05A0               	andwf	___ftpack@arg,f
  4605  04D6  307F               	movlw	127
  4606  04D7  05A1               	andwf	___ftpack@arg+1,f
  4607  04D8  30FF               	movlw	255
  4608  04D9  05A2               	andwf	___ftpack@arg+2,f
  4609  04DA                     l541:	
  4610  04DA  1003               	clrc
  4611  04DB  0CA3               	rrf	___ftpack@exp,f
  4612  04DC  0823               	movf	___ftpack@exp,w
  4613  04DD  00A5               	movwf	??___ftpack
  4614  04DE  01A6               	clrf	??___ftpack+1
  4615  04DF  01A7               	clrf	??___ftpack+2
  4616  04E0  3010               	movlw	16
  4617  04E1                     u1355:	
  4618  04E1  1003               	clrc
  4619  04E2  0DA5               	rlf	??___ftpack,f
  4620  04E3  0DA6               	rlf	??___ftpack+1,f
  4621  04E4  0DA7               	rlf	??___ftpack+2,f
  4622  04E5  3EFF               	addlw	-1
  4623  04E6  1D03               	skipz
  4624  04E7  2CE1               	goto	u1355
  4625  04E8  0825               	movf	??___ftpack,w
  4626  04E9  04A0               	iorwf	___ftpack@arg,f
  4627  04EA  0826               	movf	??___ftpack+1,w
  4628  04EB  04A1               	iorwf	___ftpack@arg+1,f
  4629  04EC  0827               	movf	??___ftpack+2,w
  4630  04ED  04A2               	iorwf	___ftpack@arg+2,f
  4631  04EE  0824               	movf	___ftpack@sign,w
  4632  04EF  1903               	btfsc	3,2
  4633  04F0  0008               	return
  4634  04F1  17A2               	bsf	___ftpack@arg+2,7
  4635  04F2  0008               	return
  4636  04F3                     __end_of___ftpack:	
  4637                           
  4638                           	psect	text23
  4639  0D62                     __ptext23:	
  4640 ;; *************** function _Lcd_Write_String *****************
  4641 ;; Defined at:
  4642 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  a               2    5[BANK0 ] PTR unsigned char 
  4645 ;;		 -> STR_33(17), STR_32(17), STR_30(17), STR_28(17), 
  4646 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
  4647 ;;		 -> STR_22(6), STR_21(5), main@p(10), STR_19(6), 
  4648 ;;		 -> STR_18(5), STR_16(5), main@h(10), STR_14(5), 
  4649 ;;		 -> main@t(10), STR_12(5), STR_11(7), STR_10(17), 
  4650 ;;		 -> STR_9(17), STR_8(17), STR_7(17), 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  i               2   10[BANK0 ] int 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4662 ;;      Params:         0       2       0       0       0
  4663 ;;      Locals:         0       2       0       0       0
  4664 ;;      Temps:          0       3       0       0       0
  4665 ;;      Totals:         0       7       0       0       0
  4666 ;;Total ram usage:        7 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    4
  4669 ;; This function calls:
  4670 ;;		_Lcd_Write_Char
  4671 ;; This function is called by:
  4672 ;;		_main
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function _Lcd_Write_String
  4678  0D62                     _Lcd_Write_String:	
  4679                           
  4680                           ;lcd.h: 94: int i;
  4681                           ;lcd.h: 95: for(i=0;a[i]!='\0';i++)
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4685  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  4687  0D64  01AA               	clrf	Lcd_Write_String@i
  4688  0D65  01AB               	clrf	Lcd_Write_String@i+1
  4689  0D66                     l1864:	
  4690  0D66  082A               	movf	Lcd_Write_String@i,w
  4691  0D67  0725               	addwf	Lcd_Write_String@a,w
  4692  0D68  00A8               	movwf	??_Lcd_Write_String+1
  4693  0D69  0826               	movf	Lcd_Write_String@a+1,w
  4694  0D6A  00A7               	movwf	??_Lcd_Write_String
  4695  0D6B  1803               	skipnc
  4696  0D6C  0AA7               	incf	??_Lcd_Write_String,f
  4697  0D6D  1BAA               	btfsc	Lcd_Write_String@i,7
  4698  0D6E  03A7               	decf	??_Lcd_Write_String,f
  4699  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  4700  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  4701  0D71  0827               	movf	??_Lcd_Write_String,w
  4702  0D72  00A9               	movwf	??_Lcd_Write_String+2
  4703  0D73  0829               	movf	??_Lcd_Write_String+2,w
  4704  0D74  00FF               	movwf	127
  4705  0D75  0828               	movf	??_Lcd_Write_String+1,w
  4706  0D76  0084               	movwf	4
  4707  0D77  120A  118A  2500  120A  158A  	fcall	stringtab
  4708  0D7C  3A00               	xorlw	0
  4709  0D7D  1903               	btfsc	3,2
  4710  0D7E  0008               	return
  4711                           
  4712                           ;lcd.h: 96: Lcd_Write_Char(a[i]);
  4713  0D7F  082A               	movf	Lcd_Write_String@i,w
  4714  0D80  0725               	addwf	Lcd_Write_String@a,w
  4715  0D81  00A8               	movwf	??_Lcd_Write_String+1
  4716  0D82  0826               	movf	Lcd_Write_String@a+1,w
  4717  0D83  00A7               	movwf	??_Lcd_Write_String
  4718  0D84  1803               	skipnc
  4719  0D85  0AA7               	incf	??_Lcd_Write_String,f
  4720  0D86  1BAA               	btfsc	Lcd_Write_String@i,7
  4721  0D87  03A7               	decf	??_Lcd_Write_String,f
  4722  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  4723  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  4724  0D8A  0827               	movf	??_Lcd_Write_String,w
  4725  0D8B  00A9               	movwf	??_Lcd_Write_String+2
  4726  0D8C  0829               	movf	??_Lcd_Write_String+2,w
  4727  0D8D  00FF               	movwf	127
  4728  0D8E  0828               	movf	??_Lcd_Write_String+1,w
  4729  0D8F  0084               	movwf	4
  4730  0D90  120A  118A  2500  120A  158A  	fcall	stringtab
  4731  0D95  120A  158A  24A8  120A  158A  	fcall	_Lcd_Write_Char
  4732  0D9A  3001               	movlw	1
  4733  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  4734  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  4735  0D9D  07AA               	addwf	Lcd_Write_String@i,f
  4736  0D9E  1803               	skipnc
  4737  0D9F  0AAB               	incf	Lcd_Write_String@i+1,f
  4738  0DA0  3000               	movlw	0
  4739  0DA1  07AB               	addwf	Lcd_Write_String@i+1,f
  4740  0DA2  2D66               	goto	l1864
  4741  0DA3                     __end_of_Lcd_Write_String:	
  4742                           
  4743                           	psect	text24
  4744  0CA8                     __ptext24:	
  4745 ;; *************** function _Lcd_Write_Char *****************
  4746 ;; Defined at:
  4747 ;;		line 76 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  a               1    wreg     unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  a               1    4[BANK0 ] unsigned char 
  4752 ;;  y               1    3[BANK0 ] unsigned char 
  4753 ;;  temp            1    2[BANK0 ] unsigned char 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, status,2, status,0, pclath, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4763 ;;      Params:         0       0       0       0       0
  4764 ;;      Locals:         0       3       0       0       0
  4765 ;;      Temps:          0       1       0       0       0
  4766 ;;      Totals:         0       4       0       0       0
  4767 ;;Total ram usage:        4 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    3
  4770 ;; This function calls:
  4771 ;;		_Lcd_Port
  4772 ;; This function is called by:
  4773 ;;		_Lcd_Write_String
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           
  4778                           ;psect for function _Lcd_Write_Char
  4779  0CA8                     _Lcd_Write_Char:	
  4780                           
  4781                           ;incstack = 0
  4782                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4783                           ;Lcd_Write_Char@a stored from wreg
  4784  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  4785  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  4786  0CAA  00A4               	movwf	Lcd_Write_Char@a
  4787                           
  4788                           ;lcd.h: 78: char temp,y;
  4789                           ;lcd.h: 79: temp = a&0x0F;
  4790  0CAB  0824               	movf	Lcd_Write_Char@a,w
  4791  0CAC  390F               	andlw	15
  4792  0CAD  00A1               	movwf	??_Lcd_Write_Char
  4793  0CAE  0821               	movf	??_Lcd_Write_Char,w
  4794  0CAF  00A2               	movwf	Lcd_Write_Char@temp
  4795                           
  4796                           ;lcd.h: 80: y = a&0xF0;
  4797  0CB0  0824               	movf	Lcd_Write_Char@a,w
  4798  0CB1  39F0               	andlw	240
  4799  0CB2  00A1               	movwf	??_Lcd_Write_Char
  4800  0CB3  0821               	movf	??_Lcd_Write_Char,w
  4801  0CB4  00A3               	movwf	Lcd_Write_Char@y
  4802                           
  4803                           ;lcd.h: 81: RD2 = 1;
  4804  0CB5  1508               	bsf	8,2	;volatile
  4805                           
  4806                           ;lcd.h: 82: Lcd_Port(y>>4);
  4807  0CB6  0823               	movf	Lcd_Write_Char@y,w
  4808  0CB7  00A1               	movwf	??_Lcd_Write_Char
  4809  0CB8  3004               	movlw	4
  4810  0CB9                     u1165:	
  4811  0CB9  1003               	clrc
  4812  0CBA  0CA1               	rrf	??_Lcd_Write_Char,f
  4813  0CBB  3EFF               	addlw	-1
  4814  0CBC  1D03               	skipz
  4815  0CBD  2CB9               	goto	u1165
  4816  0CBE  0821               	movf	??_Lcd_Write_Char,w
  4817  0CBF  120A  158A  23D0  120A  158A  	fcall	_Lcd_Port
  4818                           
  4819                           ;lcd.h: 83: RD3 = 1;
  4820  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  4821  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  4822  0CC6  1588               	bsf	8,3	;volatile
  4823                           
  4824                           ;lcd.h: 84: _delay((unsigned long)((40)*(20000000/4000000.0)));
  4825  0CC7  3041               	movlw	65
  4826  0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  4827  0CC9  1303               	bcf	3,6	;RP1=0, select bank0
  4828  0CCA  00A1               	movwf	??_Lcd_Write_Char
  4829  0CCB                     u2327:	
  4830  0CCB  0BA1               	decfsz	??_Lcd_Write_Char,f
  4831  0CCC  2CCB               	goto	u2327
  4832  0CCD  2CCE               	nop2
  4833                           
  4834                           ;lcd.h: 85: RD3 = 0;
  4835  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  4836  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  4837  0CD0  1188               	bcf	8,3	;volatile
  4838                           
  4839                           ;lcd.h: 86: Lcd_Port(temp);
  4840  0CD1  0822               	movf	Lcd_Write_Char@temp,w
  4841  0CD2  120A  158A  23D0  120A  158A  	fcall	_Lcd_Port
  4842                           
  4843                           ;lcd.h: 87: RD3 = 1;
  4844  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0CD9  1588               	bsf	8,3	;volatile
  4847                           
  4848                           ;lcd.h: 88: _delay((unsigned long)((40)*(20000000/4000000.0)));
  4849  0CDA  3041               	movlw	65
  4850  0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  4851  0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  4852  0CDD  00A1               	movwf	??_Lcd_Write_Char
  4853  0CDE                     u2337:	
  4854  0CDE  0BA1               	decfsz	??_Lcd_Write_Char,f
  4855  0CDF  2CDE               	goto	u2337
  4856  0CE0  2CE1               	nop2
  4857                           
  4858                           ;lcd.h: 89: RD3 = 0;
  4859  0CE1  1283               	bcf	3,5	;RP0=0, select bank0
  4860  0CE2  1303               	bcf	3,6	;RP1=0, select bank0
  4861  0CE3  1188               	bcf	8,3	;volatile
  4862  0CE4  0008               	return
  4863  0CE5                     __end_of_Lcd_Write_Char:	
  4864                           
  4865                           	psect	text25
  4866  0DEC                     __ptext25:	
  4867 ;; *************** function _Lcd_Set_Cursor *****************
  4868 ;; Defined at:
  4869 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  a               1    wreg     unsigned char 
  4872 ;;  b               1    4[BANK0 ] unsigned char 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  a               1    7[BANK0 ] unsigned char 
  4875 ;;  temp            1   10[BANK0 ] unsigned char 
  4876 ;;  y               1    9[BANK0 ] unsigned char 
  4877 ;;  z               1    8[BANK0 ] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4887 ;;      Params:         0       1       0       0       0
  4888 ;;      Locals:         0       4       0       0       0
  4889 ;;      Temps:          0       2       0       0       0
  4890 ;;      Totals:         0       7       0       0       0
  4891 ;;Total ram usage:        7 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    4
  4894 ;; This function calls:
  4895 ;;		_Lcd_Cmd
  4896 ;; This function is called by:
  4897 ;;		_main
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           
  4902                           ;psect for function _Lcd_Set_Cursor
  4903  0DEC                     _Lcd_Set_Cursor:	
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4907                           ;Lcd_Set_Cursor@a stored from wreg
  4908  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0DEE  00A7               	movwf	Lcd_Set_Cursor@a
  4911                           
  4912                           ;lcd.h: 39: char temp,z,y;
  4913                           ;lcd.h: 40: if(a == 1)
  4914  0DEF  0327               	decf	Lcd_Set_Cursor@a,w
  4915  0DF0  1D03               	btfss	3,2
  4916  0DF1  2E15               	goto	l1838
  4917                           
  4918                           ;lcd.h: 41: {
  4919                           ;lcd.h: 42: temp = 0x80 + b - 1;
  4920  0DF2  0824               	movf	Lcd_Set_Cursor@b,w
  4921  0DF3  3E7F               	addlw	127
  4922  0DF4  00A5               	movwf	??_Lcd_Set_Cursor
  4923  0DF5  0825               	movf	??_Lcd_Set_Cursor,w
  4924  0DF6  00AA               	movwf	Lcd_Set_Cursor@temp
  4925                           
  4926                           ;lcd.h: 43: z = temp>>4;
  4927  0DF7  082A               	movf	Lcd_Set_Cursor@temp,w
  4928  0DF8  00A5               	movwf	??_Lcd_Set_Cursor
  4929  0DF9  3004               	movlw	4
  4930  0DFA                     u1515:	
  4931  0DFA  1003               	clrc
  4932  0DFB  0CA5               	rrf	??_Lcd_Set_Cursor,f
  4933  0DFC  3EFF               	addlw	-1
  4934  0DFD  1D03               	skipz
  4935  0DFE  2DFA               	goto	u1515
  4936  0DFF  0825               	movf	??_Lcd_Set_Cursor,w
  4937  0E00  00A6               	movwf	??_Lcd_Set_Cursor+1
  4938  0E01  0826               	movf	??_Lcd_Set_Cursor+1,w
  4939  0E02  00A8               	movwf	Lcd_Set_Cursor@z
  4940                           
  4941                           ;lcd.h: 44: y = temp & 0x0F;
  4942  0E03  082A               	movf	Lcd_Set_Cursor@temp,w
  4943  0E04  390F               	andlw	15
  4944  0E05  00A5               	movwf	??_Lcd_Set_Cursor
  4945  0E06  0825               	movf	??_Lcd_Set_Cursor,w
  4946  0E07  00A9               	movwf	Lcd_Set_Cursor@y
  4947                           
  4948                           ;lcd.h: 45: Lcd_Cmd(z);
  4949  0E08  0828               	movf	Lcd_Set_Cursor@z,w
  4950  0E09  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  4951                           
  4952                           ;lcd.h: 46: Lcd_Cmd(y);
  4953  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0E10  0829               	movf	Lcd_Set_Cursor@y,w
  4956  0E11  120A  158A  2400   	fcall	_Lcd_Cmd
  4957                           
  4958                           ;lcd.h: 47: }
  4959  0E14  0008               	return
  4960  0E15                     l1838:	
  4961                           
  4962                           ;lcd.h: 48: else if(a == 2)
  4963  0E15  3002               	movlw	2
  4964  0E16  1283               	bcf	3,5	;RP0=0, select bank0
  4965  0E17  1303               	bcf	3,6	;RP1=0, select bank0
  4966  0E18  0627               	xorwf	Lcd_Set_Cursor@a,w
  4967  0E19  1D03               	btfss	3,2
  4968  0E1A  0008               	return
  4969                           
  4970                           ;lcd.h: 49: {
  4971                           ;lcd.h: 50: temp = 0xC0 + b - 1;
  4972  0E1B  0824               	movf	Lcd_Set_Cursor@b,w
  4973  0E1C  3EBF               	addlw	191
  4974  0E1D  00A5               	movwf	??_Lcd_Set_Cursor
  4975  0E1E  0825               	movf	??_Lcd_Set_Cursor,w
  4976  0E1F  00AA               	movwf	Lcd_Set_Cursor@temp
  4977                           
  4978                           ;lcd.h: 51: z = temp>>4;
  4979  0E20  082A               	movf	Lcd_Set_Cursor@temp,w
  4980  0E21  00A5               	movwf	??_Lcd_Set_Cursor
  4981  0E22  3004               	movlw	4
  4982  0E23                     u1535:	
  4983  0E23  1003               	clrc
  4984  0E24  0CA5               	rrf	??_Lcd_Set_Cursor,f
  4985  0E25  3EFF               	addlw	-1
  4986  0E26  1D03               	skipz
  4987  0E27  2E23               	goto	u1535
  4988  0E28  0825               	movf	??_Lcd_Set_Cursor,w
  4989  0E29  00A6               	movwf	??_Lcd_Set_Cursor+1
  4990  0E2A  0826               	movf	??_Lcd_Set_Cursor+1,w
  4991  0E2B  00A8               	movwf	Lcd_Set_Cursor@z
  4992                           
  4993                           ;lcd.h: 52: y = temp & 0x0F;
  4994  0E2C  082A               	movf	Lcd_Set_Cursor@temp,w
  4995  0E2D  390F               	andlw	15
  4996  0E2E  00A5               	movwf	??_Lcd_Set_Cursor
  4997  0E2F  0825               	movf	??_Lcd_Set_Cursor,w
  4998  0E30  00A9               	movwf	Lcd_Set_Cursor@y
  4999                           
  5000                           ;lcd.h: 53: Lcd_Cmd(z);
  5001  0E31  0828               	movf	Lcd_Set_Cursor@z,w
  5002  0E32  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5003                           
  5004                           ;lcd.h: 54: Lcd_Cmd(y);
  5005  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  5007  0E39  0829               	movf	Lcd_Set_Cursor@y,w
  5008  0E3A  120A  158A  2400   	fcall	_Lcd_Cmd
  5009  0E3D  0008               	return
  5010  0E3E                     __end_of_Lcd_Set_Cursor:	
  5011                           
  5012                           	psect	text26
  5013  0E3E                     __ptext26:	
  5014 ;; *************** function _Lcd_Init *****************
  5015 ;; Defined at:
  5016 ;;		line 58 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0, pclath, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5030 ;;      Params:         0       0       0       0       0
  5031 ;;      Locals:         0       0       0       0       0
  5032 ;;      Temps:          0       2       0       0       0
  5033 ;;      Totals:         0       2       0       0       0
  5034 ;;Total ram usage:        2 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    4
  5037 ;; This function calls:
  5038 ;;		_Lcd_Cmd
  5039 ;;		_Lcd_Port
  5040 ;; This function is called by:
  5041 ;;		_main
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function _Lcd_Init
  5047  0E3E                     _Lcd_Init:	
  5048                           
  5049                           ;lcd.h: 60: Lcd_Port(0x00);
  5050                           
  5051                           ;incstack = 0
  5052                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5053  0E3E  3000               	movlw	0
  5054  0E3F  120A  158A  23D0  120A  158A  	fcall	_Lcd_Port
  5055                           
  5056                           ;lcd.h: 61: _delay((unsigned long)((20)*(20000000/4000.0)));
  5057  0E44  3082               	movlw	130
  5058  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  5059  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  5060  0E47  00A5               	movwf	??_Lcd_Init+1
  5061  0E48  30DD               	movlw	221
  5062  0E49  00A4               	movwf	??_Lcd_Init
  5063  0E4A                     u2347:	
  5064  0E4A  0BA4               	decfsz	??_Lcd_Init,f
  5065  0E4B  2E4A               	goto	u2347
  5066  0E4C  0BA5               	decfsz	??_Lcd_Init+1,f
  5067  0E4D  2E4A               	goto	u2347
  5068                           
  5069                           ;lcd.h: 62: Lcd_Cmd(0x03);
  5070  0E4E  3003               	movlw	3
  5071  0E4F  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5072                           
  5073                           ;lcd.h: 63: _delay((unsigned long)((5)*(20000000/4000.0)));
  5074  0E54  3021               	movlw	33
  5075  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0E57  00A5               	movwf	??_Lcd_Init+1
  5078  0E58  3075               	movlw	117
  5079  0E59  00A4               	movwf	??_Lcd_Init
  5080  0E5A                     u2357:	
  5081  0E5A  0BA4               	decfsz	??_Lcd_Init,f
  5082  0E5B  2E5A               	goto	u2357
  5083  0E5C  0BA5               	decfsz	??_Lcd_Init+1,f
  5084  0E5D  2E5A               	goto	u2357
  5085  0E5E  2E5F               	nop2
  5086                           
  5087                           ;lcd.h: 64: Lcd_Cmd(0x03);
  5088  0E5F  3003               	movlw	3
  5089  0E60  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5090                           
  5091                           ;lcd.h: 65: _delay((unsigned long)((11)*(20000000/4000.0)));
  5092  0E65  3048               	movlw	72
  5093  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  5094  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  5095  0E68  00A5               	movwf	??_Lcd_Init+1
  5096  0E69  306B               	movlw	107
  5097  0E6A  00A4               	movwf	??_Lcd_Init
  5098  0E6B                     u2367:	
  5099  0E6B  0BA4               	decfsz	??_Lcd_Init,f
  5100  0E6C  2E6B               	goto	u2367
  5101  0E6D  0BA5               	decfsz	??_Lcd_Init+1,f
  5102  0E6E  2E6B               	goto	u2367
  5103  0E6F  2E70               	nop2
  5104                           
  5105                           ;lcd.h: 66: Lcd_Cmd(0x03);
  5106  0E70  3003               	movlw	3
  5107  0E71  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5108                           
  5109                           ;lcd.h: 67: Lcd_Cmd(0x02);
  5110  0E76  3002               	movlw	2
  5111  0E77  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5112                           
  5113                           ;lcd.h: 68: Lcd_Cmd(0x02);
  5114  0E7C  3002               	movlw	2
  5115  0E7D  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5116                           
  5117                           ;lcd.h: 69: Lcd_Cmd(0x08);
  5118  0E82  3008               	movlw	8
  5119  0E83  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5120                           
  5121                           ;lcd.h: 70: Lcd_Cmd(0x00);
  5122  0E88  3000               	movlw	0
  5123  0E89  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5124                           
  5125                           ;lcd.h: 71: Lcd_Cmd(0x0C);
  5126  0E8E  300C               	movlw	12
  5127  0E8F  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5128                           
  5129                           ;lcd.h: 72: Lcd_Cmd(0x00);
  5130  0E94  3000               	movlw	0
  5131  0E95  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5132                           
  5133                           ;lcd.h: 73: Lcd_Cmd(0x06);
  5134  0E9A  3006               	movlw	6
  5135  0E9B  120A  158A  2400   	fcall	_Lcd_Cmd
  5136  0E9E  0008               	return
  5137  0E9F                     __end_of_Lcd_Init:	
  5138                           
  5139                           	psect	text27
  5140  0B3F                     __ptext27:	
  5141 ;; *************** function _Lcd_Clear *****************
  5142 ;; Defined at:
  5143 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;		None
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;		None
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  2  102[None  ] int 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2, status,0, pclath, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5157 ;;      Params:         0       0       0       0       0
  5158 ;;      Locals:         0       0       0       0       0
  5159 ;;      Temps:          0       0       0       0       0
  5160 ;;      Totals:         0       0       0       0       0
  5161 ;;Total ram usage:        0 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    4
  5164 ;; This function calls:
  5165 ;;		_Lcd_Cmd
  5166 ;; This function is called by:
  5167 ;;		_main
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _Lcd_Clear
  5173  0B3F                     _Lcd_Clear:	
  5174                           
  5175                           ;lcd.h: 33: Lcd_Cmd(0);
  5176                           
  5177                           ;incstack = 0
  5178                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5179  0B3F  3000               	movlw	0
  5180  0B40  120A  158A  2400  120A  158A  	fcall	_Lcd_Cmd
  5181                           
  5182                           ;lcd.h: 34: Lcd_Cmd(1);
  5183  0B45  3001               	movlw	1
  5184  0B46  120A  158A  2400   	fcall	_Lcd_Cmd
  5185  0B49  0008               	return
  5186  0B4A                     __end_of_Lcd_Clear:	
  5187                           
  5188                           	psect	text28
  5189  0C00                     __ptext28:	
  5190 ;; *************** function _Lcd_Cmd *****************
  5191 ;; Defined at:
  5192 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  a               1    wreg     unsigned char 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  a               1    3[BANK0 ] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, pclath, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5206 ;;      Params:         0       0       0       0       0
  5207 ;;      Locals:         0       1       0       0       0
  5208 ;;      Temps:          0       2       0       0       0
  5209 ;;      Totals:         0       3       0       0       0
  5210 ;;Total ram usage:        3 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    3
  5213 ;; This function calls:
  5214 ;;		_Lcd_Port
  5215 ;; This function is called by:
  5216 ;;		_Lcd_Clear
  5217 ;;		_Lcd_Set_Cursor
  5218 ;;		_Lcd_Init
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _Lcd_Cmd
  5224  0C00                     _Lcd_Cmd:	
  5225                           
  5226                           ;incstack = 0
  5227                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5228                           ;Lcd_Cmd@a stored from wreg
  5229  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0C02  00A3               	movwf	Lcd_Cmd@a
  5232                           
  5233                           ;lcd.h: 24: RD2 = 0;
  5234  0C03  1108               	bcf	8,2	;volatile
  5235                           
  5236                           ;lcd.h: 25: Lcd_Port(a);
  5237  0C04  0823               	movf	Lcd_Cmd@a,w
  5238  0C05  120A  158A  23D0  120A  158A  	fcall	_Lcd_Port
  5239                           
  5240                           ;lcd.h: 26: RD3 = 1;
  5241  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  5242  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  5243  0C0C  1588               	bsf	8,3	;volatile
  5244                           
  5245                           ;lcd.h: 27: _delay((unsigned long)((4)*(20000000/4000.0)));
  5246  0C0D  301A               	movlw	26
  5247  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0C10  00A2               	movwf	??_Lcd_Cmd+1
  5250  0C11  30F7               	movlw	247
  5251  0C12  00A1               	movwf	??_Lcd_Cmd
  5252  0C13                     u2377:	
  5253  0C13  0BA1               	decfsz	??_Lcd_Cmd,f
  5254  0C14  2C13               	goto	u2377
  5255  0C15  0BA2               	decfsz	??_Lcd_Cmd+1,f
  5256  0C16  2C13               	goto	u2377
  5257  0C17  2C18               	nop2
  5258                           
  5259                           ;lcd.h: 28: RD3 = 0;
  5260  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  5261  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  5262  0C1A  1188               	bcf	8,3	;volatile
  5263  0C1B  0008               	return
  5264  0C1C                     __end_of_Lcd_Cmd:	
  5265                           
  5266                           	psect	text29
  5267  0BD0                     __ptext29:	
  5268 ;; *************** function _Lcd_Port *****************
  5269 ;; Defined at:
  5270 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  a               1    wreg     unsigned char 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  a               1    0[BANK0 ] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      void 
  5277 ;; Registers used:
  5278 ;;		wreg
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5284 ;;      Params:         0       0       0       0       0
  5285 ;;      Locals:         0       1       0       0       0
  5286 ;;      Temps:          0       0       0       0       0
  5287 ;;      Totals:         0       1       0       0       0
  5288 ;;Total ram usage:        1 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    2
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_Lcd_Cmd
  5295 ;;		_Lcd_Init
  5296 ;;		_Lcd_Write_Char
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _Lcd_Port
  5302  0BD0                     _Lcd_Port:	
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _Lcd_Port: [wreg]
  5306                           ;Lcd_Port@a stored from wreg
  5307  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  5308  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  5309  0BD2  00A0               	movwf	Lcd_Port@a
  5310                           
  5311                           ;lcd.h: 2: if(a & 1)
  5312  0BD3  1C20               	btfss	Lcd_Port@a,0
  5313  0BD4  2BD7               	goto	l89
  5314                           
  5315                           ;lcd.h: 3: RD4 = 1;
  5316  0BD5  1608               	bsf	8,4	;volatile
  5317  0BD6  2BD8               	goto	l90
  5318  0BD7                     l89:	
  5319                           
  5320                           ;lcd.h: 4: else
  5321                           ;lcd.h: 5: RD4 = 0;
  5322  0BD7  1208               	bcf	8,4	;volatile
  5323  0BD8                     l90:	
  5324                           
  5325                           ;lcd.h: 7: if(a & 2)
  5326  0BD8  1CA0               	btfss	Lcd_Port@a,1
  5327  0BD9  2BDC               	goto	l91
  5328                           
  5329                           ;lcd.h: 8: RD5 = 1;
  5330  0BDA  1688               	bsf	8,5	;volatile
  5331  0BDB  2BDD               	goto	l92
  5332  0BDC                     l91:	
  5333                           
  5334                           ;lcd.h: 9: else
  5335                           ;lcd.h: 10: RD5 = 0;
  5336  0BDC  1288               	bcf	8,5	;volatile
  5337  0BDD                     l92:	
  5338                           
  5339                           ;lcd.h: 12: if(a & 4)
  5340  0BDD  1D20               	btfss	Lcd_Port@a,2
  5341  0BDE  2BE1               	goto	l93
  5342                           
  5343                           ;lcd.h: 13: RD6 = 1;
  5344  0BDF  1708               	bsf	8,6	;volatile
  5345  0BE0  2BE2               	goto	l94
  5346  0BE1                     l93:	
  5347                           
  5348                           ;lcd.h: 14: else
  5349                           ;lcd.h: 15: RD6 = 0;
  5350  0BE1  1308               	bcf	8,6	;volatile
  5351  0BE2                     l94:	
  5352                           
  5353                           ;lcd.h: 17: if(a & 8)
  5354  0BE2  1DA0               	btfss	Lcd_Port@a,3
  5355  0BE3  2BE6               	goto	l95
  5356                           
  5357                           ;lcd.h: 18: RD7 = 1;
  5358  0BE4  1788               	bsf	8,7	;volatile
  5359  0BE5  0008               	return
  5360  0BE6                     l95:	
  5361                           
  5362                           ;lcd.h: 19: else
  5363                           ;lcd.h: 20: RD7 = 0;
  5364  0BE6  1388               	bcf	8,7	;volatile
  5365  0BE7  0008               	return
  5366  0BE8                     __end_of_Lcd_Port:	
  5367                           
  5368                           	psect	text30
  5369  0D23                     __ptext30:	
  5370 ;; *************** function _T1 *****************
  5371 ;; Defined at:
  5372 ;;		line 279 in file "stroke main.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0, pclath, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5386 ;;      Params:         0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0
  5388 ;;      Temps:          6       0       0       0       0
  5389 ;;      Totals:         6       0       0       0       0
  5390 ;;Total ram usage:        6 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    1
  5393 ;; This function calls:
  5394 ;;		i1___wmul
  5395 ;; This function is called by:
  5396 ;;		Interrupt level 1
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           
  5401                           ;psect for function _T1
  5402  0D23                     _T1:	
  5403                           
  5404                           ;stroke main.c: 280: if(TMR1IF){
  5405  0D23  1C0C               	btfss	12,0	;volatile
  5406  0D24  2D56               	goto	i1l257
  5407                           
  5408                           ;stroke main.c: 281: TMR1IF = 0;
  5409  0D25  100C               	bcf	12,0	;volatile
  5410                           
  5411                           ;stroke main.c: 282: count++;
  5412  0D26  3001               	movlw	1
  5413  0D27  1683               	bsf	3,5	;RP0=1, select bank1
  5414  0D28  1303               	bcf	3,6	;RP1=0, select bank1
  5415  0D29  07AE               	addwf	_count^(0+128),f
  5416  0D2A  1803               	skipnc
  5417  0D2B  0AAF               	incf	(_count+1)^(0+128),f
  5418  0D2C  3000               	movlw	0
  5419  0D2D  07AF               	addwf	(_count+1)^(0+128),f
  5420                           
  5421                           ;stroke main.c: 283: if(count == 95)
  5422  0D2E  305F               	movlw	95
  5423  0D2F  062E               	xorwf	_count^(0+128),w
  5424  0D30  042F               	iorwf	(_count+1)^(0+128),w
  5425  0D31  1D03               	btfss	3,2
  5426  0D32  2D56               	goto	i1l257
  5427                           
  5428                           ;stroke main.c: 284: {
  5429                           ;stroke main.c: 285: cbeat = TMR0;
  5430  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  5431  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  5432  0D35  0801               	movf	1,w	;volatile
  5433  0D36  00F6               	movwf	??_T1
  5434  0D37  01F7               	clrf	??_T1+1
  5435  0D38  0876               	movf	??_T1,w
  5436  0D39  00ED               	movwf	_cbeat
  5437  0D3A  0877               	movf	??_T1+1,w
  5438  0D3B  00EE               	movwf	_cbeat+1
  5439                           
  5440                           ;stroke main.c: 286: cbeat = cbeat * 6;
  5441  0D3C  086E               	movf	_cbeat+1,w
  5442  0D3D  00F1               	movwf	i1___wmul@multiplier+1
  5443  0D3E  086D               	movf	_cbeat,w
  5444  0D3F  00F0               	movwf	i1___wmul@multiplier
  5445  0D40  3006               	movlw	6
  5446  0D41  00F2               	movwf	i1___wmul@multiplicand
  5447  0D42  3000               	movlw	0
  5448  0D43  00F3               	movwf	i1___wmul@multiplicand+1
  5449  0D44  120A  118A  27DF  120A  158A  	fcall	i1___wmul
  5450  0D49  0871               	movf	?i1___wmul+1,w
  5451  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  5452  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  5453  0D4C  00EE               	movwf	_cbeat+1
  5454  0D4D  0870               	movf	?i1___wmul,w
  5455  0D4E  00ED               	movwf	_cbeat
  5456                           
  5457                           ;stroke main.c: 287: count = 0;
  5458  0D4F  1683               	bsf	3,5	;RP0=1, select bank1
  5459  0D50  1303               	bcf	3,6	;RP1=0, select bank1
  5460  0D51  01AE               	clrf	_count^(0+128)
  5461  0D52  01AF               	clrf	(_count+1)^(0+128)
  5462                           
  5463                           ;stroke main.c: 288: TMR0 = 0;
  5464  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  5465  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  5466  0D55  0181               	clrf	1	;volatile
  5467  0D56                     i1l257:	
  5468  0D56  087B               	movf	??_T1+5,w
  5469  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  5470  0D58  00FF               	movwf	127
  5471  0D59  087A               	movf	??_T1+4,w
  5472  0D5A  008A               	movwf	10
  5473  0D5B  0879               	movf	??_T1+3,w
  5474  0D5C  0084               	movwf	4
  5475  0D5D  0E78               	swapf	(??_T1+2)^(0+-128),w
  5476  0D5E  0083               	movwf	3
  5477  0D5F  0EFE               	swapf	126,f
  5478  0D60  0E7E               	swapf	126,w
  5479  0D61  0009               	retfie
  5480  0D62                     __end_of_T1:	
  5481                           
  5482                           	psect	intentry
  5483  0004                     __pintentry:	
  5484                           ;incstack = 0
  5485                           ; Regs used in _T1: [wreg+status,2+status,0+pclath+cstack]
  5486                           
  5487  0004                     interrupt_function:	
  5488  007E                     saved_w	set	btemp
  5489  0004  00FE               	movwf	btemp
  5490  0005  0E03               	swapf	3,w
  5491  0006  00F8               	movwf	??_T1+2
  5492  0007  0804               	movf	4,w
  5493  0008  00F9               	movwf	??_T1+3
  5494  0009  080A               	movf	10,w
  5495  000A  00FA               	movwf	??_T1+4
  5496  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5497  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5498  000D  087F               	movf	btemp+1,w
  5499  000E  00FB               	movwf	??_T1+5
  5500  000F  120A  158A  2D23   	ljmp	_T1
  5501                           
  5502                           	psect	text31
  5503  07DF                     __ptext31:	
  5504 ;; *************** function i1___wmul *****************
  5505 ;; Defined at:
  5506 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  multiplier      2    0[COMMON] unsigned int 
  5509 ;;  multiplicand    2    2[COMMON] unsigned int 
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;  __wmul          2    4[COMMON] unsigned int 
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  2    0[COMMON] unsigned int 
  5514 ;; Registers used:
  5515 ;;		wreg, status,2, status,0
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5521 ;;      Params:         4       0       0       0       0
  5522 ;;      Locals:         2       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0
  5524 ;;      Totals:         6       0       0       0       0
  5525 ;;Total ram usage:        6 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_T1
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           
  5535                           ;psect for function i1___wmul
  5536  07DF                     i1___wmul:	
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  5540  07DF  01F4               	clrf	i1___wmul@product
  5541  07E0  01F5               	clrf	i1___wmul@product+1
  5542  07E1                     i1l2138:	
  5543  07E1  1C70               	btfss	i1___wmul@multiplier,0
  5544  07E2  2FE9               	goto	i1l372
  5545  07E3  0872               	movf	i1___wmul@multiplicand,w
  5546  07E4  07F4               	addwf	i1___wmul@product,f
  5547  07E5  1803               	skipnc
  5548  07E6  0AF5               	incf	i1___wmul@product+1,f
  5549  07E7  0873               	movf	i1___wmul@multiplicand+1,w
  5550  07E8  07F5               	addwf	i1___wmul@product+1,f
  5551  07E9                     i1l372:	
  5552  07E9  3001               	movlw	1
  5553  07EA                     u201_25:	
  5554  07EA  1003               	clrc
  5555  07EB  0DF2               	rlf	i1___wmul@multiplicand,f
  5556  07EC  0DF3               	rlf	i1___wmul@multiplicand+1,f
  5557  07ED  3EFF               	addlw	-1
  5558  07EE  1D03               	skipz
  5559  07EF  2FEA               	goto	u201_25
  5560  07F0  3001               	movlw	1
  5561  07F1                     u202_25:	
  5562  07F1  1003               	clrc
  5563  07F2  0CF1               	rrf	i1___wmul@multiplier+1,f
  5564  07F3  0CF0               	rrf	i1___wmul@multiplier,f
  5565  07F4  3EFF               	addlw	-1
  5566  07F5  1D03               	skipz
  5567  07F6  2FF1               	goto	u202_25
  5568  07F7  0870               	movf	i1___wmul@multiplier,w
  5569  07F8  0471               	iorwf	i1___wmul@multiplier+1,w
  5570  07F9  1D03               	btfss	3,2
  5571  07FA  2FE1               	goto	i1l2138
  5572  07FB  0875               	movf	i1___wmul@product+1,w
  5573  07FC  00F1               	movwf	?i1___wmul+1
  5574  07FD  0874               	movf	i1___wmul@product,w
  5575  07FE  00F0               	movwf	?i1___wmul
  5576  07FF  0008               	return
  5577  0800                     __end_ofi1___wmul:	
  5578  007E                     btemp	set	126	;btemp
  5579  007E                     wtemp0	set	126


Data Sizes:
    Strings     288
    Constant    22
    Data        12
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     75      79
    BANK1            80      0      28
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_23(CODE[4]), STR_20(CODE[4]), STR_17(CODE[4]), STR_15(CODE[4]), 
		 -> STR_13(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@p(BANK0[10]), main@h(BANK0[10]), main@t(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_response@strings	PTR const unsigned char [6] size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 
		 -> STR_2(CODE[4]), STR_1(CODE[6]), 

    uart_response@F1323	PTR const unsigned char [6] size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[6]), 
		 -> STR_2(CODE[4]), STR_1(CODE[6]), 

    uart_txs@st	PTR unsigned char  size(2) Largest target is 11
		 -> STR_31(CODE[11]), STR_29(CODE[10]), main@p(BANK0[10]), main@h(BANK0[10]), 
		 -> main@t(BANK0[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_30(CODE[17]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_22(CODE[6]), STR_21(CODE[5]), main@p(BANK0[10]), STR_19(CODE[6]), 
		 -> STR_18(CODE[5]), STR_16(CODE[5]), main@h(BANK0[10]), STR_14(CODE[5]), 
		 -> main@t(BANK0[10]), STR_12(CODE[5]), STR_11(CODE[7]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _T1 in COMMON

    _T1->i1___wmul

Critical Paths under _main in BANK0

    _main->___fttol
    _value5->_uart_response
    _value4->_uart_response
    _value3->_uart_response
    _value2->_uart_response
    _value1->_uart_response
    _uart_txs->_uart_txc
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ready->_uart_response
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _T1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _T1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _T1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _T1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0   12187
                                             42 BANK0     33    33      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                           ___lwtoft
                           _adc_init
                           _adc_read
                             _buzzer
                              _ready
                            _sprintf
                        _timer1_init
                          _uart_init
                           _uart_txc
                           _uart_txs
                             _value1
                             _value2
                             _value3
                             _value4
                             _value5
 ---------------------------------------------------------------------------------
 (1) _value5                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _value4                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _value3                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _value2                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _value1                                               0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (1) _uart_txs                                             2     0      2     332
                                              1 BANK0      2     0      2
                           _uart_txc
 ---------------------------------------------------------------------------------
 (2) _uart_txc                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    18      4    1457
                                             14 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _ready                                                0     0      0     389
                      _uart_response
 ---------------------------------------------------------------------------------
 (2) _uart_response                                       26    26      0     389
                                              0 BANK0     26    26      0
                            _uart_rx
 ---------------------------------------------------------------------------------
 (3) _uart_rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buzzer                                               3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      44
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1704
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             28 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2061
                                             12 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1593
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1705
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _T1                                                   6     6      0     144
                                              6 COMMON     6     6      0
                           i1___wmul
 ---------------------------------------------------------------------------------
 (5) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _adc_init
   _adc_read
   _buzzer
   _ready
     _uart_response
       _uart_rx
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _timer1_init
   _uart_init
   _uart_txc
   _uart_txs
     _uart_txc
   _value1
     _uart_response
       _uart_rx
   _value2
     _uart_response
       _uart_rx
   _value3
     _uart_response
       _uart_rx
   _value4
     _uart_response
       _uart_rx
   _value5
     _uart_response
       _uart_rx

 _T1 (ROOT)
   i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1C       7       35.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4B      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      79      12        0.0%
ABS                  0      0      79       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Mar 31 10:38:20 2018

                             pc 0002                     __CFG_CP$OFF 0000                              l90 0BD8  
                            l91 0BDC                              l92 0BDD                              l93 0BE1  
                            _T1 0D23                              l94 0BE2                              l95 0BE6  
                            l89 0BD7                              fsr 0004                i1___wmul@product 0074  
                           ?_T1 0070                             l222 00D5                             l207 0C69  
                           l143 0B59                             l146 0B5D                             l159 0B3B  
                           l274 0697                             l540 04D2                             l276 0677  
                           l541 04DA                             l533 04BD                             l624 0F13  
                           _RB0 0030                             _RD2 0042                             _RD3 0043  
                           _RB7 0037                             _RD4 0044                             _RD5 0045  
                           _RD6 0046                             _RD7 0047                    __CFG_CPD$OFF 0000  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
__end_ofuart_response@responses 0522                            ??_T1 0076                    __CFG_LVP$OFF 0000  
               ??_uart_response 0020                            l2002 06B1                            l2012 06C3  
                          l2006 06BD                            l2032 06FB                            l2024 06F7  
                          l2122 0F08                            l2114 0EEB                            l2018 06E8  
                          l2034 064F                            l2052 0F5B                            l2124 0F16  
                          l2116 0EFB                            l2036 0742                            l2212 01D9  
                          l2046 0F45                            l2080 0FD2                            l2064 0F9A  
                          l2128 0F24                            l2304 03DA                            l2314 040F  
                          l2250 02E1                            l2218 0217                            l2076 0FC2  
                          l2068 0FAA                            l2324 0444                            l2236 0282  
                          l2172 009F                            l2262 0317                            l2182 00D0  
                          l2096 0EB9                            l1800 0D1E                            l2192 0144  
                          l2290 0399                            l1740 0776                            l1812 0C7C  
                          l1900 0B78                            l2276 0358                            l1750 048F  
                          l1742 07DD                            l1734 07D3                            l1814 0C8A  
                          l1822 0CA3                            l2198 0180                            l1736 07D8  
                          l1754 0496                            l1818 0C98                            l1764 04C2  
                          l1756 04A2                            l1932 0B54                            l1908 0B84  
                          l1916 0B90                            l1924 0B9C                            l1838 0E15  
                          l1766 04CC                            l1758 04A7                            l1790 0CFD  
                          l1864 0D66                            l1944 0C4B                            l1796 0D13  
                          l1788 0CEF                            l1892 0B6C                            l1990 0679  
                          l1886 0C1C                            l1986 0675                            STR_1 0616  
                          STR_2 0644                            STR_3 061C                            STR_4 0637  
                          STR_5 0632                            STR_6 0622                            STR_7 054A  
                          STR_8 05B0                            STR_9 05C1                            _BRGH 04C2  
                          _CREN 00C4                            u1315 04C5                            u1165 0CB9  
                          u1405 0CFE                            u1190 0767                            u1415 0D0A  
                          u2207 02ED                            u1425 0D14                            u2217 033B  
                          u2065 0188                            u1515 0DFA                            u1355 04E1  
                          u1275 049B                            u2307 0DE4                            u2227 037C  
                          u2317 0C62                            u2237 03BD                            u1535 0E23  
                          u2327 0CCB                            u1295 04B6                            u1455 0C7F  
                          u2247 03FE                            u2337 0CDE                            u1385 0CF2  
                          u2257 0433                            u2347 0E4A                            u1475 0C90  
                          u1715 06DE                            u2267 047D                            u2357 0E5A  
                          u2277 0DAE                            u1485 0C99                            u2197 0094  
                          u2367 0E6B                            u1655 0C52                            u2287 0DC0  
                          u2377 0C13                            u1825 0FAB                            u2297 0DD2  
                          u1835 0FB3                            u1915 0EC0                            u1785 0F67  
                          u1945 0EEC                            u1875 0FD3                            u1795 0F79  
                          u1885 0FDB                            u1975 0F0A                            _RCIF 0065  
                          _OERR 00C1                            _TMR0 0001                            _SPEN 00C7  
                          _TRMT 04C1                            _TXEN 04C5                            _TXIF 0064  
                          _SYNC 04C4                    __CFG_WRT$OFF 0000               ?_Lcd_Write_String 0025  
                          _main 0033                    ___ftpack@arg 0020                    ___ftpack@exp 0023  
                          _temp 006B                            btemp 007E                            start 0012  
            ??_Lcd_Write_String 0027                 __end_of_Lcd_Cmd 0C1C                    ___ftmul@cntr 003A  
                  ___ftmul@sign 003B                    ___fttol@exp1 0049                    ___fttol@lval 0045  
                         ?_main 0070                           STR_10 0539                           STR_11 0609  
                         STR_20 063C                           STR_12 062D                           STR_21 0534  
                         STR_13 0640                           STR_22 0610                           STR_14 0628  
                         STR_30 058E                           STR_23 063C                           STR_15 063C  
                         STR_31 05F4                           STR_16 0628                           STR_24 056C  
                         STR_32 055B                           STR_17 063C                           STR_25 05D2  
                         STR_33 0528                   __CFG_WDTE$OFF 0000                           STR_18 0534  
                         STR_26 057D                           STR_19 0610                           STR_27 05E3  
                         STR_28 059F                           STR_29 05FF                 __end_of___ftmul 1000  
               __end_of___fttol 0F2D                 __end_of___lwdiv 0D23                           i1l257 0D56  
               __end_of___lwmod 0CA8                           i1l372 07E9                           _RCREG 001A  
                         _TMR1H 000F                           _TMR1L 000E                           _SPBRG 0099  
       __size_of_Lcd_Set_Cursor 0052                           _TRISA 0085                           _TRISD 0088  
                         _TXREG 0019                           _cbeat 006D                 __end_of_dpowers 051C  
                         _count 00AE                           _pbeat 007C                           _ready 0B4A  
                 ___ftpack@sign 0024                           _press 00AC                           main@h 0061  
                         main@p 0057                           main@t 004D                  __CFG_BOREN$OFF 0000  
                         pclath 000A                __end_ofi1___wmul 0800                 __end_of_uart_rx 0B3F  
                         status 0003             i1___wmul@multiplier 0070                           wtemp0 007E  
               __end_of_sprintf 0747                __end_of_Lcd_Init 0E9F                __end_of_Lcd_Port 0BE8  
               __initialization 0015                    __end_of_main 0485              uart_response@F1320 00A0  
            uart_response@F1323 00B0                          ??_main 004A                   ___fttol@sign1 0044  
            __size_of_Lcd_Clear 000B                          _ADCON0 001F                          _ADCON1 009F  
                        ?_ready 0070                          _ADRESH 001E                          _ADRESL 009E  
              __end_of___ftpack 04F3                __end_of_adc_init 0B35                __end_of_adc_read 0C74  
                        i1l2138 07E1                          u201_25 07EA                          u202_25 07F1  
                        _INTCON 000B                __end_of___lwtoft 0C00                       ??_Lcd_Cmd 0021  
                        _TMR1IF 0060         __size_of_Lcd_Write_Char 003D                          _TRISB0 0430  
                        _TRISB6 0436                          _TRISB7 0437                          _TRISC6 043E  
                        _TRISC7 043F                  __CFG_PWRTE$OFF 0000                       ??___ftmul 0032  
                     ??___fttol 0040                    ?_timer1_init 0070                       ??___lwdiv 0024  
                     ??___lwmod 002C                          _buzzer 0DA3                          _value1 0B62  
                        _value2 0B6E                          _value3 0B7A                          _value4 0B86  
                        _value5 0B92                          _upload 00A6           ___ftmul@f3_as_product 0037  
                        saved_w 007E                __end_of_uart_txc 0B62                __end_of_uart_txs 0C41  
                     ??_uart_rx 0020                       ??_sprintf 0032                 Lcd_Set_Cursor@a 0027  
               Lcd_Set_Cursor@b 0024                 Lcd_Set_Cursor@y 0029                 Lcd_Set_Cursor@z 0028  
       __end_of__initialization 002F               __end_of_Lcd_Clear 0B4A                      ___ftmul@f1 002C  
                    ___ftmul@f2 002F                      ___fttol@f1 003C                  __pcstackCOMMON 0070  
                  __pidataBANK1 04F3                   __end_of_ready 0B56                      __end_of_T1 0D62  
                    ___lwtoft@c 0028                       ?i1___wmul 0070                  _Lcd_Set_Cursor 0DEC  
                     ?_Lcd_Init 0070                       ?_Lcd_Port 0070                         ??_ready 003A  
                    __pbssBANK0 006B                      __pbssBANK1 00A0                      __pmaintext 0033  
           uart_response@so_far 0030                      __pintentry 0004           uart_response@received 0036  
                       ?_buzzer 0070       __size_of_Lcd_Write_String 0041                       ?___ftpack 0020  
        __end_of_Lcd_Set_Cursor 0E3E                         ?_value1 0070                         ?_value2 0070  
                       ?_value3 0070                         ?_value4 0070                         ?_value5 0070  
                     ?_adc_init 0070                       ?_adc_read 0020                      ??i1___wmul 0074  
                     ?___lwtoft 0028           uart_response@response 0037              __size_of_uart_init 0012  
                    ??_Lcd_Init 0024                      ??_Lcd_Port 0020                      __stringtab 0500  
         __end_of_uart_response 07DF                  _Lcd_Write_Char 0CA8                         _Lcd_Cmd 0C00  
                     ?_uart_txc 0070                       ?_uart_txs 0021                         ___ftmul 0F2D  
                       ___fttol 0E9F                         ___lwdiv 0CE5                         ___lwmod 0C74  
                    ??___ftpack 0025                 __size_of_buzzer 0049                 ?_Lcd_Set_Cursor 0024  
                    ??_adc_init 0020                      ??_adc_read 0022            __size_of_timer1_init 000F  
               __size_of_value1 000C                 __size_of_value2 000C                 __size_of_value3 000C  
               __size_of_value4 000C                 __size_of_value5 000C                         __ptext1 0B92  
                       __ptext2 0B86                         __ptext3 0B7A                         __ptext4 0B6E  
                       __ptext5 0B62                         __ptext6 0C1C                         __ptext7 0B56  
                       __ptext8 0BBE                         __ptext9 0B9E                      ??___lwtoft 002B  
                     _T1CONbits 0010                   _p_press_count 00A8                         _dpowers 0512  
                       _uart_rx 0B35                         _sprintf 0648                         clrloop0 0B25  
        __end_of_Lcd_Write_Char 0CE5            end_of_initialization 002F               __end_of_uart_init 0BD0  
                    ??_uart_txc 0020                      ??_uart_txs 0023                       Lcd_Port@a 0020  
                  __pstringtext 0500      uart_response@continue_loop 0038           i1___wmul@multiplicand 0072  
  __end_ofuart_response@lengths 0528                 ?_Lcd_Write_Char 0070               Lcd_Write_String@a 0025  
             Lcd_Write_String@i 002A                     ___ftmul@exp 0036                       _Lcd_Clear 0B3F  
                 _c_press_count 00AA                _Lcd_Write_String 0D62                  __end_of_buzzer 0DEC  
                __end_of_value1 0B6E                  __end_of_value2 0B7A                  __end_of_value3 0B86  
                __end_of_value4 0B92                  __end_of_value5 0B9E             start_initialization 0015  
             __size_ofi1___wmul 0021               __size_of_Lcd_Init 0061               __size_of_Lcd_Port 0018  
                    ?_Lcd_Clear 0070                      init_fetch0 0BAD                     __pdataBANK1 00B0  
               Lcd_Write_Char@a 0024                 Lcd_Write_Char@y 0023                        ??_buzzer 0020  
                      ??_value1 003A                        ??_value2 003A                        ??_value3 003A  
                      ??_value4 003A                        ??_value5 003A               __size_of___ftpack 006E  
             __size_of_adc_init 0009               __size_of_adc_read 0033                     __pbssCOMMON 007C  
               adc_read@channel 0024                       ___latbits 0002               __size_of___lwtoft 0018  
                 __pcstackBANK0 0020                        ?_Lcd_Cmd 0070                     sprintf@flag 0037  
                   sprintf@prec 0035                ___lwdiv@dividend 0022                ??_Lcd_Set_Cursor 0025  
          uart_response@lengths 0522                        ?___ftmul 002C                        ?___fttol 003C  
                      ?___lwdiv 0020                        ?___lwmod 0028               __size_of_uart_txc 000C  
             __size_of_uart_txs 0025            uart_response@strings 0024                        ?_uart_rx 0070  
              ___lwdiv@quotient 0025                        ?_sprintf 002E                  __size_of_ready 000C  
                   __size_of_T1 003F          uart_response@responses 051C               interrupt_function 0004  
                     clear_ram0 0B24                        _PIE1bits 008C                        Lcd_Cmd@a 0023  
                      _PIR1bits 000C                        _GO_nDONE 00FA                     ??_Lcd_Clear 0024  
                     _uart_init 0BBE                   ??_timer1_init 0020                      uart_txc@ch 0020  
                    uart_txs@st 0021                     __stringbase 0512          __size_of_uart_response 0098  
                      i1___wmul 07DF                ??_Lcd_Write_Char 0021                        _Lcd_Init 0E3E  
                      _Lcd_Port 0BD0        __end_of_Lcd_Write_String 0DA3                __size_of_Lcd_Cmd 001C  
                    ?_uart_init 0070                __size_of___ftmul 00D3                __size_of___fttol 008E  
              __size_of___lwdiv 003E                __size_of___lwmod 0034                        ___ftpack 0485  
            __end_of__stringtab 0512                        _adc_init 0B2C                        _adc_read 0C41  
                      ___lwtoft 0BE8             __end_of_timer1_init 0BAD                      sprintf@val 0038  
               ___lwdiv@divisor 0020                 ___lwdiv@counter 0027                        __ptext10 0648  
                      __ptext11 0C74                        __ptext20 0E9F                        __ptext12 0CE5  
                      __ptext21 0F2D                        __ptext13 0B4A                        __ptext30 0D23  
                      __ptext22 0485                        __ptext14 0747                        __ptext31 07DF  
                      __ptext23 0D62                        __ptext15 0B35                        __ptext24 0CA8  
                      __ptext16 0DA3                        __ptext25 0DEC                        __ptext17 0C41  
                      __ptext26 0E3E                        __ptext18 0B2C                        __ptext27 0B3F  
                      __ptext19 0BE8                        __ptext28 0C00                        __ptext29 0BD0  
              __size_of_uart_rx 000A                __size_of_sprintf 00FF                   _uart_response 0747  
                 __size_of_main 0452                        _uart_txc 0B56                        _uart_txs 0C1C  
                      init_ram0 0BB1              Lcd_Write_Char@temp 0022                        intlevel1 0000  
                     sprintf@ap 0036                       sprintf@sp 003A                  ?_uart_response 0070  
              ___lwmod@dividend 002A                       stringcode 050A                     ??_uart_init 0020  
                   _timer1_init 0B9E              Lcd_Set_Cursor@temp 002A                  uart_response@i 0039  
                    _OPTION_REG 0081                        sprintf@c 003B                        sprintf@f 002E  
               ___lwmod@divisor 0028                 ___lwmod@counter 002D                        stringtab 0500  
