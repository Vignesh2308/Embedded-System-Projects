

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Mar 24 15:29:49 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.42
    39                           ; Generated 13/04/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F877A Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0088                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132                           
   133                           	psect	strings
   134  0600                     __pstrings:	
   135  0600                     stringtab:	
   136  0600                     __stringtab:	
   137                           
   138                           ;	String table - string pointers are 1 byte each
   139  0600  1BFF               	btfsc	btemp+1,7
   140  0601  2E0A               	ljmp	stringcode
   141  0602  1383               	bcf	3,7
   142  0603  187F               	btfsc	btemp+1,0
   143  0604  1783               	bsf	3,7
   144  0605  0800               	movf	0,w
   145  0606  0A84               	incf	4,f
   146  0607  1903               	skipnz
   147  0608  0AFF               	incf	btemp+1,f
   148  0609  0008               	return
   149  060A                     stringcode:	
   150  060A                     stringdir:	
   151  060A  3006               	movlw	high stringdir
   152  060B  008A               	movwf	10
   153  060C  0804               	movf	4,w
   154  060D  0A84               	incf	4,f
   155  060E  0782               	addwf	2,f
   156  060F                     __stringbase:	
   157  060F  3400               	retlw	0
   158  0610                     __end_of__stringtab:	
   159  0610                     _dpowers:	
   160  0610  3401               	retlw	1
   161  0611  3400               	retlw	0
   162  0612  340A               	retlw	10
   163  0613  3400               	retlw	0
   164  0614  3464               	retlw	100
   165  0615  3400               	retlw	0
   166  0616  34E8               	retlw	232
   167  0617  3403               	retlw	3
   168  0618  3410               	retlw	16
   169  0619  3427               	retlw	39
   170  061A                     __end_of_dpowers:	
   171  000B                     _INTCON	set	11
   172  0001                     _TMR0	set	1
   173  0010                     _T1CONbits	set	16
   174  000C                     _PIR1bits	set	12
   175  000E                     _TMR1L	set	14
   176  000F                     _TMR1H	set	15
   177  001E                     _ADRESH	set	30
   178  001F                     _ADCON0	set	31
   179  001A                     _RCREG	set	26
   180  0019                     _TXREG	set	25
   181  0060                     _TMR1IF	set	96
   182  00FA                     _GO_nDONE	set	250
   183  0065                     _RCIF	set	101
   184  00C1                     _OERR	set	193
   185  0064                     _TXIF	set	100
   186  00C4                     _CREN	set	196
   187  00C7                     _SPEN	set	199
   188  0046                     _RD6	set	70
   189  0047                     _RD7	set	71
   190  0042                     _RD2	set	66
   191  0043                     _RD3	set	67
   192  0044                     _RD4	set	68
   193  0045                     _RD5	set	69
   194  0081                     _OPTION_REG	set	129
   195  0085                     _TRISA	set	133
   196  0088                     _TRISD	set	136
   197  008C                     _PIE1bits	set	140
   198  009E                     _ADRESL	set	158
   199  009F                     _ADCON1	set	159
   200  0099                     _SPBRG	set	153
   201  04C1                     _TRMT	set	1217
   202  04C5                     _TXEN	set	1221
   203  04C4                     _SYNC	set	1220
   204  04C2                     _BRGH	set	1218
   205  043F                     _TRISC7	set	1087
   206  043E                     _TRISC6	set	1086
   207  061A                     STR_2:	
   208  061A  3420               	retlw	32	;' '
   209  061B  3420               	retlw	32	;' '
   210  061C  3420               	retlw	32	;' '
   211  061D  3455               	retlw	85	;'U'
   212  061E  3453               	retlw	83	;'S'
   213  061F  3449               	retlw	73	;'I'
   214  0620  344E               	retlw	78	;'N'
   215  0621  3447               	retlw	71	;'G'
   216  0622  3420               	retlw	32	;' '
   217  0623  3449               	retlw	73	;'I'
   218  0624  344F               	retlw	79	;'O'
   219  0625  3454               	retlw	84	;'T'
   220  0626  3420               	retlw	32	;' '
   221  0627  3420               	retlw	32	;' '
   222  0628  3420               	retlw	32	;' '
   223  0629  3420               	retlw	32	;' '
   224  062A  3400               	retlw	0
   225  062B                     STR_1:	
   226  062B  3420               	retlw	32	;' '
   227  062C  3448               	retlw	72	;'H'
   228  062D  3445               	retlw	69	;'E'
   229  062E  3441               	retlw	65	;'A'
   230  062F  344C               	retlw	76	;'L'
   231  0630  3454               	retlw	84	;'T'
   232  0631  3448               	retlw	72	;'H'
   233  0632  3420               	retlw	32	;' '
   234  0633  344D               	retlw	77	;'M'
   235  0634  344F               	retlw	79	;'O'
   236  0635  344E               	retlw	78	;'N'
   237  0636  3449               	retlw	73	;'I'
   238  0637  3454               	retlw	84	;'T'
   239  0638  344F               	retlw	79	;'O'
   240  0639  3452               	retlw	82	;'R'
   241  063A  3420               	retlw	32	;' '
   242  063B  3400               	retlw	0
   243  063C                     STR_20:	
   244  063C  3448               	retlw	72	;'H'
   245  063D  3449               	retlw	73	;'I'
   246  063E  3447               	retlw	71	;'G'
   247  063F  3448               	retlw	72	;'H'
   248  0640  3420               	retlw	32	;' '
   249  0641  3450               	retlw	80	;'P'
   250  0642  3452               	retlw	82	;'R'
   251  0643  3445               	retlw	69	;'E'
   252  0644  3453               	retlw	83	;'S'
   253  0645  3453               	retlw	83	;'S'
   254  0646  3420               	retlw	32	;' '
   255  0647  3400               	retlw	0
   256  0648                     STR_16:	
   257  0648  3448               	retlw	72	;'H'
   258  0649  3449               	retlw	73	;'I'
   259  064A  3447               	retlw	71	;'G'
   260  064B  3448               	retlw	72	;'H'
   261  064C  3420               	retlw	32	;' '
   262  064D  3454               	retlw	84	;'T'
   263  064E  3445               	retlw	69	;'E'
   264  064F  344D               	retlw	77	;'M'
   265  0650  3450               	retlw	80	;'P'
   266  0651  3420               	retlw	32	;' '
   267  0652  3400               	retlw	0
   268  0653                     STR_18:	
   269  0653  3448               	retlw	72	;'H'
   270  0654  3449               	retlw	73	;'I'
   271  0655  3447               	retlw	71	;'G'
   272  0656  3448               	retlw	72	;'H'
   273  0657  3420               	retlw	32	;' '
   274  0658  3442               	retlw	66	;'B'
   275  0659  3445               	retlw	69	;'E'
   276  065A  3441               	retlw	65	;'A'
   277  065B  3454               	retlw	84	;'T'
   278  065C  3420               	retlw	32	;' '
   279  065D  3400               	retlw	0
   280  065E                     STR_3:	
   281  065E  3454               	retlw	84	;'T'
   282  065F  3445               	retlw	69	;'E'
   283  0660  344D               	retlw	77	;'M'
   284  0661  3450               	retlw	80	;'P'
   285  0662  3420               	retlw	32	;' '
   286  0663  3448               	retlw	72	;'H'
   287  0664  3449               	retlw	73	;'I'
   288  0665  3447               	retlw	71	;'G'
   289  0666  3448               	retlw	72	;'H'
   290  0667  3400               	retlw	0
   291  0668                     STR_6:	
   292  0668  3420               	retlw	32	;' '
   293  0669  3420               	retlw	32	;' '
   294  066A  3420               	retlw	32	;' '
   295  066B  3420               	retlw	32	;' '
   296  066C  3420               	retlw	32	;' '
   297  066D  3400               	retlw	0
   298  066E                     STR_8:	
   299  066E  3425               	retlw	37	;'%'
   300  066F  3464               	retlw	100	;'d'
   301  0670  3420               	retlw	32	;' '
   302  0671  3400               	retlw	0
   303  0672                     STR_5:	
   304  0672  3425               	retlw	37	;'%'
   305  0673  3475               	retlw	117	;'u'
   306  0674  3420               	retlw	32	;' '
   307  0675  3400               	retlw	0
   308  0676                     STR_7:	
   309  0676  3448               	retlw	72	;'H'
   310  0677  343A               	retlw	58	;':'
   311  0678  3400               	retlw	0
   312  0679                     STR_12:	
   313  0679  3452               	retlw	82	;'R'
   314  067A  343A               	retlw	58	;':'
   315  067B  3400               	retlw	0
   316  067C                     STR_4:	
   317  067C  3454               	retlw	84	;'T'
   318  067D  343A               	retlw	58	;':'
   319  067E  3400               	retlw	0
   320  067F                     STR_13:	
   321  067F  3425               	retlw	37	;'%'
   322  0680  3464               	retlw	100	;'d'
   323  0681  3400               	retlw	0
   324  066A                     
   325                           ; #config settings
   326  0000                     
   327                           	psect	cinit
   328  0015                     start_initialization:	
   329  0015                     __initialization:	
   330                           
   331                           ; Clear objects allocated to COMMON
   332  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   333  0016  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   334                           
   335                           ; Clear objects allocated to BANK0
   336  0017  1283               	bcf	3,5	;RP0=0, select bank0
   337  0018  1303               	bcf	3,6	;RP1=0, select bank0
   338  0019  01CD               	clrf	__pbssBANK0& (0+127)
   339  001A  01CE               	clrf	(__pbssBANK0+1)& (0+127)
   340                           
   341                           ; Clear objects allocated to BANK1
   342  001B  1683               	bsf	3,5	;RP0=1, select bank1
   343  001C  1303               	bcf	3,6	;RP1=0, select bank1
   344  001D  01C4               	clrf	__pbssBANK1& (0+127)
   345  001E  01C5               	clrf	(__pbssBANK1+1)& (0+127)
   346  001F  01C6               	clrf	(__pbssBANK1+2)& (0+127)
   347  0020  01C7               	clrf	(__pbssBANK1+3)& (0+127)
   348  0021  01C8               	clrf	(__pbssBANK1+4)& (0+127)
   349  0022  01C9               	clrf	(__pbssBANK1+5)& (0+127)
   350  0023  01CA               	clrf	(__pbssBANK1+6)& (0+127)
   351  0024  01CB               	clrf	(__pbssBANK1+7)& (0+127)
   352  0025  01CC               	clrf	(__pbssBANK1+8)& (0+127)
   353  0026  01CD               	clrf	(__pbssBANK1+9)& (0+127)
   354  0027                     end_of_initialization:	
   355                           ;End of C runtime variable initialization code
   356                           
   357  0027                     __end_of__initialization:	
   358  0027  0183               	clrf	3
   359  0028  120A  118A  282B   	ljmp	_main	;jump to C main() function
   360                           
   361                           	psect	bssCOMMON
   362  007C                     __pbssCOMMON:	
   363  007C                     _temp:	
   364  007C                     	ds	2
   365                           
   366                           	psect	bssBANK0
   367  004D                     __pbssBANK0:	
   368  004D                     _press:	
   369  004D                     	ds	2
   370                           
   371                           	psect	bssBANK1
   372  00C4                     __pbssBANK1:	
   373  00C4                     _p_press_count:	
   374  00C4                     	ds	2
   375  00C6                     _c_press_count:	
   376  00C6                     	ds	2
   377  00C8                     _pbeat:	
   378  00C8                     	ds	2
   379  00CA                     _cbeat:	
   380  00CA                     	ds	2
   381  00CC                     _count:	
   382  00CC                     	ds	2
   383                           
   384                           	psect	cstackBANK1
   385  00A0                     __pcstackBANK1:	
   386  00A0                     main@cpress:	
   387                           
   388                           ; 2 bytes @ 0x0
   389  00A0                     	ds	2
   390  00A2                     main@t:	
   391                           
   392                           ; 10 bytes @ 0x2
   393  00A2                     	ds	10
   394  00AC                     main@p:	
   395                           
   396                           ; 10 bytes @ 0xC
   397  00AC                     	ds	10
   398  00B6                     main@h:	
   399                           
   400                           ; 10 bytes @ 0x16
   401  00B6                     	ds	10
   402  00C0                     main@press:	
   403                           
   404                           ; 2 bytes @ 0x20
   405  00C0                     	ds	2
   406  00C2                     main@temp:	
   407                           
   408                           ; 2 bytes @ 0x22
   409  00C2                     	ds	2
   410                           
   411                           	psect	cstackCOMMON
   412  0070                     __pcstackCOMMON:	
   413  0070                     ?_Lcd_Port:	
   414  0070                     ?_Lcd_Cmd:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_Lcd_Init:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_Lcd_Write_Char:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_uart_init:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_uart_txc:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_adc_init:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_timer1_init:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_main:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_T1:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_Lcd_Clear:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?___wmul:	
   445                           ; 2 bytes @ 0x0
   446                           
   447  0070                     ___wmul@multiplier:	
   448                           ; 2 bytes @ 0x0
   449                           
   450                           
   451                           ; 2 bytes @ 0x0
   452  0070                     	ds	2
   453  0072                     ___wmul@multiplicand:	
   454                           
   455                           ; 2 bytes @ 0x2
   456  0072                     	ds	2
   457  0074                     ??___wmul:	
   458  0074                     ___wmul@product:	
   459                           ; 1 bytes @ 0x4
   460                           
   461                           
   462                           ; 2 bytes @ 0x4
   463  0074                     	ds	2
   464  0076                     ??_T1:	
   465                           
   466                           ; 1 bytes @ 0x6
   467  0076                     	ds	6
   468                           
   469                           	psect	cstackBANK0
   470  0020                     __pcstackBANK0:	
   471  0020                     ??_Lcd_Port:	
   472  0020                     ??_uart_init:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0020                     ??_uart_txc:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0020                     ??_adc_init:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0020                     ??_timer1_init:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0020                     ?_adc_read:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0020                     ?___lwdiv:	
   488                           ; 2 bytes @ 0x0
   489                           
   490  0020                     ?___ftpack:	
   491                           ; 2 bytes @ 0x0
   492                           
   493  0020                     Lcd_Port@a:	
   494                           ; 3 bytes @ 0x0
   495                           
   496  0020                     uart_txc@ch:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0020                     ___lwdiv@divisor:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0020                     ___ftpack@arg:	
   503                           ; 2 bytes @ 0x0
   504                           
   505                           
   506                           ; 3 bytes @ 0x0
   507  0020                     	ds	1
   508  0021                     ??_Lcd_Cmd:	
   509  0021                     ??_Lcd_Write_Char:	
   510                           ; 1 bytes @ 0x1
   511                           
   512  0021                     ?_uart_txs:	
   513                           ; 1 bytes @ 0x1
   514                           
   515  0021                     uart_txs@st:	
   516                           ; 1 bytes @ 0x1
   517                           
   518                           
   519                           ; 2 bytes @ 0x1
   520  0021                     	ds	1
   521  0022                     ??_adc_read:	
   522  0022                     Lcd_Write_Char@temp:	
   523                           ; 1 bytes @ 0x2
   524                           
   525  0022                     ___lwdiv@dividend:	
   526                           ; 1 bytes @ 0x2
   527                           
   528                           
   529                           ; 2 bytes @ 0x2
   530  0022                     	ds	1
   531  0023                     ??_uart_txs:	
   532  0023                     Lcd_Cmd@a:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0023                     Lcd_Write_Char@y:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0023                     ___ftpack@exp:	
   539                           ; 1 bytes @ 0x3
   540                           
   541                           
   542                           ; 1 bytes @ 0x3
   543  0023                     	ds	1
   544  0024                     ??_Lcd_Clear:	
   545  0024                     ?_Lcd_Set_Cursor:	
   546                           ; 1 bytes @ 0x4
   547                           
   548  0024                     ??_Lcd_Init:	
   549                           ; 1 bytes @ 0x4
   550                           
   551  0024                     ??___lwdiv:	
   552                           ; 1 bytes @ 0x4
   553                           
   554  0024                     Lcd_Set_Cursor@b:	
   555                           ; 1 bytes @ 0x4
   556                           
   557  0024                     Lcd_Write_Char@a:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0024                     adc_read@channel:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0024                     ___ftpack@sign:	
   564                           ; 1 bytes @ 0x4
   565                           
   566                           
   567                           ; 1 bytes @ 0x4
   568  0024                     	ds	1
   569  0025                     ??___ftpack:	
   570  0025                     ??_Lcd_Set_Cursor:	
   571                           ; 1 bytes @ 0x5
   572                           
   573  0025                     ?_Lcd_Write_String:	
   574                           ; 1 bytes @ 0x5
   575                           
   576  0025                     Lcd_Write_String@a:	
   577                           ; 1 bytes @ 0x5
   578                           
   579  0025                     ___lwdiv@quotient:	
   580                           ; 2 bytes @ 0x5
   581                           
   582                           
   583                           ; 2 bytes @ 0x5
   584  0025                     	ds	2
   585  0027                     ??_Lcd_Write_String:	
   586  0027                     Lcd_Set_Cursor@a:	
   587                           ; 1 bytes @ 0x7
   588                           
   589  0027                     ___lwdiv@counter:	
   590                           ; 1 bytes @ 0x7
   591                           
   592                           
   593                           ; 1 bytes @ 0x7
   594  0027                     	ds	1
   595  0028                     ?___lwmod:	
   596  0028                     ?___lwtoft:	
   597                           ; 2 bytes @ 0x8
   598                           
   599  0028                     Lcd_Set_Cursor@z:	
   600                           ; 3 bytes @ 0x8
   601                           
   602  0028                     ___lwmod@divisor:	
   603                           ; 1 bytes @ 0x8
   604                           
   605  0028                     ___lwtoft@c:	
   606                           ; 2 bytes @ 0x8
   607                           
   608                           
   609                           ; 2 bytes @ 0x8
   610  0028                     	ds	1
   611  0029                     Lcd_Set_Cursor@y:	
   612                           
   613                           ; 1 bytes @ 0x9
   614  0029                     	ds	1
   615  002A                     Lcd_Set_Cursor@temp:	
   616  002A                     Lcd_Write_String@i:	
   617                           ; 1 bytes @ 0xA
   618                           
   619  002A                     ___lwmod@dividend:	
   620                           ; 2 bytes @ 0xA
   621                           
   622                           
   623                           ; 2 bytes @ 0xA
   624  002A                     	ds	1
   625  002B                     ??___lwtoft:	
   626                           
   627                           ; 1 bytes @ 0xB
   628  002B                     	ds	1
   629  002C                     ??___lwmod:	
   630  002C                     ?___ftmul:	
   631                           ; 1 bytes @ 0xC
   632                           
   633  002C                     ___ftmul@f1:	
   634                           ; 3 bytes @ 0xC
   635                           
   636                           
   637                           ; 3 bytes @ 0xC
   638  002C                     	ds	1
   639  002D                     ___lwmod@counter:	
   640                           
   641                           ; 1 bytes @ 0xD
   642  002D                     	ds	1
   643  002E                     ?_sprintf:	
   644  002E                     sprintf@f:	
   645                           ; 2 bytes @ 0xE
   646                           
   647                           
   648                           ; 1 bytes @ 0xE
   649  002E                     	ds	1
   650  002F                     ___ftmul@f2:	
   651                           
   652                           ; 3 bytes @ 0xF
   653  002F                     	ds	2
   654  0031                     ??_sprintf:	
   655                           
   656                           ; 1 bytes @ 0x11
   657  0031                     	ds	1
   658  0032                     ??___ftmul:	
   659                           
   660                           ; 1 bytes @ 0x12
   661  0032                     	ds	2
   662  0034                     sprintf@prec:	
   663                           
   664                           ; 1 bytes @ 0x14
   665  0034                     	ds	1
   666  0035                     sprintf@ap:	
   667                           
   668                           ; 1 bytes @ 0x15
   669  0035                     	ds	1
   670  0036                     sprintf@flag:	
   671  0036                     ___ftmul@exp:	
   672                           ; 1 bytes @ 0x16
   673                           
   674                           
   675                           ; 1 bytes @ 0x16
   676  0036                     	ds	1
   677  0037                     sprintf@val:	
   678  0037                     ___ftmul@f3_as_product:	
   679                           ; 2 bytes @ 0x17
   680                           
   681                           
   682                           ; 3 bytes @ 0x17
   683  0037                     	ds	2
   684  0039                     sprintf@sp:	
   685                           
   686                           ; 1 bytes @ 0x19
   687  0039                     	ds	1
   688  003A                     sprintf@c:	
   689  003A                     ___ftmul@cntr:	
   690                           ; 1 bytes @ 0x1A
   691                           
   692                           
   693                           ; 1 bytes @ 0x1A
   694  003A                     	ds	1
   695  003B                     ___ftmul@sign:	
   696                           
   697                           ; 1 bytes @ 0x1B
   698  003B                     	ds	1
   699  003C                     ?___fttol:	
   700  003C                     ___fttol@f1:	
   701                           ; 4 bytes @ 0x1C
   702                           
   703                           
   704                           ; 3 bytes @ 0x1C
   705  003C                     	ds	4
   706  0040                     ??___fttol:	
   707                           
   708                           ; 1 bytes @ 0x20
   709  0040                     	ds	4
   710  0044                     ___fttol@sign1:	
   711                           
   712                           ; 1 bytes @ 0x24
   713  0044                     	ds	1
   714  0045                     ___fttol@lval:	
   715                           
   716                           ; 4 bytes @ 0x25
   717  0045                     	ds	4
   718  0049                     ___fttol@exp1:	
   719                           
   720                           ; 1 bytes @ 0x29
   721  0049                     	ds	1
   722  004A                     ??_main:	
   723                           
   724                           ; 1 bytes @ 0x2A
   725  004A                     	ds	3
   726                           
   727                           	psect	maintext
   728  002B                     __pmaintext:	
   729 ;;
   730 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   731 ;;
   732 ;; *************** function _main *****************
   733 ;; Defined at:
   734 ;;		line 88 in file "HEALTH_IOT.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  h              10   22[BANK1 ] unsigned char [10]
   739 ;;  p              10   12[BANK1 ] unsigned char [10]
   740 ;;  t              10    2[BANK1 ] unsigned char [10]
   741 ;;  temp            2   34[BANK1 ] unsigned int 
   742 ;;  press           2   32[BANK1 ] unsigned int 
   743 ;;  cpress          2    0[BANK1 ] unsigned int 
   744 ;;  i               2    0        unsigned int 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : B00/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   754 ;;      Params:         0       0       0       0       0
   755 ;;      Locals:         0       0      36       0       0
   756 ;;      Temps:          0       3       0       0       0
   757 ;;      Totals:         0       3      36       0       0
   758 ;;Total ram usage:       39 bytes
   759 ;; Hardware stack levels required when called:    5
   760 ;; This function calls:
   761 ;;		_Lcd_Clear
   762 ;;		_Lcd_Init
   763 ;;		_Lcd_Set_Cursor
   764 ;;		_Lcd_Write_String
   765 ;;		___ftmul
   766 ;;		___fttol
   767 ;;		___lwtoft
   768 ;;		_adc_init
   769 ;;		_adc_read
   770 ;;		_sprintf
   771 ;;		_timer1_init
   772 ;;		_uart_init
   773 ;;		_uart_txc
   774 ;;		_uart_txs
   775 ;; This function is called by:
   776 ;;		Startup code after reset
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           
   781                           ;psect for function _main
   782  002B                     _main:	
   783                           
   784                           ;HEALTH_IOT.c: 89: unsigned int temp,cpress = 0,i,press;
   785                           
   786                           ;incstack = 0
   787                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   788  002B  1683               	bsf	3,5	;RP0=1, select bank1
   789  002C  1303               	bcf	3,6	;RP1=0, select bank1
   790  002D  01A0               	clrf	main@cpress^(0+128)
   791  002E  01A1               	clrf	(main@cpress+1)^(0+128)
   792                           
   793                           ;HEALTH_IOT.c: 90: char t[10],p[10],h[10];
   794                           ;HEALTH_IOT.c: 91: TRISD = 0x00;
   795  002F  0188               	clrf	8	;volatile
   796                           
   797                           ;HEALTH_IOT.c: 92: TRISA = 0xFF;
   798  0030  30FF               	movlw	255
   799  0031  0085               	movwf	5	;volatile
   800                           
   801                           ;HEALTH_IOT.c: 93: timer1_init();
   802  0032  120A  158A  26AC  120A  118A  	fcall	_timer1_init
   803                           
   804                           ;HEALTH_IOT.c: 94: OPTION_REG = 0b00101000;
   805  0037  3028               	movlw	40
   806  0038  1683               	bsf	3,5	;RP0=1, select bank1
   807  0039  1303               	bcf	3,6	;RP1=0, select bank1
   808  003A  0081               	movwf	1	;volatile
   809                           
   810                           ;HEALTH_IOT.c: 95: TMR0 = 0;
   811  003B  1283               	bcf	3,5	;RP0=0, select bank0
   812  003C  1303               	bcf	3,6	;RP1=0, select bank0
   813  003D  0181               	clrf	1	;volatile
   814                           
   815                           ;HEALTH_IOT.c: 96: INTCON = 0xC0;
   816  003E  30C0               	movlw	192
   817  003F  008B               	movwf	11	;volatile
   818                           
   819                           ;HEALTH_IOT.c: 97: uart_init();
   820  0040  120A  158A  26BB  120A  118A  	fcall	_uart_init
   821                           
   822                           ;HEALTH_IOT.c: 98: adc_init();
   823  0045  120A  158A  268C  120A  118A  	fcall	_adc_init
   824                           
   825                           ;HEALTH_IOT.c: 99: Lcd_Init();
   826  004A  120A  118A  26F0  120A  118A  	fcall	_Lcd_Init
   827                           
   828                           ;HEALTH_IOT.c: 100: Lcd_Set_Cursor(1,1);
   829  004F  1283               	bcf	3,5	;RP0=0, select bank0
   830  0050  1303               	bcf	3,6	;RP1=0, select bank0
   831  0051  01A4               	clrf	Lcd_Set_Cursor@b
   832  0052  0AA4               	incf	Lcd_Set_Cursor@b,f
   833  0053  3001               	movlw	1
   834  0054  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
   835                           
   836                           ;HEALTH_IOT.c: 101: Lcd_Write_String(" HEALTH MONITOR ");
   837  0059  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   838  005A  1283               	bcf	3,5	;RP0=0, select bank0
   839  005B  1303               	bcf	3,6	;RP1=0, select bank0
   840  005C  00A5               	movwf	Lcd_Write_String@a
   841  005D  3080               	movlw	128
   842  005E  00A6               	movwf	Lcd_Write_String@a+1
   843  005F  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
   844                           
   845                           ;HEALTH_IOT.c: 102: Lcd_Set_Cursor(2,1);
   846  0064  1283               	bcf	3,5	;RP0=0, select bank0
   847  0065  1303               	bcf	3,6	;RP1=0, select bank0
   848  0066  01A4               	clrf	Lcd_Set_Cursor@b
   849  0067  0AA4               	incf	Lcd_Set_Cursor@b,f
   850  0068  3002               	movlw	2
   851  0069  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
   852                           
   853                           ;HEALTH_IOT.c: 103: Lcd_Write_String("   USING IOT    ");
   854  006E  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   855  006F  1283               	bcf	3,5	;RP0=0, select bank0
   856  0070  1303               	bcf	3,6	;RP1=0, select bank0
   857  0071  00A5               	movwf	Lcd_Write_String@a
   858  0072  3080               	movlw	128
   859  0073  00A6               	movwf	Lcd_Write_String@a+1
   860  0074  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
   861                           
   862                           ;HEALTH_IOT.c: 104: _delay((unsigned long)((2000)*(20000000/4000.0)));
   863  0079  3033               	movlw	51
   864  007A  1283               	bcf	3,5	;RP0=0, select bank0
   865  007B  1303               	bcf	3,6	;RP1=0, select bank0
   866  007C  00CC               	movwf	??_main+2
   867  007D  30BB               	movlw	187
   868  007E  00CB               	movwf	??_main+1
   869  007F  30DF               	movlw	223
   870  0080  00CA               	movwf	??_main
   871  0081                     u1817:	
   872  0081  0BCA               	decfsz	??_main,f
   873  0082  2881               	goto	u1817
   874  0083  0BCB               	decfsz	??_main+1,f
   875  0084  2881               	goto	u1817
   876  0085  0BCC               	decfsz	??_main+2,f
   877  0086  2881               	goto	u1817
   878                           
   879                           ;HEALTH_IOT.c: 105: Lcd_Clear();
   880  0087  120A  158A  2695  120A  118A  	fcall	_Lcd_Clear
   881  008C                     l1616:	
   882                           ;HEALTH_IOT.c: 106: while(1){
   883                           
   884                           
   885                           ;HEALTH_IOT.c: 107: temp = adc_read(0);
   886  008C  3000               	movlw	0
   887  008D  120A  158A  271E  120A  118A  	fcall	_adc_read
   888  0092  1283               	bcf	3,5	;RP0=0, select bank0
   889  0093  1303               	bcf	3,6	;RP1=0, select bank0
   890  0094  0821               	movf	?_adc_read+1,w
   891  0095  1683               	bsf	3,5	;RP0=1, select bank1
   892  0096  1303               	bcf	3,6	;RP1=0, select bank1
   893  0097  00C3               	movwf	(main@temp+1)^(0+128)
   894  0098  1283               	bcf	3,5	;RP0=0, select bank0
   895  0099  1303               	bcf	3,6	;RP1=0, select bank0
   896  009A  0820               	movf	?_adc_read,w
   897  009B  1683               	bsf	3,5	;RP0=1, select bank1
   898  009C  1303               	bcf	3,6	;RP1=0, select bank1
   899  009D  00C2               	movwf	main@temp^(0+128)
   900                           
   901                           ;HEALTH_IOT.c: 108: press = adc_read(1);
   902  009E  3001               	movlw	1
   903  009F  120A  158A  271E  120A  118A  	fcall	_adc_read
   904  00A4  1283               	bcf	3,5	;RP0=0, select bank0
   905  00A5  1303               	bcf	3,6	;RP1=0, select bank0
   906  00A6  0821               	movf	?_adc_read+1,w
   907  00A7  1683               	bsf	3,5	;RP0=1, select bank1
   908  00A8  1303               	bcf	3,6	;RP1=0, select bank1
   909  00A9  00C1               	movwf	(main@press+1)^(0+128)
   910  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   911  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   912  00AC  0820               	movf	?_adc_read,w
   913  00AD  1683               	bsf	3,5	;RP0=1, select bank1
   914  00AE  1303               	bcf	3,6	;RP1=0, select bank1
   915  00AF  00C0               	movwf	main@press^(0+128)
   916                           
   917                           ;HEALTH_IOT.c: 109: temp = temp * 0.4887;
   918  00B0  0843               	movf	(main@temp+1)^(0+128),w
   919  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   920  00B2  1303               	bcf	3,6	;RP1=0, select bank0
   921  00B3  00A9               	movwf	___lwtoft@c+1
   922  00B4  1683               	bsf	3,5	;RP0=1, select bank1
   923  00B5  1303               	bcf	3,6	;RP1=0, select bank1
   924  00B6  0842               	movf	main@temp^(0+128),w
   925  00B7  1283               	bcf	3,5	;RP0=0, select bank0
   926  00B8  1303               	bcf	3,6	;RP1=0, select bank0
   927  00B9  00A8               	movwf	___lwtoft@c
   928  00BA  120A  158A  26E5  120A  118A  	fcall	___lwtoft
   929  00BF  1283               	bcf	3,5	;RP0=0, select bank0
   930  00C0  1303               	bcf	3,6	;RP1=0, select bank0
   931  00C1  0828               	movf	?___lwtoft,w
   932  00C2  00AF               	movwf	___ftmul@f2
   933  00C3  0829               	movf	?___lwtoft+1,w
   934  00C4  00B0               	movwf	___ftmul@f2+1
   935  00C5  082A               	movf	?___lwtoft+2,w
   936  00C6  00B1               	movwf	___ftmul@f2+2
   937  00C7  3037               	movlw	55
   938  00C8  00AC               	movwf	___ftmul@f1
   939  00C9  30FA               	movlw	250
   940  00CA  00AD               	movwf	___ftmul@f1+1
   941  00CB  303E               	movlw	62
   942  00CC  00AE               	movwf	___ftmul@f1+2
   943  00CD  120A  118A  2436  120A  118A  	fcall	___ftmul
   944  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   945  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   946  00D4  082C               	movf	?___ftmul,w
   947  00D5  00BC               	movwf	___fttol@f1
   948  00D6  082D               	movf	?___ftmul+1,w
   949  00D7  00BD               	movwf	___fttol@f1+1
   950  00D8  082E               	movf	?___ftmul+2,w
   951  00D9  00BE               	movwf	___fttol@f1+2
   952  00DA  120A  118A  2509  120A  118A  	fcall	___fttol
   953  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   954  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   955  00E1  083D               	movf	?___fttol+1,w
   956  00E2  1683               	bsf	3,5	;RP0=1, select bank1
   957  00E3  1303               	bcf	3,6	;RP1=0, select bank1
   958  00E4  00C3               	movwf	(main@temp+1)^(0+128)
   959  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   960  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   961  00E7  083C               	movf	?___fttol,w
   962  00E8  1683               	bsf	3,5	;RP0=1, select bank1
   963  00E9  1303               	bcf	3,6	;RP1=0, select bank1
   964  00EA  00C2               	movwf	main@temp^(0+128)
   965                           
   966                           ;HEALTH_IOT.c: 110: if(temp >= 40){
   967  00EB  3000               	movlw	0
   968  00EC  0243               	subwf	(main@temp+1)^(0+128),w
   969  00ED  3028               	movlw	40
   970  00EE  1903               	skipnz
   971  00EF  0242               	subwf	main@temp^(0+128),w
   972  00F0  1C03               	skipc
   973  00F1  28FE               	goto	l1628
   974                           
   975                           ;HEALTH_IOT.c: 111: Lcd_Set_Cursor(1,1);
   976  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   977  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   978  00F4  01A4               	clrf	Lcd_Set_Cursor@b
   979  00F5  0AA4               	incf	Lcd_Set_Cursor@b,f
   980  00F6  3001               	movlw	1
   981  00F7  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
   982                           
   983                           ;HEALTH_IOT.c: 112: Lcd_Write_String("TEMP HIGH");
   984  00FC  304F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   985  00FD  294F               	goto	L1
   986  00FE                     l1628:	
   987                           ;HEALTH_IOT.c: 113: }
   988                           
   989                           
   990                           ;HEALTH_IOT.c: 114: else{
   991                           ;HEALTH_IOT.c: 115: Lcd_Set_Cursor(1,1);
   992  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   993  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   994  0100  01A4               	clrf	Lcd_Set_Cursor@b
   995  0101  0AA4               	incf	Lcd_Set_Cursor@b,f
   996  0102  3001               	movlw	1
   997  0103  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
   998                           
   999                           ;HEALTH_IOT.c: 116: Lcd_Write_String("T:");
  1000  0108  306D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1001  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1002  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1003  010B  00A5               	movwf	Lcd_Write_String@a
  1004  010C  3080               	movlw	128
  1005  010D  00A6               	movwf	Lcd_Write_String@a+1
  1006  010E  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1007                           
  1008                           ;HEALTH_IOT.c: 117: Lcd_Set_Cursor(1,3);
  1009  0113  3003               	movlw	3
  1010  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1011  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1012  0116  00CA               	movwf	??_main
  1013  0117  084A               	movf	??_main,w
  1014  0118  00A4               	movwf	Lcd_Set_Cursor@b
  1015  0119  3001               	movlw	1
  1016  011A  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1017                           
  1018                           ;HEALTH_IOT.c: 118: sprintf(t,"%u ",temp);
  1019  011F  3063               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1020  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0122  00CA               	movwf	??_main
  1023  0123  084A               	movf	??_main,w
  1024  0124  00AE               	movwf	sprintf@f
  1025  0125  1683               	bsf	3,5	;RP0=1, select bank1
  1026  0126  1303               	bcf	3,6	;RP1=0, select bank1
  1027  0127  0843               	movf	(main@temp+1)^(0+128),w
  1028  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1029  0129  1303               	bcf	3,6	;RP1=0, select bank0
  1030  012A  00B0               	movwf	?_sprintf+2
  1031  012B  1683               	bsf	3,5	;RP0=1, select bank1
  1032  012C  1303               	bcf	3,6	;RP1=0, select bank1
  1033  012D  0842               	movf	main@temp^(0+128),w
  1034  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1035  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1036  0130  00AF               	movwf	?_sprintf+1
  1037  0131  30A2               	movlw	(low (main@t| 0))& (0+255)
  1038  0132  120A  118A  234B  120A  118A  	fcall	_sprintf
  1039                           
  1040                           ;HEALTH_IOT.c: 119: Lcd_Write_String(t);
  1041  0137  30A2               	movlw	(low (main@t| 0))& (0+255)
  1042  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0139  1303               	bcf	3,6	;RP1=0, select bank0
  1044  013A  00A5               	movwf	Lcd_Write_String@a
  1045  013B  3000               	movlw	0
  1046  013C  00A6               	movwf	Lcd_Write_String@a+1
  1047  013D  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1048                           
  1049                           ;HEALTH_IOT.c: 120: Lcd_Set_Cursor(1,5);
  1050  0142  3005               	movlw	5
  1051  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1052  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1053  0145  00CA               	movwf	??_main
  1054  0146  084A               	movf	??_main,w
  1055  0147  00A4               	movwf	Lcd_Set_Cursor@b
  1056  0148  3001               	movlw	1
  1057  0149  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1058                           
  1059                           ;HEALTH_IOT.c: 121: Lcd_Write_String("     ");
  1060  014E  3059               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1061  014F                     L1:	
  1062  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1063  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0151  00A5               	movwf	Lcd_Write_String@a
  1065  0152  3080               	movlw	128
  1066  0153  00A6               	movwf	Lcd_Write_String@a+1
  1067  0154  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1068                           
  1069                           ;HEALTH_IOT.c: 122: }
  1070                           ;HEALTH_IOT.c: 123: if(pbeat != cbeat){
  1071  0159  1683               	bsf	3,5	;RP0=1, select bank1
  1072  015A  1303               	bcf	3,6	;RP1=0, select bank1
  1073  015B  084B               	movf	(_cbeat+1)^(0+128),w
  1074  015C  0649               	xorwf	(_pbeat+1)^(0+128),w
  1075  015D  1D03               	skipz
  1076  015E  2961               	goto	u1735
  1077  015F  084A               	movf	_cbeat^(0+128),w
  1078  0160  0648               	xorwf	_pbeat^(0+128),w
  1079  0161                     u1735:	
  1080  0161  1903               	skipnz
  1081  0162  29C7               	goto	l1652
  1082                           
  1083                           ;HEALTH_IOT.c: 124: Lcd_Set_Cursor(1,10);
  1084  0163  300A               	movlw	10
  1085  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1086  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1087  0166  00CA               	movwf	??_main
  1088  0167  084A               	movf	??_main,w
  1089  0168  00A4               	movwf	Lcd_Set_Cursor@b
  1090  0169  3001               	movlw	1
  1091  016A  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1092                           
  1093                           ;HEALTH_IOT.c: 125: Lcd_Write_String("H:");
  1094  016F  3067               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1095  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1096  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1097  0172  00A5               	movwf	Lcd_Write_String@a
  1098  0173  3080               	movlw	128
  1099  0174  00A6               	movwf	Lcd_Write_String@a+1
  1100  0175  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1101                           
  1102                           ;HEALTH_IOT.c: 126: Lcd_Set_Cursor(1,13);
  1103  017A  300D               	movlw	13
  1104  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1105  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1106  017D  00CA               	movwf	??_main
  1107  017E  084A               	movf	??_main,w
  1108  017F  00A4               	movwf	Lcd_Set_Cursor@b
  1109  0180  3001               	movlw	1
  1110  0181  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1111                           
  1112                           ;HEALTH_IOT.c: 127: sprintf(h,"%d ",cbeat);
  1113  0186  305F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1114  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1115  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1116  0189  00CA               	movwf	??_main
  1117  018A  084A               	movf	??_main,w
  1118  018B  00AE               	movwf	sprintf@f
  1119  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1120  018D  1303               	bcf	3,6	;RP1=0, select bank1
  1121  018E  084B               	movf	(_cbeat+1)^(0+128),w
  1122  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1124  0191  00B0               	movwf	?_sprintf+2
  1125  0192  1683               	bsf	3,5	;RP0=1, select bank1
  1126  0193  1303               	bcf	3,6	;RP1=0, select bank1
  1127  0194  084A               	movf	_cbeat^(0+128),w
  1128  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1129  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1130  0197  00AF               	movwf	?_sprintf+1
  1131  0198  30B6               	movlw	(low (main@h| 0))& (0+255)
  1132  0199  120A  118A  234B  120A  118A  	fcall	_sprintf
  1133                           
  1134                           ;HEALTH_IOT.c: 128: Lcd_Write_String(h);
  1135  019E  30B6               	movlw	(low (main@h| 0))& (0+255)
  1136  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1137  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1138  01A1  00A5               	movwf	Lcd_Write_String@a
  1139  01A2  3000               	movlw	0
  1140  01A3  00A6               	movwf	Lcd_Write_String@a+1
  1141  01A4  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1142                           
  1143                           ;HEALTH_IOT.c: 129: Lcd_Set_Cursor(1,5);
  1144  01A9  3005               	movlw	5
  1145  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1146  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1147  01AC  00CA               	movwf	??_main
  1148  01AD  084A               	movf	??_main,w
  1149  01AE  00A4               	movwf	Lcd_Set_Cursor@b
  1150  01AF  3001               	movlw	1
  1151  01B0  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1152                           
  1153                           ;HEALTH_IOT.c: 130: Lcd_Write_String("   ");
  1154  01B5  305B               	movlw	(low (((STR_6+2)-__stringbase)| (0+32768)))& (0+255)
  1155  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1156  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1157  01B8  00A5               	movwf	Lcd_Write_String@a
  1158  01B9  3080               	movlw	128
  1159  01BA  00A6               	movwf	Lcd_Write_String@a+1
  1160  01BB  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1161                           
  1162                           ;HEALTH_IOT.c: 131: pbeat = cbeat;
  1163  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1164  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  1165  01C2  084B               	movf	(_cbeat+1)^(0+128),w
  1166  01C3  00C9               	movwf	(_pbeat+1)^(0+128)
  1167  01C4  084A               	movf	_cbeat^(0+128),w
  1168  01C5  00C8               	movwf	_pbeat^(0+128)
  1169                           
  1170                           ;HEALTH_IOT.c: 132: }
  1171  01C6  2A0D               	goto	l1658
  1172  01C7                     l1652:	
  1173                           
  1174                           ;HEALTH_IOT.c: 133: else{
  1175                           ;HEALTH_IOT.c: 134: Lcd_Set_Cursor(1,10);
  1176  01C7  300A               	movlw	10
  1177  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1178  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1179  01CA  00CA               	movwf	??_main
  1180  01CB  084A               	movf	??_main,w
  1181  01CC  00A4               	movwf	Lcd_Set_Cursor@b
  1182  01CD  3001               	movlw	1
  1183  01CE  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1184                           
  1185                           ;HEALTH_IOT.c: 135: Lcd_Write_String("H:");
  1186  01D3  3067               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1187  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1188  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1189  01D6  00A5               	movwf	Lcd_Write_String@a
  1190  01D7  3080               	movlw	128
  1191  01D8  00A6               	movwf	Lcd_Write_String@a+1
  1192  01D9  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1193                           
  1194                           ;HEALTH_IOT.c: 136: Lcd_Set_Cursor(1,13);
  1195  01DE  300D               	movlw	13
  1196  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1197  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1198  01E1  00CA               	movwf	??_main
  1199  01E2  084A               	movf	??_main,w
  1200  01E3  00A4               	movwf	Lcd_Set_Cursor@b
  1201  01E4  3001               	movlw	1
  1202  01E5  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1203                           
  1204                           ;HEALTH_IOT.c: 137: sprintf(h,"%d ",pbeat);
  1205  01EA  305F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1206  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1207  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1208  01ED  00CA               	movwf	??_main
  1209  01EE  084A               	movf	??_main,w
  1210  01EF  00AE               	movwf	sprintf@f
  1211  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  1212  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  1213  01F2  0849               	movf	(_pbeat+1)^(0+128),w
  1214  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1215  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1216  01F5  00B0               	movwf	?_sprintf+2
  1217  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1218  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1219  01F8  0848               	movf	_pbeat^(0+128),w
  1220  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1221  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1222  01FB  00AF               	movwf	?_sprintf+1
  1223  01FC  30B6               	movlw	(low (main@h| 0))& (0+255)
  1224  01FD  120A  118A  234B  120A  118A  	fcall	_sprintf
  1225                           
  1226                           ;HEALTH_IOT.c: 138: Lcd_Write_String(h);
  1227  0202  30B6               	movlw	(low (main@h| 0))& (0+255)
  1228  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1229  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1230  0205  00A5               	movwf	Lcd_Write_String@a
  1231  0206  3000               	movlw	0
  1232  0207  00A6               	movwf	Lcd_Write_String@a+1
  1233  0208  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1234  020D                     l1658:	
  1235                           
  1236                           ;HEALTH_IOT.c: 139: }
  1237                           ;HEALTH_IOT.c: 140: if(press >200){
  1238  020D  3000               	movlw	0
  1239  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1240  020F  1303               	bcf	3,6	;RP1=0, select bank1
  1241  0210  0241               	subwf	(main@press+1)^(0+128),w
  1242  0211  30C9               	movlw	201
  1243  0212  1903               	skipnz
  1244  0213  0240               	subwf	main@press^(0+128),w
  1245  0214  1C03               	skipc
  1246  0215  2A69               	goto	l1674
  1247                           
  1248                           ;HEALTH_IOT.c: 141: c_press_count++;
  1249  0216  3001               	movlw	1
  1250  0217  07C6               	addwf	_c_press_count^(0+128),f
  1251  0218  1803               	skipnc
  1252  0219  0AC7               	incf	(_c_press_count+1)^(0+128),f
  1253  021A  3000               	movlw	0
  1254  021B  07C7               	addwf	(_c_press_count+1)^(0+128),f
  1255                           
  1256                           ;HEALTH_IOT.c: 142: Lcd_Set_Cursor(2,5);
  1257  021C  3005               	movlw	5
  1258  021D  1283               	bcf	3,5	;RP0=0, select bank0
  1259  021E  1303               	bcf	3,6	;RP1=0, select bank0
  1260  021F  00CA               	movwf	??_main
  1261  0220  084A               	movf	??_main,w
  1262  0221  00A4               	movwf	Lcd_Set_Cursor@b
  1263  0222  3002               	movlw	2
  1264  0223  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1265                           
  1266                           ;HEALTH_IOT.c: 143: Lcd_Write_String("R:");
  1267  0228  306A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1268  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1269  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1270  022B  00A5               	movwf	Lcd_Write_String@a
  1271  022C  3080               	movlw	128
  1272  022D  00A6               	movwf	Lcd_Write_String@a+1
  1273  022E  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1274                           
  1275                           ;HEALTH_IOT.c: 144: Lcd_Set_Cursor(2,8);
  1276  0233  3008               	movlw	8
  1277  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0235  1303               	bcf	3,6	;RP1=0, select bank0
  1279  0236  00CA               	movwf	??_main
  1280  0237  084A               	movf	??_main,w
  1281  0238  00A4               	movwf	Lcd_Set_Cursor@b
  1282  0239  3002               	movlw	2
  1283  023A  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1284                           
  1285                           ;HEALTH_IOT.c: 145: sprintf(p,"%d",c_press_count);
  1286  023F  3070               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1287  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1288  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0242  00CA               	movwf	??_main
  1290  0243  084A               	movf	??_main,w
  1291  0244  00AE               	movwf	sprintf@f
  1292  0245  1683               	bsf	3,5	;RP0=1, select bank1
  1293  0246  1303               	bcf	3,6	;RP1=0, select bank1
  1294  0247  0847               	movf	(_c_press_count+1)^(0+128),w
  1295  0248  1283               	bcf	3,5	;RP0=0, select bank0
  1296  0249  1303               	bcf	3,6	;RP1=0, select bank0
  1297  024A  00B0               	movwf	?_sprintf+2
  1298  024B  1683               	bsf	3,5	;RP0=1, select bank1
  1299  024C  1303               	bcf	3,6	;RP1=0, select bank1
  1300  024D  0846               	movf	_c_press_count^(0+128),w
  1301  024E  1283               	bcf	3,5	;RP0=0, select bank0
  1302  024F  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0250  00AF               	movwf	?_sprintf+1
  1304  0251  30AC               	movlw	(low (main@p| 0))& (0+255)
  1305  0252  120A  118A  234B  120A  118A  	fcall	_sprintf
  1306                           
  1307                           ;HEALTH_IOT.c: 146: Lcd_Write_String(p);
  1308  0257  30AC               	movlw	(low (main@p| 0))& (0+255)
  1309  0258  1283               	bcf	3,5	;RP0=0, select bank0
  1310  0259  1303               	bcf	3,6	;RP1=0, select bank0
  1311  025A  00A5               	movwf	Lcd_Write_String@a
  1312  025B  3000               	movlw	0
  1313  025C  00A6               	movwf	Lcd_Write_String@a+1
  1314  025D  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1315                           
  1316                           ;HEALTH_IOT.c: 147: p_press_count = c_press_count;
  1317  0262  1683               	bsf	3,5	;RP0=1, select bank1
  1318  0263  1303               	bcf	3,6	;RP1=0, select bank1
  1319  0264  0847               	movf	(_c_press_count+1)^(0+128),w
  1320  0265  00C5               	movwf	(_p_press_count+1)^(0+128)
  1321  0266  0846               	movf	_c_press_count^(0+128),w
  1322  0267  00C4               	movwf	_p_press_count^(0+128)
  1323                           
  1324                           ;HEALTH_IOT.c: 148: }
  1325  0268  2AAF               	goto	l1680
  1326  0269                     l1674:	
  1327                           
  1328                           ;HEALTH_IOT.c: 149: else{
  1329                           ;HEALTH_IOT.c: 150: Lcd_Set_Cursor(2,5);
  1330  0269  3005               	movlw	5
  1331  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1332  026B  1303               	bcf	3,6	;RP1=0, select bank0
  1333  026C  00CA               	movwf	??_main
  1334  026D  084A               	movf	??_main,w
  1335  026E  00A4               	movwf	Lcd_Set_Cursor@b
  1336  026F  3002               	movlw	2
  1337  0270  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1338                           
  1339                           ;HEALTH_IOT.c: 151: Lcd_Write_String("R:");
  1340  0275  306A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1341  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1343  0278  00A5               	movwf	Lcd_Write_String@a
  1344  0279  3080               	movlw	128
  1345  027A  00A6               	movwf	Lcd_Write_String@a+1
  1346  027B  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1347                           
  1348                           ;HEALTH_IOT.c: 152: Lcd_Set_Cursor(2,8);
  1349  0280  3008               	movlw	8
  1350  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0282  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0283  00CA               	movwf	??_main
  1353  0284  084A               	movf	??_main,w
  1354  0285  00A4               	movwf	Lcd_Set_Cursor@b
  1355  0286  3002               	movlw	2
  1356  0287  120A  118A  2751  120A  118A  	fcall	_Lcd_Set_Cursor
  1357                           
  1358                           ;HEALTH_IOT.c: 153: sprintf(p,"%d",p_press_count);
  1359  028C  3070               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1360  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1361  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1362  028F  00CA               	movwf	??_main
  1363  0290  084A               	movf	??_main,w
  1364  0291  00AE               	movwf	sprintf@f
  1365  0292  1683               	bsf	3,5	;RP0=1, select bank1
  1366  0293  1303               	bcf	3,6	;RP1=0, select bank1
  1367  0294  0845               	movf	(_p_press_count+1)^(0+128),w
  1368  0295  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0296  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0297  00B0               	movwf	?_sprintf+2
  1371  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1372  0299  1303               	bcf	3,6	;RP1=0, select bank1
  1373  029A  0844               	movf	_p_press_count^(0+128),w
  1374  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1375  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1376  029D  00AF               	movwf	?_sprintf+1
  1377  029E  30AC               	movlw	(low (main@p| 0))& (0+255)
  1378  029F  120A  118A  234B  120A  118A  	fcall	_sprintf
  1379                           
  1380                           ;HEALTH_IOT.c: 154: Lcd_Write_String(p);
  1381  02A4  30AC               	movlw	(low (main@p| 0))& (0+255)
  1382  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  1383  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  1384  02A7  00A5               	movwf	Lcd_Write_String@a
  1385  02A8  3000               	movlw	0
  1386  02A9  00A6               	movwf	Lcd_Write_String@a+1
  1387  02AA  120A  118A  27A3  120A  118A  	fcall	_Lcd_Write_String
  1388  02AF                     l1680:	
  1389                           
  1390                           ;HEALTH_IOT.c: 155: }
  1391                           ;HEALTH_IOT.c: 157: if(count == 90){
  1392  02AF  305A               	movlw	90
  1393  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  1394  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  1395  02B2  064C               	xorwf	_count^(0+128),w
  1396  02B3  044D               	iorwf	(_count+1)^(0+128),w
  1397  02B4  1D03               	btfss	3,2
  1398  02B5  288C               	goto	l1616
  1399                           
  1400                           ;HEALTH_IOT.c: 158: uart_txc(0x2a);
  1401  02B6  302A               	movlw	42
  1402  02B7  120A  158A  26A0  120A  118A  	fcall	_uart_txc
  1403                           
  1404                           ;HEALTH_IOT.c: 159: _delay((unsigned long)((2)*(20000000/4000.0)));
  1405  02BC  300D               	movlw	13
  1406  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1407  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1408  02BF  00CB               	movwf	??_main+1
  1409  02C0  30FB               	movlw	251
  1410  02C1  00CA               	movwf	??_main
  1411  02C2                     u1827:	
  1412  02C2  0BCA               	decfsz	??_main,f
  1413  02C3  2AC2               	goto	u1827
  1414  02C4  0BCB               	decfsz	??_main+1,f
  1415  02C5  2AC2               	goto	u1827
  1416                           
  1417                           ;HEALTH_IOT.c: 160: if(temp >= 40){
  1418  02C6  3000               	movlw	0
  1419  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  1420  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  1421  02C9  0243               	subwf	(main@temp+1)^(0+128),w
  1422  02CA  3028               	movlw	40
  1423  02CB  1903               	skipnz
  1424  02CC  0242               	subwf	main@temp^(0+128),w
  1425  02CD  1C03               	skipc
  1426  02CE  2AD5               	goto	l1690
  1427                           
  1428                           ;HEALTH_IOT.c: 161: uart_txs("HIGH TEMP ");
  1429  02CF  3039               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1430  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  1431  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  1432  02D2  00A1               	movwf	uart_txs@st
  1433  02D3  3080               	movlw	128
  1434  02D4  2AE5               	goto	L2
  1435  02D5                     l1690:	
  1436                           ;HEALTH_IOT.c: 162: }
  1437                           
  1438                           
  1439                           ;HEALTH_IOT.c: 163: else{
  1440                           ;HEALTH_IOT.c: 164: uart_txs("T:");
  1441  02D5  306D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1442  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1443  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1444  02D8  00A1               	movwf	uart_txs@st
  1445  02D9  3080               	movlw	128
  1446  02DA  00A2               	movwf	uart_txs@st+1
  1447  02DB  120A  118A  25D6  120A  118A  	fcall	_uart_txs
  1448                           
  1449                           ;HEALTH_IOT.c: 165: uart_txs(t);
  1450  02E0  30A2               	movlw	(low (main@t| 0))& (0+255)
  1451  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1452  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1453  02E3  00A1               	movwf	uart_txs@st
  1454  02E4  3000               	movlw	0
  1455  02E5                     L2:	
  1456  02E5  00A2               	movwf	uart_txs@st+1
  1457  02E6  120A  118A  25D6  120A  118A  	fcall	_uart_txs
  1458                           
  1459                           ;HEALTH_IOT.c: 166: }
  1460                           ;HEALTH_IOT.c: 167: if(cbeat >= 150){
  1461  02EB  3000               	movlw	0
  1462  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  1463  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  1464  02EE  024B               	subwf	(_cbeat+1)^(0+128),w
  1465  02EF  3096               	movlw	150
  1466  02F0  1903               	skipnz
  1467  02F1  024A               	subwf	_cbeat^(0+128),w
  1468  02F2  1C03               	skipc
  1469  02F3  2AFA               	goto	l1696
  1470                           
  1471                           ;HEALTH_IOT.c: 168: uart_txs("HIGH BEAT ");
  1472  02F4  3044               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1473  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1474  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1475  02F7  00A1               	movwf	uart_txs@st
  1476  02F8  3080               	movlw	128
  1477  02F9  2B0A               	goto	L3
  1478  02FA                     l1696:	
  1479                           ;HEALTH_IOT.c: 169: }
  1480                           
  1481                           
  1482                           ;HEALTH_IOT.c: 170: else{
  1483                           ;HEALTH_IOT.c: 171: uart_txs("H:");
  1484  02FA  3067               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1485  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  1486  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  1487  02FD  00A1               	movwf	uart_txs@st
  1488  02FE  3080               	movlw	128
  1489  02FF  00A2               	movwf	uart_txs@st+1
  1490  0300  120A  118A  25D6  120A  118A  	fcall	_uart_txs
  1491                           
  1492                           ;HEALTH_IOT.c: 172: uart_txs(h);
  1493  0305  30B6               	movlw	(low (main@h| 0))& (0+255)
  1494  0306  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0307  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0308  00A1               	movwf	uart_txs@st
  1497  0309  3000               	movlw	0
  1498  030A                     L3:	
  1499  030A  00A2               	movwf	uart_txs@st+1
  1500  030B  120A  118A  25D6  120A  118A  	fcall	_uart_txs
  1501                           
  1502                           ;HEALTH_IOT.c: 173: }
  1503                           ;HEALTH_IOT.c: 174: if(c_press_count >= 25){
  1504  0310  3000               	movlw	0
  1505  0311  1683               	bsf	3,5	;RP0=1, select bank1
  1506  0312  1303               	bcf	3,6	;RP1=0, select bank1
  1507  0313  0247               	subwf	(_c_press_count+1)^(0+128),w
  1508  0314  3019               	movlw	25
  1509  0315  1903               	skipnz
  1510  0316  0246               	subwf	_c_press_count^(0+128),w
  1511  0317  1C03               	skipc
  1512  0318  2B1F               	goto	l1702
  1513                           
  1514                           ;HEALTH_IOT.c: 175: uart_txs("HIGH PRESS ");
  1515  0319  302D               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  1516  031A  1283               	bcf	3,5	;RP0=0, select bank0
  1517  031B  1303               	bcf	3,6	;RP1=0, select bank0
  1518  031C  00A1               	movwf	uart_txs@st
  1519  031D  3080               	movlw	128
  1520  031E  2B2F               	goto	L4
  1521  031F                     l1702:	
  1522                           ;HEALTH_IOT.c: 176: }
  1523                           
  1524                           
  1525                           ;HEALTH_IOT.c: 177: else{
  1526                           ;HEALTH_IOT.c: 178: uart_txs("R:");
  1527  031F  306A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1528  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1530  0322  00A1               	movwf	uart_txs@st
  1531  0323  3080               	movlw	128
  1532  0324  00A2               	movwf	uart_txs@st+1
  1533  0325  120A  118A  25D6  120A  118A  	fcall	_uart_txs
  1534                           
  1535                           ;HEALTH_IOT.c: 179: uart_txs(p);
  1536  032A  30AC               	movlw	(low (main@p| 0))& (0+255)
  1537  032B  1283               	bcf	3,5	;RP0=0, select bank0
  1538  032C  1303               	bcf	3,6	;RP1=0, select bank0
  1539  032D  00A1               	movwf	uart_txs@st
  1540  032E  3000               	movlw	0
  1541  032F                     L4:	
  1542  032F  00A2               	movwf	uart_txs@st+1
  1543  0330  120A  118A  25D6  120A  118A  	fcall	_uart_txs
  1544                           
  1545                           ;HEALTH_IOT.c: 180: }
  1546                           ;HEALTH_IOT.c: 181: uart_txc(0x23);
  1547  0335  3023               	movlw	35
  1548  0336  120A  158A  26A0  120A  118A  	fcall	_uart_txc
  1549                           
  1550                           ;HEALTH_IOT.c: 182: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1551  033B  301A               	movlw	26
  1552  033C  1283               	bcf	3,5	;RP0=0, select bank0
  1553  033D  1303               	bcf	3,6	;RP1=0, select bank0
  1554  033E  00CC               	movwf	??_main+2
  1555  033F  305E               	movlw	94
  1556  0340  00CB               	movwf	??_main+1
  1557  0341  306D               	movlw	109
  1558  0342  00CA               	movwf	??_main
  1559  0343                     u1837:	
  1560  0343  0BCA               	decfsz	??_main,f
  1561  0344  2B43               	goto	u1837
  1562  0345  0BCB               	decfsz	??_main+1,f
  1563  0346  2B43               	goto	u1837
  1564  0347  0BCC               	decfsz	??_main+2,f
  1565  0348  2B43               	goto	u1837
  1566  0349  2B4A               	nop2
  1567  034A  288C               	goto	l1616
  1568  034B                     __end_of_main:	
  1569                           
  1570                           	psect	text1
  1571  05D6                     __ptext1:	
  1572 ;; *************** function _uart_txs *****************
  1573 ;; Defined at:
  1574 ;;		line 45 in file "HEALTH_IOT.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  st              2    1[BANK0 ] PTR unsigned char 
  1577 ;;		 -> STR_21(3), STR_20(12), STR_19(3), STR_18(11), 
  1578 ;;		 -> STR_17(3), STR_16(11), main@p(10), main@h(10), 
  1579 ;;		 -> main@t(10), 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1591 ;;      Params:         0       2       0       0       0
  1592 ;;      Locals:         0       0       0       0       0
  1593 ;;      Temps:          0       0       0       0       0
  1594 ;;      Totals:         0       2       0       0       0
  1595 ;;Total ram usage:        2 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    3
  1598 ;; This function calls:
  1599 ;;		_uart_txc
  1600 ;; This function is called by:
  1601 ;;		_main
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           
  1606                           ;psect for function _uart_txs
  1607  05D6                     _uart_txs:	
  1608  05D6                     l1390:	
  1609                           ;HEALTH_IOT.c: 46: while(*st)
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in _uart_txs: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1613                           
  1614  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1615  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1616  05D8  0822               	movf	uart_txs@st+1,w
  1617  05D9  00FF               	movwf	127
  1618  05DA  0821               	movf	uart_txs@st,w
  1619  05DB  0084               	movwf	4
  1620  05DC  120A  118A  2600  120A  118A  	fcall	stringtab
  1621  05E1  3A00               	xorlw	0
  1622  05E2  1903               	btfsc	3,2
  1623  05E3  0008               	return
  1624                           
  1625                           ;HEALTH_IOT.c: 47: uart_txc(*st++);
  1626  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1627  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1628  05E6  0822               	movf	uart_txs@st+1,w
  1629  05E7  00FF               	movwf	127
  1630  05E8  0821               	movf	uart_txs@st,w
  1631  05E9  0084               	movwf	4
  1632  05EA  120A  118A  2600  120A  118A  	fcall	stringtab
  1633  05EF  120A  158A  26A0  120A  118A  	fcall	_uart_txc
  1634  05F4  3001               	movlw	1
  1635  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  1636  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  1637  05F7  07A1               	addwf	uart_txs@st,f
  1638  05F8  1803               	skipnc
  1639  05F9  0AA2               	incf	uart_txs@st+1,f
  1640  05FA  2DD6               	goto	l1390
  1641  05FB                     __end_of_uart_txs:	
  1642                           
  1643                           	psect	text2
  1644  0EA0                     __ptext2:	
  1645 ;; *************** function _uart_txc *****************
  1646 ;; Defined at:
  1647 ;;		line 40 in file "HEALTH_IOT.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  ch              1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  ch              1    0[BANK0 ] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1661 ;;      Params:         0       0       0       0       0
  1662 ;;      Locals:         0       1       0       0       0
  1663 ;;      Temps:          0       0       0       0       0
  1664 ;;      Totals:         0       1       0       0       0
  1665 ;;Total ram usage:        1 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    2
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_uart_txs
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _uart_txc
  1678  0EA0                     _uart_txc:	
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _uart_txc: [wreg]
  1682                           ;uart_txc@ch stored from wreg
  1683  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  1684  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  1685  0EA2  00A0               	movwf	uart_txc@ch
  1686  0EA3                     l131:	
  1687                           ;HEALTH_IOT.c: 41: while(!TXIF);
  1688                           
  1689  0EA3  1E0C               	btfss	12,4	;volatile
  1690  0EA4  2EA3               	goto	l131
  1691                           
  1692                           ;HEALTH_IOT.c: 42: TXREG = ch;
  1693  0EA5  0820               	movf	uart_txc@ch,w
  1694  0EA6  0099               	movwf	25	;volatile
  1695  0EA7                     l134:	
  1696                           ;HEALTH_IOT.c: 43: while(!TRMT);
  1697                           
  1698  0EA7  1683               	bsf	3,5	;RP0=1, select bank1
  1699  0EA8  1303               	bcf	3,6	;RP1=0, select bank1
  1700  0EA9  1898               	btfsc	24,1	;volatile
  1701  0EAA  0008               	return
  1702  0EAB  2EA7               	goto	l134
  1703  0EAC                     __end_of_uart_txc:	
  1704                           
  1705                           	psect	text3
  1706  0EBB                     __ptext3:	
  1707 ;; *************** function _uart_init *****************
  1708 ;; Defined at:
  1709 ;;		line 28 in file "HEALTH_IOT.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1723 ;;      Params:         0       0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0
  1726 ;;      Totals:         0       0       0       0       0
  1727 ;;Total ram usage:        0 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    2
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           
  1738                           ;psect for function _uart_init
  1739  0EBB                     _uart_init:	
  1740                           
  1741                           ;HEALTH_IOT.c: 29: TRISC6 = 0;
  1742                           
  1743                           ;incstack = 0
  1744                           ; Regs used in _uart_init: [wreg]
  1745  0EBB  1683               	bsf	3,5	;RP0=1, select bank1
  1746  0EBC  1303               	bcf	3,6	;RP1=0, select bank1
  1747  0EBD  1307               	bcf	7,6	;volatile
  1748                           
  1749                           ;HEALTH_IOT.c: 30: TRISC7 = 1;
  1750  0EBE  1787               	bsf	7,7	;volatile
  1751                           
  1752                           ;HEALTH_IOT.c: 31: SPBRG = ((20000000/16)/9600) - 1;
  1753  0EBF  3081               	movlw	129
  1754  0EC0  0099               	movwf	25	;volatile
  1755                           
  1756                           ;HEALTH_IOT.c: 32: BRGH = 1;
  1757  0EC1  1518               	bsf	24,2	;volatile
  1758                           
  1759                           ;HEALTH_IOT.c: 33: SYNC = 0;
  1760  0EC2  1218               	bcf	24,4	;volatile
  1761                           
  1762                           ;HEALTH_IOT.c: 34: SPEN = 1;
  1763  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  1764  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  1765  0EC5  1798               	bsf	24,7	;volatile
  1766                           
  1767                           ;HEALTH_IOT.c: 35: TXEN = 1;
  1768  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  1769  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  1770  0EC8  1698               	bsf	24,5	;volatile
  1771                           
  1772                           ;HEALTH_IOT.c: 36: CREN = 1;
  1773  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0ECB  1618               	bsf	24,4	;volatile
  1776  0ECC  0008               	return
  1777  0ECD                     __end_of_uart_init:	
  1778                           
  1779                           	psect	text4
  1780  0EAC                     __ptext4:	
  1781 ;; *************** function _timer1_init *****************
  1782 ;; Defined at:
  1783 ;;		line 77 in file "HEALTH_IOT.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1797 ;;      Params:         0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    2
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function _timer1_init
  1813  0EAC                     _timer1_init:	
  1814                           
  1815                           ;HEALTH_IOT.c: 78: TMR1H = 0x00;
  1816                           
  1817                           ;incstack = 0
  1818                           ; Regs used in _timer1_init: [status,2]
  1819  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0EAE  018F               	clrf	15	;volatile
  1822                           
  1823                           ;HEALTH_IOT.c: 79: TMR1L = 0x00;
  1824  0EAF  018E               	clrf	14	;volatile
  1825                           
  1826                           ;HEALTH_IOT.c: 80: PIR1bits.TMR1IF = 0;
  1827  0EB0  100C               	bcf	12,0	;volatile
  1828                           
  1829                           ;HEALTH_IOT.c: 81: T1CONbits.TMR1CS = 0;
  1830  0EB1  1090               	bcf	16,1	;volatile
  1831                           
  1832                           ;HEALTH_IOT.c: 82: T1CONbits.T1CKPS0 = 1;
  1833  0EB2  1610               	bsf	16,4	;volatile
  1834                           
  1835                           ;HEALTH_IOT.c: 83: T1CONbits.T1CKPS1 = 1;
  1836  0EB3  1690               	bsf	16,5	;volatile
  1837                           
  1838                           ;HEALTH_IOT.c: 84: PIE1bits.TMR1IE = 1;
  1839  0EB4  1683               	bsf	3,5	;RP0=1, select bank1
  1840  0EB5  1303               	bcf	3,6	;RP1=0, select bank1
  1841  0EB6  140C               	bsf	12,0	;volatile
  1842                           
  1843                           ;HEALTH_IOT.c: 85: T1CONbits.TMR1ON = 1;
  1844  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0EB9  1410               	bsf	16,0	;volatile
  1847  0EBA  0008               	return
  1848  0EBB                     __end_of_timer1_init:	
  1849                           
  1850                           	psect	text5
  1851  034B                     __ptext5:	
  1852 ;; *************** function _sprintf *****************
  1853 ;; Defined at:
  1854 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  sp              1    wreg     PTR unsigned char 
  1857 ;;		 -> main@p(10), main@h(10), main@t(10), 
  1858 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1859 ;;		 -> STR_15(3), STR_13(3), STR_11(4), STR_8(4), 
  1860 ;;		 -> STR_5(4), 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  1863 ;;		 -> main@p(10), main@h(10), main@t(10), 
  1864 ;;  tmpval          4    0        struct .
  1865 ;;  val             2   23[BANK0 ] unsigned int 
  1866 ;;  cp              2    0        PTR const unsigned char 
  1867 ;;  len             2    0        unsigned int 
  1868 ;;  c               1   26[BANK0 ] char 
  1869 ;;  flag            1   22[BANK0 ] unsigned char 
  1870 ;;  ap              1   21[BANK0 ] PTR void [1]
  1871 ;;		 -> ?_sprintf(2), 
  1872 ;;  prec            1   20[BANK0 ] char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  2   14[BANK0 ] int 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       3       0       0       0
  1883 ;;      Locals:         0       7       0       0       0
  1884 ;;      Temps:          0       3       0       0       0
  1885 ;;      Totals:         0      13       0       0       0
  1886 ;;Total ram usage:       13 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		___lwdiv
  1891 ;;		___lwmod
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _sprintf
  1899  034B                     _sprintf:	
  1900                           
  1901                           ;incstack = 0
  1902                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1903                           ;sprintf@sp stored from wreg
  1904  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1905  034C  1303               	bcf	3,6	;RP1=0, select bank0
  1906  034D  00B9               	movwf	sprintf@sp
  1907                           
  1908                           ;doprnt.c: 494: va_list ap;
  1909                           ;doprnt.c: 499: signed char c;
  1910                           ;doprnt.c: 506: signed char prec;
  1911                           ;doprnt.c: 508: unsigned char flag;
  1912                           ;doprnt.c: 523: union {
  1913                           ;doprnt.c: 524: unsigned long vd;
  1914                           ;doprnt.c: 525: double integ;
  1915                           ;doprnt.c: 526: } tmpval;
  1916                           ;doprnt.c: 528: unsigned int val;
  1917                           ;doprnt.c: 529: unsigned len;
  1918                           ;doprnt.c: 530: const char * cp;
  1919                           ;doprnt.c: 533: *ap = __va_start();
  1920  034E  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1921  034F  00B1               	movwf	??_sprintf
  1922  0350  0831               	movf	??_sprintf,w
  1923  0351  00B5               	movwf	sprintf@ap
  1924  0352                     l1480:	
  1925                           ;doprnt.c: 536: while(c = *f++) {
  1926                           
  1927  0352  3001               	movlw	1
  1928  0353  07AE               	addwf	sprintf@f,f
  1929  0354  30FF               	movlw	-1
  1930  0355  072E               	addwf	sprintf@f,w
  1931  0356  0084               	movwf	4
  1932  0357  120A  118A  260A  120A  118A  	fcall	stringdir
  1933  035C  00B1               	movwf	??_sprintf
  1934  035D  0831               	movf	??_sprintf,w
  1935  035E  00BA               	movwf	sprintf@c
  1936  035F  083A               	movf	sprintf@c,w
  1937  0360  1903               	btfsc	3,2
  1938  0361  2C31               	goto	l1482
  1939                           
  1940                           ;doprnt.c: 538: if(c != '%')
  1941  0362  3025               	movlw	37
  1942  0363  063A               	xorwf	sprintf@c,w
  1943  0364  1903               	btfsc	3,2
  1944  0365  2B72               	goto	l1432
  1945                           
  1946                           ;doprnt.c: 540: {
  1947                           ;doprnt.c: 541: ((*sp++ = (c)));
  1948  0366  083A               	movf	sprintf@c,w
  1949  0367  00B1               	movwf	??_sprintf
  1950  0368  0839               	movf	sprintf@sp,w
  1951  0369  0084               	movwf	4
  1952  036A  0831               	movf	??_sprintf,w
  1953  036B  1383               	bcf	3,7	;select IRP bank0
  1954  036C  0080               	movwf	0
  1955  036D  3001               	movlw	1
  1956  036E  00B1               	movwf	??_sprintf
  1957  036F  0831               	movf	??_sprintf,w
  1958  0370  07B9               	addwf	sprintf@sp,f
  1959                           
  1960                           ;doprnt.c: 542: continue;
  1961  0371  2B52               	goto	l1480
  1962  0372                     l1432:	
  1963                           
  1964                           ;doprnt.c: 543: }
  1965                           ;doprnt.c: 548: flag = 0;
  1966  0372  01B6               	clrf	sprintf@flag
  1967                           
  1968                           ;doprnt.c: 635: switch(c = *f++) {
  1969  0373  2B76               	goto	l1436
  1970  0374                     l208:	
  1971                           ;doprnt.c: 817: case 'u':
  1972                           
  1973                           ;doprnt.c: 813: continue;
  1974                           
  1975                           ;doprnt.c: 802: default:
  1976                           
  1977                           ;doprnt.c: 698: case 'i':
  1978                           ;doprnt.c: 699: break;
  1979                           
  1980                           ;doprnt.c: 697: case 'd':
  1981                           
  1982                           ;doprnt.c: 638: goto alldone;
  1983                           
  1984                           ;doprnt.c: 637: case 0:
  1985                           
  1986                           
  1987                           ;doprnt.c: 818: flag |= 0x40;
  1988  0374  1736               	bsf	sprintf@flag,6
  1989                           
  1990                           ;doprnt.c: 822: }
  1991                           
  1992                           ;doprnt.c: 819: break;
  1993  0375  2B8E               	goto	l206
  1994  0376                     l1436:	
  1995  0376  3001               	movlw	1
  1996  0377  07AE               	addwf	sprintf@f,f
  1997  0378  30FF               	movlw	-1
  1998  0379  072E               	addwf	sprintf@f,w
  1999  037A  0084               	movwf	4
  2000  037B  120A  118A  260A  120A  118A  	fcall	stringdir
  2001  0380  00BA               	movwf	sprintf@c
  2002                           
  2003                           ; Switch size 1, requested type "space"
  2004                           ; Number of cases is 4, Range of values is 0 to 117
  2005                           ; switch strategies available:
  2006                           ; Name         Instructions Cycles
  2007                           ; simple_byte           13     7 (average)
  2008                           ; jumptable            260     6 (fixed)
  2009                           ;	Chosen strategy is simple_byte
  2010  0381  3A00               	xorlw	0	; case 0
  2011  0382  1903               	skipnz
  2012  0383  2C31               	goto	l1482
  2013  0384  3A64               	xorlw	100	; case 100
  2014  0385  1903               	skipnz
  2015  0386  2B8E               	goto	l206
  2016  0387  3A0D               	xorlw	13	; case 105
  2017  0388  1903               	skipnz
  2018  0389  2B8E               	goto	l206
  2019  038A  3A1C               	xorlw	28	; case 117
  2020  038B  1903               	skipnz
  2021  038C  2B74               	goto	l208
  2022  038D  2B52               	goto	l1480
  2023  038E                     l206:	
  2024                           
  2025                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2026  038E  1B36               	btfsc	sprintf@flag,6
  2027  038F  2BA8               	goto	l1448
  2028                           
  2029                           ;doprnt.c: 1253: {
  2030                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2031  0390  0835               	movf	sprintf@ap,w
  2032  0391  0084               	movwf	4
  2033  0392  1383               	bcf	3,7	;select IRP bank0
  2034  0393  0800               	movf	0,w
  2035  0394  00B7               	movwf	sprintf@val
  2036  0395  0A84               	incf	4,f
  2037  0396  0800               	movf	0,w
  2038  0397  00B8               	movwf	sprintf@val+1
  2039  0398  3002               	movlw	2
  2040  0399  00B1               	movwf	??_sprintf
  2041  039A  0831               	movf	??_sprintf,w
  2042  039B  07B5               	addwf	sprintf@ap,f
  2043                           
  2044                           ;doprnt.c: 1261: if((int)val < 0) {
  2045  039C  1FB8               	btfss	sprintf@val+1,7
  2046  039D  2BB4               	goto	l1452
  2047                           
  2048                           ;doprnt.c: 1262: flag |= 0x03;
  2049  039E  3003               	movlw	3
  2050  039F  00B1               	movwf	??_sprintf
  2051  03A0  0831               	movf	??_sprintf,w
  2052  03A1  04B6               	iorwf	sprintf@flag,f
  2053                           
  2054                           ;doprnt.c: 1263: val = -val;
  2055  03A2  09B7               	comf	sprintf@val,f
  2056  03A3  09B8               	comf	sprintf@val+1,f
  2057  03A4  0AB7               	incf	sprintf@val,f
  2058  03A5  1903               	skipnz
  2059  03A6  0AB8               	incf	sprintf@val+1,f
  2060                           
  2061                           ;doprnt.c: 1264: }
  2062                           ;doprnt.c: 1266: }
  2063  03A7  2BB4               	goto	l1452
  2064  03A8                     l1448:	
  2065                           
  2066                           ;doprnt.c: 1268: else
  2067                           ;doprnt.c: 1273: {
  2068                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2069  03A8  0835               	movf	sprintf@ap,w
  2070  03A9  0084               	movwf	4
  2071  03AA  1383               	bcf	3,7	;select IRP bank0
  2072  03AB  0800               	movf	0,w
  2073  03AC  00B7               	movwf	sprintf@val
  2074  03AD  0A84               	incf	4,f
  2075  03AE  0800               	movf	0,w
  2076  03AF  00B8               	movwf	sprintf@val+1
  2077  03B0  3002               	movlw	2
  2078  03B1  00B1               	movwf	??_sprintf
  2079  03B2  0831               	movf	??_sprintf,w
  2080  03B3  07B5               	addwf	sprintf@ap,f
  2081  03B4                     l1452:	
  2082                           
  2083                           ;doprnt.c: 1287: }
  2084                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2085  03B4  01BA               	clrf	sprintf@c
  2086  03B5  0ABA               	incf	sprintf@c,f
  2087  03B6  3005               	movlw	5
  2088  03B7  063A               	xorwf	sprintf@c,w
  2089  03B8  1903               	btfsc	3,2
  2090  03B9  2BDB               	goto	l1464
  2091  03BA                     l1458:	
  2092                           
  2093                           ;doprnt.c: 1306: if(val < dpowers[c])
  2094  03BA  083A               	movf	sprintf@c,w
  2095  03BB  00B1               	movwf	??_sprintf
  2096  03BC  0731               	addwf	??_sprintf,w
  2097  03BD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2098  03BE  0084               	movwf	4
  2099  03BF  120A  118A  260A  120A  118A  	fcall	stringdir
  2100  03C4  00B2               	movwf	??_sprintf+1
  2101  03C5  120A  118A  260A  120A  118A  	fcall	stringdir
  2102  03CA  00B3               	movwf	??_sprintf+2
  2103  03CB  0833               	movf	??_sprintf+2,w
  2104  03CC  0238               	subwf	sprintf@val+1,w
  2105  03CD  1D03               	skipz
  2106  03CE  2BD1               	goto	u1395
  2107  03CF  0832               	movf	??_sprintf+1,w
  2108  03D0  0237               	subwf	sprintf@val,w
  2109  03D1                     u1395:	
  2110  03D1  1C03               	btfss	3,0
  2111  03D2  2BDB               	goto	l1464
  2112                           
  2113                           ;doprnt.c: 1307: break;
  2114  03D3  3001               	movlw	1
  2115  03D4  00B1               	movwf	??_sprintf
  2116  03D5  0831               	movf	??_sprintf,w
  2117  03D6  07BA               	addwf	sprintf@c,f
  2118  03D7  3005               	movlw	5
  2119  03D8  063A               	xorwf	sprintf@c,w
  2120  03D9  1D03               	btfss	3,2
  2121  03DA  2BBA               	goto	l1458
  2122  03DB                     l1464:	
  2123                           
  2124                           ;doprnt.c: 1422: {
  2125                           ;doprnt.c: 1438: if(flag & 0x03)
  2126  03DB  0836               	movf	sprintf@flag,w
  2127  03DC  3903               	andlw	3
  2128  03DD  1903               	btfsc	3,2
  2129  03DE  2BEA               	goto	l1470
  2130                           
  2131                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2132  03DF  302D               	movlw	45
  2133  03E0  00B1               	movwf	??_sprintf
  2134  03E1  0839               	movf	sprintf@sp,w
  2135  03E2  0084               	movwf	4
  2136  03E3  0831               	movf	??_sprintf,w
  2137  03E4  1383               	bcf	3,7	;select IRP bank0
  2138  03E5  0080               	movwf	0
  2139  03E6  3001               	movlw	1
  2140  03E7  00B1               	movwf	??_sprintf
  2141  03E8  0831               	movf	??_sprintf,w
  2142  03E9  07B9               	addwf	sprintf@sp,f
  2143  03EA                     l1470:	
  2144                           
  2145                           ;doprnt.c: 1469: }
  2146                           ;doprnt.c: 1472: prec = c;
  2147  03EA  083A               	movf	sprintf@c,w
  2148  03EB  00B1               	movwf	??_sprintf
  2149  03EC  0831               	movf	??_sprintf,w
  2150  03ED  00B4               	movwf	sprintf@prec
  2151  03EE                     l1478:	
  2152                           ;doprnt.c: 1474: while(prec--) {
  2153                           
  2154  03EE  30FF               	movlw	255
  2155  03EF  00B1               	movwf	??_sprintf
  2156  03F0  0831               	movf	??_sprintf,w
  2157  03F1  07B4               	addwf	sprintf@prec,f
  2158  03F2  0A34               	incf	sprintf@prec,w
  2159  03F3  1903               	btfsc	3,2
  2160  03F4  2B52               	goto	l1480
  2161                           
  2162                           ;doprnt.c: 1478: {
  2163                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2164  03F5  300A               	movlw	10
  2165  03F6  00A8               	movwf	___lwmod@divisor
  2166  03F7  3000               	movlw	0
  2167  03F8  00A9               	movwf	___lwmod@divisor+1
  2168  03F9  0834               	movf	sprintf@prec,w
  2169  03FA  00B1               	movwf	??_sprintf
  2170  03FB  0731               	addwf	??_sprintf,w
  2171  03FC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2172  03FD  0084               	movwf	4
  2173  03FE  120A  118A  260A  120A  118A  	fcall	stringdir
  2174  0403  00A0               	movwf	___lwdiv@divisor
  2175  0404  120A  118A  260A  120A  118A  	fcall	stringdir
  2176  0409  00A1               	movwf	___lwdiv@divisor+1
  2177  040A  0838               	movf	sprintf@val+1,w
  2178  040B  00A3               	movwf	___lwdiv@dividend+1
  2179  040C  0837               	movf	sprintf@val,w
  2180  040D  00A2               	movwf	___lwdiv@dividend
  2181  040E  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  2182  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0414  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0415  0821               	movf	?___lwdiv+1,w
  2185  0416  00AB               	movwf	___lwmod@dividend+1
  2186  0417  0820               	movf	?___lwdiv,w
  2187  0418  00AA               	movwf	___lwmod@dividend
  2188  0419  120A  158A  2751  120A  118A  	fcall	___lwmod
  2189  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2190  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0420  0828               	movf	?___lwmod,w
  2192  0421  3E30               	addlw	48
  2193  0422  00B2               	movwf	??_sprintf+1
  2194  0423  0832               	movf	??_sprintf+1,w
  2195  0424  00BA               	movwf	sprintf@c
  2196                           
  2197                           ;doprnt.c: 1523: }
  2198                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2199  0425  083A               	movf	sprintf@c,w
  2200  0426  00B1               	movwf	??_sprintf
  2201  0427  0839               	movf	sprintf@sp,w
  2202  0428  0084               	movwf	4
  2203  0429  0831               	movf	??_sprintf,w
  2204  042A  1383               	bcf	3,7	;select IRP bank0
  2205  042B  0080               	movwf	0
  2206  042C  3001               	movlw	1
  2207  042D  00B1               	movwf	??_sprintf
  2208  042E  0831               	movf	??_sprintf,w
  2209  042F  07B9               	addwf	sprintf@sp,f
  2210  0430  2BEE               	goto	l1478
  2211  0431                     l1482:	
  2212                           ;doprnt.c: 1525: }
  2213                           ;doprnt.c: 1533: }
  2214                           ;doprnt.c: 1535: alldone:
  2215                           
  2216                           
  2217                           ;doprnt.c: 1538: *sp = 0;
  2218  0431  0839               	movf	sprintf@sp,w
  2219  0432  0084               	movwf	4
  2220  0433  1383               	bcf	3,7	;select IRP bank0
  2221  0434  0180               	clrf	0
  2222  0435  0008               	return
  2223  0436                     __end_of_sprintf:	
  2224                           ;doprnt.c: 1540: return 0;
  2225                           ;	Return value of _sprintf is never used
  2226                           
  2227                           
  2228                           	psect	text6
  2229  0F51                     __ptext6:	
  2230 ;; *************** function ___lwmod *****************
  2231 ;; Defined at:
  2232 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  divisor         2    8[BANK0 ] unsigned int 
  2235 ;;  dividend        2   10[BANK0 ] unsigned int 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  counter         1   13[BANK0 ] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  2    8[BANK0 ] unsigned int 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2247 ;;      Params:         0       4       0       0       0
  2248 ;;      Locals:         0       1       0       0       0
  2249 ;;      Temps:          0       1       0       0       0
  2250 ;;      Totals:         0       6       0       0       0
  2251 ;;Total ram usage:        6 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    2
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_sprintf
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function ___lwmod
  2263  0F51                     ___lwmod:	
  2264                           
  2265                           ;incstack = 0
  2266                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2267  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  2268  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  2269  0F53  0828               	movf	___lwmod@divisor,w
  2270  0F54  0429               	iorwf	___lwmod@divisor+1,w
  2271  0F55  1903               	btfsc	3,2
  2272  0F56  2F80               	goto	l1326
  2273  0F57  01AD               	clrf	___lwmod@counter
  2274  0F58  0AAD               	incf	___lwmod@counter,f
  2275  0F59                     l1316:	
  2276  0F59  1BA9               	btfsc	___lwmod@divisor+1,7
  2277  0F5A  2F67               	goto	l1318
  2278  0F5B  3001               	movlw	1
  2279  0F5C                     u1195:	
  2280  0F5C  1003               	clrc
  2281  0F5D  0DA8               	rlf	___lwmod@divisor,f
  2282  0F5E  0DA9               	rlf	___lwmod@divisor+1,f
  2283  0F5F  3EFF               	addlw	-1
  2284  0F60  1D03               	skipz
  2285  0F61  2F5C               	goto	u1195
  2286  0F62  3001               	movlw	1
  2287  0F63  00AC               	movwf	??___lwmod
  2288  0F64  082C               	movf	??___lwmod,w
  2289  0F65  07AD               	addwf	___lwmod@counter,f
  2290  0F66  2F59               	goto	l1316
  2291  0F67                     l1318:	
  2292  0F67  0829               	movf	___lwmod@divisor+1,w
  2293  0F68  022B               	subwf	___lwmod@dividend+1,w
  2294  0F69  1D03               	skipz
  2295  0F6A  2F6D               	goto	u1215
  2296  0F6B  0828               	movf	___lwmod@divisor,w
  2297  0F6C  022A               	subwf	___lwmod@dividend,w
  2298  0F6D                     u1215:	
  2299  0F6D  1C03               	skipc
  2300  0F6E  2F75               	goto	l1322
  2301  0F6F  0828               	movf	___lwmod@divisor,w
  2302  0F70  02AA               	subwf	___lwmod@dividend,f
  2303  0F71  0829               	movf	___lwmod@divisor+1,w
  2304  0F72  1C03               	skipc
  2305  0F73  03AB               	decf	___lwmod@dividend+1,f
  2306  0F74  02AB               	subwf	___lwmod@dividend+1,f
  2307  0F75                     l1322:	
  2308  0F75  3001               	movlw	1
  2309  0F76                     u1225:	
  2310  0F76  1003               	clrc
  2311  0F77  0CA9               	rrf	___lwmod@divisor+1,f
  2312  0F78  0CA8               	rrf	___lwmod@divisor,f
  2313  0F79  3EFF               	addlw	-1
  2314  0F7A  1D03               	skipz
  2315  0F7B  2F76               	goto	u1225
  2316  0F7C  3001               	movlw	1
  2317  0F7D  02AD               	subwf	___lwmod@counter,f
  2318  0F7E  1D03               	btfss	3,2
  2319  0F7F  2F67               	goto	l1318
  2320  0F80                     l1326:	
  2321  0F80  082B               	movf	___lwmod@dividend+1,w
  2322  0F81  00A9               	movwf	?___lwmod+1
  2323  0F82  082A               	movf	___lwmod@dividend,w
  2324  0F83  00A8               	movwf	?___lwmod
  2325  0F84  0008               	return
  2326  0F85                     __end_of___lwmod:	
  2327                           
  2328                           	psect	text7
  2329  0FC2                     __ptext7:	
  2330 ;; *************** function ___lwdiv *****************
  2331 ;; Defined at:
  2332 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  divisor         2    0[BANK0 ] unsigned int 
  2335 ;;  dividend        2    2[BANK0 ] unsigned int 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  quotient        2    5[BANK0 ] unsigned int 
  2338 ;;  counter         1    7[BANK0 ] unsigned char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  2    0[BANK0 ] unsigned int 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2348 ;;      Params:         0       4       0       0       0
  2349 ;;      Locals:         0       3       0       0       0
  2350 ;;      Temps:          0       1       0       0       0
  2351 ;;      Totals:         0       8       0       0       0
  2352 ;;Total ram usage:        8 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    2
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_sprintf
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           
  2363                           ;psect for function ___lwdiv
  2364  0FC2                     ___lwdiv:	
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2368  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2369  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2370  0FC4  01A5               	clrf	___lwdiv@quotient
  2371  0FC5  01A6               	clrf	___lwdiv@quotient+1
  2372  0FC6  0820               	movf	___lwdiv@divisor,w
  2373  0FC7  0421               	iorwf	___lwdiv@divisor+1,w
  2374  0FC8  1903               	btfsc	3,2
  2375  0FC9  2FFB               	goto	l1304
  2376  0FCA  01A7               	clrf	___lwdiv@counter
  2377  0FCB  0AA7               	incf	___lwdiv@counter,f
  2378  0FCC                     l1292:	
  2379  0FCC  1BA1               	btfsc	___lwdiv@divisor+1,7
  2380  0FCD  2FDA               	goto	l1294
  2381  0FCE  3001               	movlw	1
  2382  0FCF                     u1125:	
  2383  0FCF  1003               	clrc
  2384  0FD0  0DA0               	rlf	___lwdiv@divisor,f
  2385  0FD1  0DA1               	rlf	___lwdiv@divisor+1,f
  2386  0FD2  3EFF               	addlw	-1
  2387  0FD3  1D03               	skipz
  2388  0FD4  2FCF               	goto	u1125
  2389  0FD5  3001               	movlw	1
  2390  0FD6  00A4               	movwf	??___lwdiv
  2391  0FD7  0824               	movf	??___lwdiv,w
  2392  0FD8  07A7               	addwf	___lwdiv@counter,f
  2393  0FD9  2FCC               	goto	l1292
  2394  0FDA                     l1294:	
  2395  0FDA  3001               	movlw	1
  2396  0FDB                     u1145:	
  2397  0FDB  1003               	clrc
  2398  0FDC  0DA5               	rlf	___lwdiv@quotient,f
  2399  0FDD  0DA6               	rlf	___lwdiv@quotient+1,f
  2400  0FDE  3EFF               	addlw	-1
  2401  0FDF  1D03               	skipz
  2402  0FE0  2FDB               	goto	u1145
  2403  0FE1  0821               	movf	___lwdiv@divisor+1,w
  2404  0FE2  0223               	subwf	___lwdiv@dividend+1,w
  2405  0FE3  1D03               	skipz
  2406  0FE4  2FE7               	goto	u1155
  2407  0FE5  0820               	movf	___lwdiv@divisor,w
  2408  0FE6  0222               	subwf	___lwdiv@dividend,w
  2409  0FE7                     u1155:	
  2410  0FE7  1C03               	skipc
  2411  0FE8  2FF0               	goto	l1300
  2412  0FE9  0820               	movf	___lwdiv@divisor,w
  2413  0FEA  02A2               	subwf	___lwdiv@dividend,f
  2414  0FEB  0821               	movf	___lwdiv@divisor+1,w
  2415  0FEC  1C03               	skipc
  2416  0FED  03A3               	decf	___lwdiv@dividend+1,f
  2417  0FEE  02A3               	subwf	___lwdiv@dividend+1,f
  2418  0FEF  1425               	bsf	___lwdiv@quotient,0
  2419  0FF0                     l1300:	
  2420  0FF0  3001               	movlw	1
  2421  0FF1                     u1165:	
  2422  0FF1  1003               	clrc
  2423  0FF2  0CA1               	rrf	___lwdiv@divisor+1,f
  2424  0FF3  0CA0               	rrf	___lwdiv@divisor,f
  2425  0FF4  3EFF               	addlw	-1
  2426  0FF5  1D03               	skipz
  2427  0FF6  2FF1               	goto	u1165
  2428  0FF7  3001               	movlw	1
  2429  0FF8  02A7               	subwf	___lwdiv@counter,f
  2430  0FF9  1D03               	btfss	3,2
  2431  0FFA  2FDA               	goto	l1294
  2432  0FFB                     l1304:	
  2433  0FFB  0826               	movf	___lwdiv@quotient+1,w
  2434  0FFC  00A1               	movwf	?___lwdiv+1
  2435  0FFD  0825               	movf	___lwdiv@quotient,w
  2436  0FFE  00A0               	movwf	?___lwdiv
  2437  0FFF  0008               	return
  2438  1000                     __end_of___lwdiv:	
  2439                           
  2440                           	psect	text8
  2441  0F1E                     __ptext8:	
  2442 ;; *************** function _adc_read *****************
  2443 ;; Defined at:
  2444 ;;		line 64 in file "HEALTH_IOT.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  channel         1    wreg     unsigned char 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  channel         1    4[BANK0 ] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  2    0[BANK0 ] unsigned int 
  2451 ;; Registers used:
  2452 ;;		wreg, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2458 ;;      Params:         0       2       0       0       0
  2459 ;;      Locals:         0       1       0       0       0
  2460 ;;      Temps:          0       2       0       0       0
  2461 ;;      Totals:         0       5       0       0       0
  2462 ;;Total ram usage:        5 bytes
  2463 ;; Hardware stack levels used:    1
  2464 ;; Hardware stack levels required when called:    2
  2465 ;; This function calls:
  2466 ;;		Nothing
  2467 ;; This function is called by:
  2468 ;;		_main
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           
  2473                           ;psect for function _adc_read
  2474  0F1E                     _adc_read:	
  2475                           
  2476                           ;incstack = 0
  2477                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  2478                           ;adc_read@channel stored from wreg
  2479  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  2480  0F1F  1303               	bcf	3,6	;RP1=0, select bank0
  2481  0F20  00A4               	movwf	adc_read@channel
  2482                           
  2483                           ;HEALTH_IOT.c: 65: if(channel > 7)
  2484  0F21  3008               	movlw	8
  2485  0F22  0224               	subwf	adc_read@channel,w
  2486  0F23  1C03               	skipc
  2487  0F24  2F28               	goto	l1400
  2488                           
  2489                           ;HEALTH_IOT.c: 66: return 0;
  2490  0F25  01A0               	clrf	?_adc_read
  2491  0F26  01A1               	clrf	?_adc_read+1
  2492  0F27  0008               	return
  2493  0F28                     l1400:	
  2494                           
  2495                           ;HEALTH_IOT.c: 68: ADCON0 &= 0xC5;
  2496  0F28  30C5               	movlw	197
  2497  0F29  00A2               	movwf	??_adc_read
  2498  0F2A  0822               	movf	??_adc_read,w
  2499  0F2B  059F               	andwf	31,f	;volatile
  2500                           
  2501                           ;HEALTH_IOT.c: 69: ADCON0 |= channel<<3;
  2502  0F2C  0824               	movf	adc_read@channel,w
  2503  0F2D  00A2               	movwf	??_adc_read
  2504  0F2E  3002               	movlw	2
  2505  0F2F                     u1335:	
  2506  0F2F  1003               	clrc
  2507  0F30  0DA2               	rlf	??_adc_read,f
  2508  0F31  3EFF               	addlw	-1
  2509  0F32  1D03               	skipz
  2510  0F33  2F2F               	goto	u1335
  2511  0F34  1003               	clrc
  2512  0F35  0D22               	rlf	??_adc_read,w
  2513  0F36  00A3               	movwf	??_adc_read+1
  2514  0F37  0823               	movf	??_adc_read+1,w
  2515  0F38  049F               	iorwf	31,f	;volatile
  2516                           
  2517                           ;HEALTH_IOT.c: 70: _delay((unsigned long)((2)*(20000000/4000.0)));
  2518  0F39  300D               	movlw	13
  2519  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  2520  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  2521  0F3C  00A3               	movwf	??_adc_read+1
  2522  0F3D  30FB               	movlw	251
  2523  0F3E  00A2               	movwf	??_adc_read
  2524  0F3F                     u1847:	
  2525  0F3F  0BA2               	decfsz	??_adc_read,f
  2526  0F40  2F3F               	goto	u1847
  2527  0F41  0BA3               	decfsz	??_adc_read+1,f
  2528  0F42  2F3F               	goto	u1847
  2529                           
  2530                           ;HEALTH_IOT.c: 71: GO_nDONE = 1;
  2531  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0F45  151F               	bsf	31,2	;volatile
  2534  0F46                     l158:	
  2535                           ;HEALTH_IOT.c: 72: while(GO_nDONE);
  2536                           
  2537  0F46  191F               	btfsc	31,2	;volatile
  2538  0F47  2F46               	goto	l158
  2539                           
  2540                           ;HEALTH_IOT.c: 73: return ((ADRESH<<8)+ADRESL);
  2541  0F48  081E               	movf	30,w	;volatile
  2542  0F49  00A1               	movwf	?_adc_read+1
  2543  0F4A  1683               	bsf	3,5	;RP0=1, select bank1
  2544  0F4B  1303               	bcf	3,6	;RP1=0, select bank1
  2545  0F4C  081E               	movf	30,w	;volatile
  2546  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0F4F  00A0               	movwf	?_adc_read
  2549  0F50  0008               	return
  2550  0F51                     __end_of_adc_read:	
  2551                           
  2552                           	psect	text9
  2553  0E8C                     __ptext9:	
  2554 ;; *************** function _adc_init *****************
  2555 ;; Defined at:
  2556 ;;		line 60 in file "HEALTH_IOT.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2570 ;;      Params:         0       0       0       0       0
  2571 ;;      Locals:         0       0       0       0       0
  2572 ;;      Temps:          0       0       0       0       0
  2573 ;;      Totals:         0       0       0       0       0
  2574 ;;Total ram usage:        0 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    2
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_main
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _adc_init
  2586  0E8C                     _adc_init:	
  2587                           
  2588                           ;HEALTH_IOT.c: 61: ADCON0 = 0x81;
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in _adc_init: [wreg]
  2592  0E8C  3081               	movlw	129
  2593  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  2594  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  2595  0E8F  009F               	movwf	31	;volatile
  2596                           
  2597                           ;HEALTH_IOT.c: 62: ADCON1 = 0xC0;
  2598  0E90  30C0               	movlw	192
  2599  0E91  1683               	bsf	3,5	;RP0=1, select bank1
  2600  0E92  1303               	bcf	3,6	;RP1=0, select bank1
  2601  0E93  009F               	movwf	31	;volatile
  2602  0E94  0008               	return
  2603  0E95                     __end_of_adc_init:	
  2604                           
  2605                           	psect	text10
  2606  0EE5                     __ptext10:	
  2607 ;; *************** function ___lwtoft *****************
  2608 ;; Defined at:
  2609 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  c               2    8[BANK0 ] unsigned int 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  3    8[BANK0 ] float 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0, pclath, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2623 ;;      Params:         0       3       0       0       0
  2624 ;;      Locals:         0       0       0       0       0
  2625 ;;      Temps:          0       1       0       0       0
  2626 ;;      Totals:         0       4       0       0       0
  2627 ;;Total ram usage:        4 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    3
  2630 ;; This function calls:
  2631 ;;		___ftpack
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function ___lwtoft
  2639  0EE5                     ___lwtoft:	
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2643  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0EE7  0828               	movf	___lwtoft@c,w
  2646  0EE8  00A0               	movwf	___ftpack@arg
  2647  0EE9  0829               	movf	___lwtoft@c+1,w
  2648  0EEA  00A1               	movwf	___ftpack@arg+1
  2649  0EEB  01A2               	clrf	___ftpack@arg+2
  2650  0EEC  308E               	movlw	142
  2651  0EED  00AB               	movwf	??___lwtoft
  2652  0EEE  082B               	movf	??___lwtoft,w
  2653  0EEF  00A3               	movwf	___ftpack@exp
  2654  0EF0  01A4               	clrf	___ftpack@sign
  2655  0EF1  120A  118A  2682   	fcall	___ftpack
  2656  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  2658  0EF6  0820               	movf	?___ftpack,w
  2659  0EF7  00A8               	movwf	?___lwtoft
  2660  0EF8  0821               	movf	?___ftpack+1,w
  2661  0EF9  00A9               	movwf	?___lwtoft+1
  2662  0EFA  0822               	movf	?___ftpack+2,w
  2663  0EFB  00AA               	movwf	?___lwtoft+2
  2664  0EFC  0008               	return
  2665  0EFD                     __end_of___lwtoft:	
  2666                           
  2667                           	psect	text11
  2668  0509                     __ptext11:	
  2669 ;; *************** function ___fttol *****************
  2670 ;; Defined at:
  2671 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  f1              3   28[BANK0 ] float 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  lval            4   37[BANK0 ] unsigned long 
  2676 ;;  exp1            1   41[BANK0 ] unsigned char 
  2677 ;;  sign1           1   36[BANK0 ] unsigned char 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  4   28[BANK0 ] long 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2687 ;;      Params:         0       4       0       0       0
  2688 ;;      Locals:         0       6       0       0       0
  2689 ;;      Temps:          0       4       0       0       0
  2690 ;;      Totals:         0      14       0       0       0
  2691 ;;Total ram usage:       14 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    2
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_main
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function ___fttol
  2703  0509                     ___fttol:	
  2704                           
  2705                           ;incstack = 0
  2706                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2707  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2708  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2709  050B  083C               	movf	___fttol@f1,w
  2710  050C  00C0               	movwf	??___fttol
  2711  050D  083D               	movf	___fttol@f1+1,w
  2712  050E  00C1               	movwf	??___fttol+1
  2713  050F  083E               	movf	___fttol@f1+2,w
  2714  0510  00C2               	movwf	??___fttol+2
  2715  0511  1003               	clrc
  2716  0512  0D41               	rlf	??___fttol+1,w
  2717  0513  0D42               	rlf	??___fttol+2,w
  2718  0514  00C3               	movwf	??___fttol+3
  2719  0515  0843               	movf	??___fttol+3,w
  2720  0516  00C9               	movwf	___fttol@exp1
  2721  0517  0849               	movf	___fttol@exp1,w
  2722  0518  1D03               	btfss	3,2
  2723  0519  2D23               	goto	l1556
  2724  051A  3000               	movlw	0
  2725  051B  00BF               	movwf	?___fttol+3
  2726  051C  3000               	movlw	0
  2727  051D  00BE               	movwf	?___fttol+2
  2728  051E  3000               	movlw	0
  2729  051F  00BD               	movwf	?___fttol+1
  2730  0520  3000               	movlw	0
  2731  0521  00BC               	movwf	?___fttol
  2732  0522  0008               	return
  2733  0523                     l1556:	
  2734  0523  083C               	movf	___fttol@f1,w
  2735  0524  00C0               	movwf	??___fttol
  2736  0525  083D               	movf	___fttol@f1+1,w
  2737  0526  00C1               	movwf	??___fttol+1
  2738  0527  083E               	movf	___fttol@f1+2,w
  2739  0528  00C2               	movwf	??___fttol+2
  2740  0529  3017               	movlw	23
  2741  052A                     u1635:	
  2742  052A  1003               	clrc
  2743  052B  0CC2               	rrf	??___fttol+2,f
  2744  052C  0CC1               	rrf	??___fttol+1,f
  2745  052D  0CC0               	rrf	??___fttol,f
  2746  052E  3EFF               	addlw	-1
  2747  052F  1D03               	skipz
  2748  0530  2D2A               	goto	u1635
  2749  0531  0840               	movf	??___fttol,w
  2750  0532  00C3               	movwf	??___fttol+3
  2751  0533  0843               	movf	??___fttol+3,w
  2752  0534  00C4               	movwf	___fttol@sign1
  2753  0535  17BD               	bsf	___fttol@f1+1,7
  2754  0536  30FF               	movlw	255
  2755  0537  05BC               	andwf	___fttol@f1,f
  2756  0538  30FF               	movlw	255
  2757  0539  05BD               	andwf	___fttol@f1+1,f
  2758  053A  3000               	movlw	0
  2759  053B  05BE               	andwf	___fttol@f1+2,f
  2760  053C  083C               	movf	___fttol@f1,w
  2761  053D  00C5               	movwf	___fttol@lval
  2762  053E  083D               	movf	___fttol@f1+1,w
  2763  053F  00C6               	movwf	___fttol@lval+1
  2764  0540  083E               	movf	___fttol@f1+2,w
  2765  0541  00C7               	movwf	___fttol@lval+2
  2766  0542  01C8               	clrf	___fttol@lval+3
  2767  0543  308E               	movlw	142
  2768  0544  02C9               	subwf	___fttol@exp1,f
  2769  0545  1FC9               	btfss	___fttol@exp1,7
  2770  0546  2D65               	goto	l1576
  2771  0547  0849               	movf	___fttol@exp1,w
  2772  0548  3A80               	xorlw	128
  2773  0549  3E8F               	addlw	143
  2774  054A  1803               	skipnc
  2775  054B  2D55               	goto	l1574
  2776  054C  3000               	movlw	0
  2777  054D  00BF               	movwf	?___fttol+3
  2778  054E  3000               	movlw	0
  2779  054F  00BE               	movwf	?___fttol+2
  2780  0550  3000               	movlw	0
  2781  0551  00BD               	movwf	?___fttol+1
  2782  0552  3000               	movlw	0
  2783  0553  00BC               	movwf	?___fttol
  2784  0554  0008               	return
  2785  0555                     l1574:	
  2786  0555  3001               	movlw	1
  2787  0556                     u1665:	
  2788  0556  1003               	clrc
  2789  0557  0CC8               	rrf	___fttol@lval+3,f
  2790  0558  0CC7               	rrf	___fttol@lval+2,f
  2791  0559  0CC6               	rrf	___fttol@lval+1,f
  2792  055A  0CC5               	rrf	___fttol@lval,f
  2793  055B  3EFF               	addlw	-1
  2794  055C  1D03               	skipz
  2795  055D  2D56               	goto	u1665
  2796  055E  3001               	movlw	1
  2797  055F  00C0               	movwf	??___fttol
  2798  0560  0840               	movf	??___fttol,w
  2799  0561  07C9               	addwf	___fttol@exp1,f
  2800  0562  1903               	btfsc	3,2
  2801  0563  2D80               	goto	l1584
  2802  0564  2D55               	goto	l1574
  2803  0565                     l1576:	
  2804  0565  3018               	movlw	24
  2805  0566  0249               	subwf	___fttol@exp1,w
  2806  0567  1C03               	skipc
  2807  0568  2D7D               	goto	l556
  2808  0569  3000               	movlw	0
  2809  056A  00BF               	movwf	?___fttol+3
  2810  056B  3000               	movlw	0
  2811  056C  00BE               	movwf	?___fttol+2
  2812  056D  3000               	movlw	0
  2813  056E  00BD               	movwf	?___fttol+1
  2814  056F  3000               	movlw	0
  2815  0570  00BC               	movwf	?___fttol
  2816  0571  0008               	return
  2817  0572                     l1582:	
  2818  0572  3001               	movlw	1
  2819  0573  00C0               	movwf	??___fttol
  2820  0574                     u1695:	
  2821  0574  1003               	clrc
  2822  0575  0DC5               	rlf	___fttol@lval,f
  2823  0576  0DC6               	rlf	___fttol@lval+1,f
  2824  0577  0DC7               	rlf	___fttol@lval+2,f
  2825  0578  0DC8               	rlf	___fttol@lval+3,f
  2826  0579  0BC0               	decfsz	??___fttol,f
  2827  057A  2D74               	goto	u1695
  2828  057B  3001               	movlw	1
  2829  057C  02C9               	subwf	___fttol@exp1,f
  2830  057D                     l556:	
  2831  057D  0849               	movf	___fttol@exp1,w
  2832  057E  1D03               	btfss	3,2
  2833  057F  2D72               	goto	l1582
  2834  0580                     l1584:	
  2835  0580  0844               	movf	___fttol@sign1,w
  2836  0581  1903               	btfsc	3,2
  2837  0582  2D8E               	goto	l1588
  2838  0583  09C5               	comf	___fttol@lval,f
  2839  0584  09C6               	comf	___fttol@lval+1,f
  2840  0585  09C7               	comf	___fttol@lval+2,f
  2841  0586  09C8               	comf	___fttol@lval+3,f
  2842  0587  0AC5               	incf	___fttol@lval,f
  2843  0588  1903               	skipnz
  2844  0589  0AC6               	incf	___fttol@lval+1,f
  2845  058A  1903               	skipnz
  2846  058B  0AC7               	incf	___fttol@lval+2,f
  2847  058C  1903               	skipnz
  2848  058D  0AC8               	incf	___fttol@lval+3,f
  2849  058E                     l1588:	
  2850  058E  0848               	movf	___fttol@lval+3,w
  2851  058F  00BF               	movwf	?___fttol+3
  2852  0590  0847               	movf	___fttol@lval+2,w
  2853  0591  00BE               	movwf	?___fttol+2
  2854  0592  0846               	movf	___fttol@lval+1,w
  2855  0593  00BD               	movwf	?___fttol+1
  2856  0594  0845               	movf	___fttol@lval,w
  2857  0595  00BC               	movwf	?___fttol
  2858  0596  0008               	return
  2859  0597                     __end_of___fttol:	
  2860                           
  2861                           	psect	text12
  2862  0436                     __ptext12:	
  2863 ;; *************** function ___ftmul *****************
  2864 ;; Defined at:
  2865 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  f1              3   12[BANK0 ] float 
  2868 ;;  f2              3   15[BANK0 ] float 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  2871 ;;  sign            1   27[BANK0 ] unsigned char 
  2872 ;;  cntr            1   26[BANK0 ] unsigned char 
  2873 ;;  exp             1   22[BANK0 ] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  3   12[BANK0 ] float 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         0       6       0       0       0
  2884 ;;      Locals:         0       6       0       0       0
  2885 ;;      Temps:          0       4       0       0       0
  2886 ;;      Totals:         0      16       0       0       0
  2887 ;;Total ram usage:       16 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    3
  2890 ;; This function calls:
  2891 ;;		___ftpack
  2892 ;; This function is called by:
  2893 ;;		_main
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           
  2898                           ;psect for function ___ftmul
  2899  0436                     ___ftmul:	
  2900                           
  2901                           ;incstack = 0
  2902                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2903  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2904  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2905  0438  082C               	movf	___ftmul@f1,w
  2906  0439  00B2               	movwf	??___ftmul
  2907  043A  082D               	movf	___ftmul@f1+1,w
  2908  043B  00B3               	movwf	??___ftmul+1
  2909  043C  082E               	movf	___ftmul@f1+2,w
  2910  043D  00B4               	movwf	??___ftmul+2
  2911  043E  1003               	clrc
  2912  043F  0D33               	rlf	??___ftmul+1,w
  2913  0440  0D34               	rlf	??___ftmul+2,w
  2914  0441  00B5               	movwf	??___ftmul+3
  2915  0442  0835               	movf	??___ftmul+3,w
  2916  0443  00B6               	movwf	___ftmul@exp
  2917  0444  0836               	movf	___ftmul@exp,w
  2918  0445  1D03               	btfss	3,2
  2919  0446  2C4E               	goto	l1506
  2920  0447  3000               	movlw	0
  2921  0448  00AC               	movwf	?___ftmul
  2922  0449  3000               	movlw	0
  2923  044A  00AD               	movwf	?___ftmul+1
  2924  044B  3000               	movlw	0
  2925  044C  00AE               	movwf	?___ftmul+2
  2926  044D  0008               	return
  2927  044E                     l1506:	
  2928  044E  082F               	movf	___ftmul@f2,w
  2929  044F  00B2               	movwf	??___ftmul
  2930  0450  0830               	movf	___ftmul@f2+1,w
  2931  0451  00B3               	movwf	??___ftmul+1
  2932  0452  0831               	movf	___ftmul@f2+2,w
  2933  0453  00B4               	movwf	??___ftmul+2
  2934  0454  1003               	clrc
  2935  0455  0D33               	rlf	??___ftmul+1,w
  2936  0456  0D34               	rlf	??___ftmul+2,w
  2937  0457  00B5               	movwf	??___ftmul+3
  2938  0458  0835               	movf	??___ftmul+3,w
  2939  0459  00BB               	movwf	___ftmul@sign
  2940  045A  083B               	movf	___ftmul@sign,w
  2941  045B  1D03               	btfss	3,2
  2942  045C  2C64               	goto	l1512
  2943  045D  3000               	movlw	0
  2944  045E  00AC               	movwf	?___ftmul
  2945  045F  3000               	movlw	0
  2946  0460  00AD               	movwf	?___ftmul+1
  2947  0461  3000               	movlw	0
  2948  0462  00AE               	movwf	?___ftmul+2
  2949  0463  0008               	return
  2950  0464                     l1512:	
  2951  0464  083B               	movf	___ftmul@sign,w
  2952  0465  3E7B               	addlw	123
  2953  0466  00B2               	movwf	??___ftmul
  2954  0467  0832               	movf	??___ftmul,w
  2955  0468  07B6               	addwf	___ftmul@exp,f
  2956  0469  082C               	movf	___ftmul@f1,w
  2957  046A  00B2               	movwf	??___ftmul
  2958  046B  082D               	movf	___ftmul@f1+1,w
  2959  046C  00B3               	movwf	??___ftmul+1
  2960  046D  082E               	movf	___ftmul@f1+2,w
  2961  046E  00B4               	movwf	??___ftmul+2
  2962  046F  3010               	movlw	16
  2963  0470                     u1505:	
  2964  0470  1003               	clrc
  2965  0471  0CB4               	rrf	??___ftmul+2,f
  2966  0472  0CB3               	rrf	??___ftmul+1,f
  2967  0473  0CB2               	rrf	??___ftmul,f
  2968  0474  3EFF               	addlw	-1
  2969  0475  1D03               	skipz
  2970  0476  2C70               	goto	u1505
  2971  0477  0832               	movf	??___ftmul,w
  2972  0478  00B5               	movwf	??___ftmul+3
  2973  0479  0835               	movf	??___ftmul+3,w
  2974  047A  00BB               	movwf	___ftmul@sign
  2975  047B  082F               	movf	___ftmul@f2,w
  2976  047C  00B2               	movwf	??___ftmul
  2977  047D  0830               	movf	___ftmul@f2+1,w
  2978  047E  00B3               	movwf	??___ftmul+1
  2979  047F  0831               	movf	___ftmul@f2+2,w
  2980  0480  00B4               	movwf	??___ftmul+2
  2981  0481  3010               	movlw	16
  2982  0482                     u1515:	
  2983  0482  1003               	clrc
  2984  0483  0CB4               	rrf	??___ftmul+2,f
  2985  0484  0CB3               	rrf	??___ftmul+1,f
  2986  0485  0CB2               	rrf	??___ftmul,f
  2987  0486  3EFF               	addlw	-1
  2988  0487  1D03               	skipz
  2989  0488  2C82               	goto	u1515
  2990  0489  0832               	movf	??___ftmul,w
  2991  048A  00B5               	movwf	??___ftmul+3
  2992  048B  0835               	movf	??___ftmul+3,w
  2993  048C  06BB               	xorwf	___ftmul@sign,f
  2994  048D  3080               	movlw	128
  2995  048E  00B2               	movwf	??___ftmul
  2996  048F  0832               	movf	??___ftmul,w
  2997  0490  05BB               	andwf	___ftmul@sign,f
  2998  0491  17AD               	bsf	___ftmul@f1+1,7
  2999  0492  17B0               	bsf	___ftmul@f2+1,7
  3000  0493  30FF               	movlw	255
  3001  0494  05AF               	andwf	___ftmul@f2,f
  3002  0495  30FF               	movlw	255
  3003  0496  05B0               	andwf	___ftmul@f2+1,f
  3004  0497  3000               	movlw	0
  3005  0498  05B1               	andwf	___ftmul@f2+2,f
  3006  0499  3000               	movlw	0
  3007  049A  00B7               	movwf	___ftmul@f3_as_product
  3008  049B  3000               	movlw	0
  3009  049C  00B8               	movwf	___ftmul@f3_as_product+1
  3010  049D  3000               	movlw	0
  3011  049E  00B9               	movwf	___ftmul@f3_as_product+2
  3012  049F  3007               	movlw	7
  3013  04A0  00B2               	movwf	??___ftmul
  3014  04A1  0832               	movf	??___ftmul,w
  3015  04A2  00BA               	movwf	___ftmul@cntr
  3016  04A3                     l1524:	
  3017  04A3  1C2C               	btfss	___ftmul@f1,0
  3018  04A4  2CB3               	goto	l1528
  3019  04A5  082F               	movf	___ftmul@f2,w
  3020  04A6  07B7               	addwf	___ftmul@f3_as_product,f
  3021  04A7  0830               	movf	___ftmul@f2+1,w
  3022  04A8  1103               	clrz
  3023  04A9  1803               	skipnc
  3024  04AA  0A30               	incf	___ftmul@f2+1,w
  3025  04AB  1D03               	btfss	3,2
  3026  04AC  07B8               	addwf	___ftmul@f3_as_product+1,f
  3027  04AD  0831               	movf	___ftmul@f2+2,w
  3028  04AE  1103               	clrz
  3029  04AF  1803               	skipnc
  3030  04B0  0A31               	incf	___ftmul@f2+2,w
  3031  04B1  1D03               	btfss	3,2
  3032  04B2  07B9               	addwf	___ftmul@f3_as_product+2,f
  3033  04B3                     l1528:	
  3034  04B3  3001               	movlw	1
  3035  04B4                     u1545:	
  3036  04B4  1003               	clrc
  3037  04B5  0CAE               	rrf	___ftmul@f1+2,f
  3038  04B6  0CAD               	rrf	___ftmul@f1+1,f
  3039  04B7  0CAC               	rrf	___ftmul@f1,f
  3040  04B8  3EFF               	addlw	-1
  3041  04B9  1D03               	skipz
  3042  04BA  2CB4               	goto	u1545
  3043  04BB  3001               	movlw	1
  3044  04BC                     u1555:	
  3045  04BC  1003               	clrc
  3046  04BD  0DAF               	rlf	___ftmul@f2,f
  3047  04BE  0DB0               	rlf	___ftmul@f2+1,f
  3048  04BF  0DB1               	rlf	___ftmul@f2+2,f
  3049  04C0  3EFF               	addlw	-1
  3050  04C1  1D03               	skipz
  3051  04C2  2CBC               	goto	u1555
  3052  04C3  3001               	movlw	1
  3053  04C4  02BA               	subwf	___ftmul@cntr,f
  3054  04C5  1D03               	btfss	3,2
  3055  04C6  2CA3               	goto	l1524
  3056  04C7  3009               	movlw	9
  3057  04C8  00B2               	movwf	??___ftmul
  3058  04C9  0832               	movf	??___ftmul,w
  3059  04CA  00BA               	movwf	___ftmul@cntr
  3060  04CB                     l1536:	
  3061  04CB  1C2C               	btfss	___ftmul@f1,0
  3062  04CC  2CDB               	goto	l1540
  3063  04CD  082F               	movf	___ftmul@f2,w
  3064  04CE  07B7               	addwf	___ftmul@f3_as_product,f
  3065  04CF  0830               	movf	___ftmul@f2+1,w
  3066  04D0  1103               	clrz
  3067  04D1  1803               	skipnc
  3068  04D2  0A30               	incf	___ftmul@f2+1,w
  3069  04D3  1D03               	btfss	3,2
  3070  04D4  07B8               	addwf	___ftmul@f3_as_product+1,f
  3071  04D5  0831               	movf	___ftmul@f2+2,w
  3072  04D6  1103               	clrz
  3073  04D7  1803               	skipnc
  3074  04D8  0A31               	incf	___ftmul@f2+2,w
  3075  04D9  1D03               	btfss	3,2
  3076  04DA  07B9               	addwf	___ftmul@f3_as_product+2,f
  3077  04DB                     l1540:	
  3078  04DB  3001               	movlw	1
  3079  04DC                     u1595:	
  3080  04DC  1003               	clrc
  3081  04DD  0CAE               	rrf	___ftmul@f1+2,f
  3082  04DE  0CAD               	rrf	___ftmul@f1+1,f
  3083  04DF  0CAC               	rrf	___ftmul@f1,f
  3084  04E0  3EFF               	addlw	-1
  3085  04E1  1D03               	skipz
  3086  04E2  2CDC               	goto	u1595
  3087  04E3  3001               	movlw	1
  3088  04E4                     u1605:	
  3089  04E4  1003               	clrc
  3090  04E5  0CB9               	rrf	___ftmul@f3_as_product+2,f
  3091  04E6  0CB8               	rrf	___ftmul@f3_as_product+1,f
  3092  04E7  0CB7               	rrf	___ftmul@f3_as_product,f
  3093  04E8  3EFF               	addlw	-1
  3094  04E9  1D03               	skipz
  3095  04EA  2CE4               	goto	u1605
  3096  04EB  3001               	movlw	1
  3097  04EC  02BA               	subwf	___ftmul@cntr,f
  3098  04ED  1D03               	btfss	3,2
  3099  04EE  2CCB               	goto	l1536
  3100  04EF  0837               	movf	___ftmul@f3_as_product,w
  3101  04F0  00A0               	movwf	___ftpack@arg
  3102  04F1  0838               	movf	___ftmul@f3_as_product+1,w
  3103  04F2  00A1               	movwf	___ftpack@arg+1
  3104  04F3  0839               	movf	___ftmul@f3_as_product+2,w
  3105  04F4  00A2               	movwf	___ftpack@arg+2
  3106  04F5  0836               	movf	___ftmul@exp,w
  3107  04F6  00B2               	movwf	??___ftmul
  3108  04F7  0832               	movf	??___ftmul,w
  3109  04F8  00A3               	movwf	___ftpack@exp
  3110  04F9  083B               	movf	___ftmul@sign,w
  3111  04FA  00B3               	movwf	??___ftmul+1
  3112  04FB  0833               	movf	??___ftmul+1,w
  3113  04FC  00A4               	movwf	___ftpack@sign
  3114  04FD  120A  118A  2682   	fcall	___ftpack
  3115  0500  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0501  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0502  0820               	movf	?___ftpack,w
  3118  0503  00AC               	movwf	?___ftmul
  3119  0504  0821               	movf	?___ftpack+1,w
  3120  0505  00AD               	movwf	?___ftmul+1
  3121  0506  0822               	movf	?___ftpack+2,w
  3122  0507  00AE               	movwf	?___ftmul+2
  3123  0508  0008               	return
  3124  0509                     __end_of___ftmul:	
  3125                           
  3126                           	psect	text13
  3127  0682                     __ptext13:	
  3128 ;; *************** function ___ftpack *****************
  3129 ;; Defined at:
  3130 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  arg             3    0[BANK0 ] unsigned um
  3133 ;;  exp             1    3[BANK0 ] unsigned char 
  3134 ;;  sign            1    4[BANK0 ] unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;		None
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  3    0[BANK0 ] float 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3146 ;;      Params:         0       5       0       0       0
  3147 ;;      Locals:         0       0       0       0       0
  3148 ;;      Temps:          0       3       0       0       0
  3149 ;;      Totals:         0       8       0       0       0
  3150 ;;Total ram usage:        8 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    2
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		___ftmul
  3157 ;;		___lwtoft
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function ___ftpack
  3163  0682                     ___ftpack:	
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3167  0682  1283               	bcf	3,5	;RP0=0, select bank0
  3168  0683  1303               	bcf	3,6	;RP1=0, select bank0
  3169  0684  0823               	movf	___ftpack@exp,w
  3170  0685  1903               	btfsc	3,2
  3171  0686  2E8C               	goto	l1254
  3172  0687  0822               	movf	___ftpack@arg+2,w
  3173  0688  0421               	iorwf	___ftpack@arg+1,w
  3174  0689  0420               	iorwf	___ftpack@arg,w
  3175  068A  1D03               	skipz
  3176  068B  2E9F               	goto	l1260
  3177  068C                     l1254:	
  3178  068C  3000               	movlw	0
  3179  068D  00A0               	movwf	?___ftpack
  3180  068E  3000               	movlw	0
  3181  068F  00A1               	movwf	?___ftpack+1
  3182  0690  3000               	movlw	0
  3183  0691  00A2               	movwf	?___ftpack+2
  3184  0692  0008               	return
  3185  0693                     l1258:	
  3186  0693  3001               	movlw	1
  3187  0694  00A5               	movwf	??___ftpack
  3188  0695  0825               	movf	??___ftpack,w
  3189  0696  07A3               	addwf	___ftpack@exp,f
  3190  0697  3001               	movlw	1
  3191  0698                     u1015:	
  3192  0698  1003               	clrc
  3193  0699  0CA2               	rrf	___ftpack@arg+2,f
  3194  069A  0CA1               	rrf	___ftpack@arg+1,f
  3195  069B  0CA0               	rrf	___ftpack@arg,f
  3196  069C  3EFF               	addlw	-1
  3197  069D  1D03               	skipz
  3198  069E  2E98               	goto	u1015
  3199  069F                     l1260:	
  3200  069F  30FE               	movlw	254
  3201  06A0  0522               	andwf	___ftpack@arg+2,w
  3202  06A1  1903               	btfsc	3,2
  3203  06A2  2EBA               	goto	l465
  3204  06A3  2E93               	goto	l1258
  3205  06A4                     l1262:	
  3206  06A4  3001               	movlw	1
  3207  06A5  00A5               	movwf	??___ftpack
  3208  06A6  0825               	movf	??___ftpack,w
  3209  06A7  07A3               	addwf	___ftpack@exp,f
  3210  06A8  3001               	movlw	1
  3211  06A9  07A0               	addwf	___ftpack@arg,f
  3212  06AA  3000               	movlw	0
  3213  06AB  1803               	skipnc
  3214  06AC  3001               	movlw	1
  3215  06AD  07A1               	addwf	___ftpack@arg+1,f
  3216  06AE  3000               	movlw	0
  3217  06AF  1803               	skipnc
  3218  06B0  3001               	movlw	1
  3219  06B1  07A2               	addwf	___ftpack@arg+2,f
  3220  06B2  3001               	movlw	1
  3221  06B3                     u1035:	
  3222  06B3  1003               	clrc
  3223  06B4  0CA2               	rrf	___ftpack@arg+2,f
  3224  06B5  0CA1               	rrf	___ftpack@arg+1,f
  3225  06B6  0CA0               	rrf	___ftpack@arg,f
  3226  06B7  3EFF               	addlw	-1
  3227  06B8  1D03               	skipz
  3228  06B9  2EB3               	goto	u1035
  3229  06BA                     l465:	
  3230  06BA  30FF               	movlw	255
  3231  06BB  0522               	andwf	___ftpack@arg+2,w
  3232  06BC  1903               	btfsc	3,2
  3233  06BD  2EC9               	goto	l1270
  3234  06BE  2EA4               	goto	l1262
  3235  06BF                     l1268:	
  3236  06BF  3001               	movlw	1
  3237  06C0  02A3               	subwf	___ftpack@exp,f
  3238  06C1  3001               	movlw	1
  3239  06C2                     u1055:	
  3240  06C2  1003               	clrc
  3241  06C3  0DA0               	rlf	___ftpack@arg,f
  3242  06C4  0DA1               	rlf	___ftpack@arg+1,f
  3243  06C5  0DA2               	rlf	___ftpack@arg+2,f
  3244  06C6  3EFF               	addlw	-1
  3245  06C7  1D03               	skipz
  3246  06C8  2EC2               	goto	u1055
  3247  06C9                     l1270:	
  3248  06C9  1BA1               	btfsc	___ftpack@arg+1,7
  3249  06CA  2ECF               	goto	l472
  3250  06CB  3002               	movlw	2
  3251  06CC  0223               	subwf	___ftpack@exp,w
  3252  06CD  1803               	skipnc
  3253  06CE  2EBF               	goto	l1268
  3254  06CF                     l472:	
  3255  06CF  1823               	btfsc	___ftpack@exp,0
  3256  06D0  2ED7               	goto	l473
  3257  06D1  30FF               	movlw	255
  3258  06D2  05A0               	andwf	___ftpack@arg,f
  3259  06D3  307F               	movlw	127
  3260  06D4  05A1               	andwf	___ftpack@arg+1,f
  3261  06D5  30FF               	movlw	255
  3262  06D6  05A2               	andwf	___ftpack@arg+2,f
  3263  06D7                     l473:	
  3264  06D7  1003               	clrc
  3265  06D8  0CA3               	rrf	___ftpack@exp,f
  3266  06D9  0823               	movf	___ftpack@exp,w
  3267  06DA  00A5               	movwf	??___ftpack
  3268  06DB  01A6               	clrf	??___ftpack+1
  3269  06DC  01A7               	clrf	??___ftpack+2
  3270  06DD  3010               	movlw	16
  3271  06DE                     u1095:	
  3272  06DE  1003               	clrc
  3273  06DF  0DA5               	rlf	??___ftpack,f
  3274  06E0  0DA6               	rlf	??___ftpack+1,f
  3275  06E1  0DA7               	rlf	??___ftpack+2,f
  3276  06E2  3EFF               	addlw	-1
  3277  06E3  1D03               	skipz
  3278  06E4  2EDE               	goto	u1095
  3279  06E5  0825               	movf	??___ftpack,w
  3280  06E6  04A0               	iorwf	___ftpack@arg,f
  3281  06E7  0826               	movf	??___ftpack+1,w
  3282  06E8  04A1               	iorwf	___ftpack@arg+1,f
  3283  06E9  0827               	movf	??___ftpack+2,w
  3284  06EA  04A2               	iorwf	___ftpack@arg+2,f
  3285  06EB  0824               	movf	___ftpack@sign,w
  3286  06EC  1903               	btfsc	3,2
  3287  06ED  0008               	return
  3288  06EE  17A2               	bsf	___ftpack@arg+2,7
  3289  06EF  0008               	return
  3290  06F0                     __end_of___ftpack:	
  3291                           
  3292                           	psect	text14
  3293  07A3                     __ptext14:	
  3294 ;; *************** function _Lcd_Write_String *****************
  3295 ;; Defined at:
  3296 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  a               2    5[BANK0 ] PTR unsigned char 
  3299 ;;		 -> STR_14(3), main@p(10), STR_12(3), STR_10(3), 
  3300 ;;		 -> STR_9(4), main@h(10), STR_7(3), STR_6(6), 
  3301 ;;		 -> main@t(10), STR_4(3), STR_3(10), STR_2(17), 
  3302 ;;		 -> STR_1(17), 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  i               2   10[BANK0 ] int 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3314 ;;      Params:         0       2       0       0       0
  3315 ;;      Locals:         0       2       0       0       0
  3316 ;;      Temps:          0       3       0       0       0
  3317 ;;      Totals:         0       7       0       0       0
  3318 ;;Total ram usage:        7 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    4
  3321 ;; This function calls:
  3322 ;;		_Lcd_Write_Char
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _Lcd_Write_String
  3330  07A3                     _Lcd_Write_String:	
  3331                           
  3332                           ;lcd.h: 94: int i;
  3333                           ;lcd.h: 95: for(i=0;a[i]!='\0';i++)
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3337  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  3338  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  3339  07A5  01AA               	clrf	Lcd_Write_String@i
  3340  07A6  01AB               	clrf	Lcd_Write_String@i+1
  3341  07A7                     l1368:	
  3342  07A7  082A               	movf	Lcd_Write_String@i,w
  3343  07A8  0725               	addwf	Lcd_Write_String@a,w
  3344  07A9  00A8               	movwf	??_Lcd_Write_String+1
  3345  07AA  0826               	movf	Lcd_Write_String@a+1,w
  3346  07AB  00A7               	movwf	??_Lcd_Write_String
  3347  07AC  1803               	skipnc
  3348  07AD  0AA7               	incf	??_Lcd_Write_String,f
  3349  07AE  1BAA               	btfsc	Lcd_Write_String@i,7
  3350  07AF  03A7               	decf	??_Lcd_Write_String,f
  3351  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  3352  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  3353  07B2  0827               	movf	??_Lcd_Write_String,w
  3354  07B3  00A9               	movwf	??_Lcd_Write_String+2
  3355  07B4  0829               	movf	??_Lcd_Write_String+2,w
  3356  07B5  00FF               	movwf	127
  3357  07B6  0828               	movf	??_Lcd_Write_String+1,w
  3358  07B7  0084               	movwf	4
  3359  07B8  120A  118A  2600  120A  118A  	fcall	stringtab
  3360  07BD  3A00               	xorlw	0
  3361  07BE  1903               	btfsc	3,2
  3362  07BF  0008               	return
  3363                           
  3364                           ;lcd.h: 96: Lcd_Write_Char(a[i]);
  3365  07C0  082A               	movf	Lcd_Write_String@i,w
  3366  07C1  0725               	addwf	Lcd_Write_String@a,w
  3367  07C2  00A8               	movwf	??_Lcd_Write_String+1
  3368  07C3  0826               	movf	Lcd_Write_String@a+1,w
  3369  07C4  00A7               	movwf	??_Lcd_Write_String
  3370  07C5  1803               	skipnc
  3371  07C6  0AA7               	incf	??_Lcd_Write_String,f
  3372  07C7  1BAA               	btfsc	Lcd_Write_String@i,7
  3373  07C8  03A7               	decf	??_Lcd_Write_String,f
  3374  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  3375  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  3376  07CB  0827               	movf	??_Lcd_Write_String,w
  3377  07CC  00A9               	movwf	??_Lcd_Write_String+2
  3378  07CD  0829               	movf	??_Lcd_Write_String+2,w
  3379  07CE  00FF               	movwf	127
  3380  07CF  0828               	movf	??_Lcd_Write_String+1,w
  3381  07D0  0084               	movwf	4
  3382  07D1  120A  118A  2600  120A  118A  	fcall	stringtab
  3383  07D6  120A  158A  2785  120A  118A  	fcall	_Lcd_Write_Char
  3384  07DB  3001               	movlw	1
  3385  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  3386  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  3387  07DE  07AA               	addwf	Lcd_Write_String@i,f
  3388  07DF  1803               	skipnc
  3389  07E0  0AAB               	incf	Lcd_Write_String@i+1,f
  3390  07E1  3000               	movlw	0
  3391  07E2  07AB               	addwf	Lcd_Write_String@i+1,f
  3392  07E3  2FA7               	goto	l1368
  3393  07E4                     __end_of_Lcd_Write_String:	
  3394                           
  3395                           	psect	text15
  3396  0F85                     __ptext15:	
  3397 ;; *************** function _Lcd_Write_Char *****************
  3398 ;; Defined at:
  3399 ;;		line 76 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  a               1    wreg     unsigned char 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  a               1    4[BANK0 ] unsigned char 
  3404 ;;  y               1    3[BANK0 ] unsigned char 
  3405 ;;  temp            1    2[BANK0 ] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, pclath, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3415 ;;      Params:         0       0       0       0       0
  3416 ;;      Locals:         0       3       0       0       0
  3417 ;;      Temps:          0       1       0       0       0
  3418 ;;      Totals:         0       4       0       0       0
  3419 ;;Total ram usage:        4 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    3
  3422 ;; This function calls:
  3423 ;;		_Lcd_Port
  3424 ;; This function is called by:
  3425 ;;		_Lcd_Write_String
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           
  3430                           ;psect for function _Lcd_Write_Char
  3431  0F85                     _Lcd_Write_Char:	
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3435                           ;Lcd_Write_Char@a stored from wreg
  3436  0F85  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0F86  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0F87  00A4               	movwf	Lcd_Write_Char@a
  3439                           
  3440                           ;lcd.h: 78: char temp,y;
  3441                           ;lcd.h: 79: temp = a&0x0F;
  3442  0F88  0824               	movf	Lcd_Write_Char@a,w
  3443  0F89  390F               	andlw	15
  3444  0F8A  00A1               	movwf	??_Lcd_Write_Char
  3445  0F8B  0821               	movf	??_Lcd_Write_Char,w
  3446  0F8C  00A2               	movwf	Lcd_Write_Char@temp
  3447                           
  3448                           ;lcd.h: 80: y = a&0xF0;
  3449  0F8D  0824               	movf	Lcd_Write_Char@a,w
  3450  0F8E  39F0               	andlw	240
  3451  0F8F  00A1               	movwf	??_Lcd_Write_Char
  3452  0F90  0821               	movf	??_Lcd_Write_Char,w
  3453  0F91  00A3               	movwf	Lcd_Write_Char@y
  3454                           
  3455                           ;lcd.h: 81: RD7 = 1;
  3456  0F92  1788               	bsf	8,7	;volatile
  3457                           
  3458                           ;lcd.h: 82: Lcd_Port(y>>4);
  3459  0F93  0823               	movf	Lcd_Write_Char@y,w
  3460  0F94  00A1               	movwf	??_Lcd_Write_Char
  3461  0F95  3004               	movlw	4
  3462  0F96                     u965:	
  3463  0F96  1003               	clrc
  3464  0F97  0CA1               	rrf	??_Lcd_Write_Char,f
  3465  0F98  3EFF               	addlw	-1
  3466  0F99  1D03               	skipz
  3467  0F9A  2F96               	goto	u965
  3468  0F9B  0821               	movf	??_Lcd_Write_Char,w
  3469  0F9C  120A  158A  26CD  120A  158A  	fcall	_Lcd_Port
  3470                           
  3471                           ;lcd.h: 83: RD6 = 1;
  3472  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0FA3  1708               	bsf	8,6	;volatile
  3475                           
  3476                           ;lcd.h: 84: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3477  0FA4  3041               	movlw	65
  3478  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0FA7  00A1               	movwf	??_Lcd_Write_Char
  3481  0FA8                     u1857:	
  3482  0FA8  0BA1               	decfsz	??_Lcd_Write_Char,f
  3483  0FA9  2FA8               	goto	u1857
  3484  0FAA  2FAB               	nop2
  3485                           
  3486                           ;lcd.h: 85: RD6 = 0;
  3487  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0FAD  1308               	bcf	8,6	;volatile
  3490                           
  3491                           ;lcd.h: 86: Lcd_Port(temp);
  3492  0FAE  0822               	movf	Lcd_Write_Char@temp,w
  3493  0FAF  120A  158A  26CD  120A  158A  	fcall	_Lcd_Port
  3494                           
  3495                           ;lcd.h: 87: RD6 = 1;
  3496  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  3498  0FB6  1708               	bsf	8,6	;volatile
  3499                           
  3500                           ;lcd.h: 88: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3501  0FB7  3041               	movlw	65
  3502  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  3503  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  3504  0FBA  00A1               	movwf	??_Lcd_Write_Char
  3505  0FBB                     u1867:	
  3506  0FBB  0BA1               	decfsz	??_Lcd_Write_Char,f
  3507  0FBC  2FBB               	goto	u1867
  3508  0FBD  2FBE               	nop2
  3509                           
  3510                           ;lcd.h: 89: RD6 = 0;
  3511  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  3512  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  3513  0FC0  1308               	bcf	8,6	;volatile
  3514  0FC1  0008               	return
  3515  0FC2                     __end_of_Lcd_Write_Char:	
  3516                           
  3517                           	psect	text16
  3518  0751                     __ptext16:	
  3519 ;; *************** function _Lcd_Set_Cursor *****************
  3520 ;; Defined at:
  3521 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  a               1    wreg     unsigned char 
  3524 ;;  b               1    4[BANK0 ] unsigned char 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  a               1    7[BANK0 ] unsigned char 
  3527 ;;  temp            1   10[BANK0 ] unsigned char 
  3528 ;;  y               1    9[BANK0 ] unsigned char 
  3529 ;;  z               1    8[BANK0 ] unsigned char 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, pclath, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3539 ;;      Params:         0       1       0       0       0
  3540 ;;      Locals:         0       4       0       0       0
  3541 ;;      Temps:          0       2       0       0       0
  3542 ;;      Totals:         0       7       0       0       0
  3543 ;;Total ram usage:        7 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    4
  3546 ;; This function calls:
  3547 ;;		_Lcd_Cmd
  3548 ;; This function is called by:
  3549 ;;		_main
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           
  3554                           ;psect for function _Lcd_Set_Cursor
  3555  0751                     _Lcd_Set_Cursor:	
  3556                           
  3557                           ;incstack = 0
  3558                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3559                           ;Lcd_Set_Cursor@a stored from wreg
  3560  0751  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0752  1303               	bcf	3,6	;RP1=0, select bank0
  3562  0753  00A7               	movwf	Lcd_Set_Cursor@a
  3563                           
  3564                           ;lcd.h: 39: char temp,z,y;
  3565                           ;lcd.h: 40: if(a == 1)
  3566  0754  0327               	decf	Lcd_Set_Cursor@a,w
  3567  0755  1D03               	btfss	3,2
  3568  0756  2F7A               	goto	l1342
  3569                           
  3570                           ;lcd.h: 41: {
  3571                           ;lcd.h: 42: temp = 0x80 + b - 1;
  3572  0757  0824               	movf	Lcd_Set_Cursor@b,w
  3573  0758  3E7F               	addlw	127
  3574  0759  00A5               	movwf	??_Lcd_Set_Cursor
  3575  075A  0825               	movf	??_Lcd_Set_Cursor,w
  3576  075B  00AA               	movwf	Lcd_Set_Cursor@temp
  3577                           
  3578                           ;lcd.h: 43: z = temp>>4;
  3579  075C  082A               	movf	Lcd_Set_Cursor@temp,w
  3580  075D  00A5               	movwf	??_Lcd_Set_Cursor
  3581  075E  3004               	movlw	4
  3582  075F                     u1255:	
  3583  075F  1003               	clrc
  3584  0760  0CA5               	rrf	??_Lcd_Set_Cursor,f
  3585  0761  3EFF               	addlw	-1
  3586  0762  1D03               	skipz
  3587  0763  2F5F               	goto	u1255
  3588  0764  0825               	movf	??_Lcd_Set_Cursor,w
  3589  0765  00A6               	movwf	??_Lcd_Set_Cursor+1
  3590  0766  0826               	movf	??_Lcd_Set_Cursor+1,w
  3591  0767  00A8               	movwf	Lcd_Set_Cursor@z
  3592                           
  3593                           ;lcd.h: 44: y = temp & 0x0F;
  3594  0768  082A               	movf	Lcd_Set_Cursor@temp,w
  3595  0769  390F               	andlw	15
  3596  076A  00A5               	movwf	??_Lcd_Set_Cursor
  3597  076B  0825               	movf	??_Lcd_Set_Cursor,w
  3598  076C  00A9               	movwf	Lcd_Set_Cursor@y
  3599                           
  3600                           ;lcd.h: 45: Lcd_Cmd(z);
  3601  076D  0828               	movf	Lcd_Set_Cursor@z,w
  3602  076E  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3603                           
  3604                           ;lcd.h: 46: Lcd_Cmd(y);
  3605  0773  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0774  1303               	bcf	3,6	;RP1=0, select bank0
  3607  0775  0829               	movf	Lcd_Set_Cursor@y,w
  3608  0776  120A  118A  27E4   	fcall	_Lcd_Cmd
  3609                           
  3610                           ;lcd.h: 47: }
  3611  0779  0008               	return
  3612  077A                     l1342:	
  3613                           
  3614                           ;lcd.h: 48: else if(a == 2)
  3615  077A  3002               	movlw	2
  3616  077B  1283               	bcf	3,5	;RP0=0, select bank0
  3617  077C  1303               	bcf	3,6	;RP1=0, select bank0
  3618  077D  0627               	xorwf	Lcd_Set_Cursor@a,w
  3619  077E  1D03               	btfss	3,2
  3620  077F  0008               	return
  3621                           
  3622                           ;lcd.h: 49: {
  3623                           ;lcd.h: 50: temp = 0xC0 + b - 1;
  3624  0780  0824               	movf	Lcd_Set_Cursor@b,w
  3625  0781  3EBF               	addlw	191
  3626  0782  00A5               	movwf	??_Lcd_Set_Cursor
  3627  0783  0825               	movf	??_Lcd_Set_Cursor,w
  3628  0784  00AA               	movwf	Lcd_Set_Cursor@temp
  3629                           
  3630                           ;lcd.h: 51: z = temp>>4;
  3631  0785  082A               	movf	Lcd_Set_Cursor@temp,w
  3632  0786  00A5               	movwf	??_Lcd_Set_Cursor
  3633  0787  3004               	movlw	4
  3634  0788                     u1275:	
  3635  0788  1003               	clrc
  3636  0789  0CA5               	rrf	??_Lcd_Set_Cursor,f
  3637  078A  3EFF               	addlw	-1
  3638  078B  1D03               	skipz
  3639  078C  2F88               	goto	u1275
  3640  078D  0825               	movf	??_Lcd_Set_Cursor,w
  3641  078E  00A6               	movwf	??_Lcd_Set_Cursor+1
  3642  078F  0826               	movf	??_Lcd_Set_Cursor+1,w
  3643  0790  00A8               	movwf	Lcd_Set_Cursor@z
  3644                           
  3645                           ;lcd.h: 52: y = temp & 0x0F;
  3646  0791  082A               	movf	Lcd_Set_Cursor@temp,w
  3647  0792  390F               	andlw	15
  3648  0793  00A5               	movwf	??_Lcd_Set_Cursor
  3649  0794  0825               	movf	??_Lcd_Set_Cursor,w
  3650  0795  00A9               	movwf	Lcd_Set_Cursor@y
  3651                           
  3652                           ;lcd.h: 53: Lcd_Cmd(z);
  3653  0796  0828               	movf	Lcd_Set_Cursor@z,w
  3654  0797  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3655                           
  3656                           ;lcd.h: 54: Lcd_Cmd(y);
  3657  079C  1283               	bcf	3,5	;RP0=0, select bank0
  3658  079D  1303               	bcf	3,6	;RP1=0, select bank0
  3659  079E  0829               	movf	Lcd_Set_Cursor@y,w
  3660  079F  120A  118A  27E4   	fcall	_Lcd_Cmd
  3661  07A2  0008               	return
  3662  07A3                     __end_of_Lcd_Set_Cursor:	
  3663                           
  3664                           	psect	text17
  3665  06F0                     __ptext17:	
  3666 ;; *************** function _Lcd_Init *****************
  3667 ;; Defined at:
  3668 ;;		line 58 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0, pclath, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3682 ;;      Params:         0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0
  3684 ;;      Temps:          0       2       0       0       0
  3685 ;;      Totals:         0       2       0       0       0
  3686 ;;Total ram usage:        2 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    4
  3689 ;; This function calls:
  3690 ;;		_Lcd_Cmd
  3691 ;;		_Lcd_Port
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           
  3698                           ;psect for function _Lcd_Init
  3699  06F0                     _Lcd_Init:	
  3700                           
  3701                           ;lcd.h: 60: Lcd_Port(0x00);
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3705  06F0  3000               	movlw	0
  3706  06F1  120A  158A  26CD  120A  118A  	fcall	_Lcd_Port
  3707                           
  3708                           ;lcd.h: 61: _delay((unsigned long)((20)*(20000000/4000.0)));
  3709  06F6  3082               	movlw	130
  3710  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  3711  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  3712  06F9  00A5               	movwf	??_Lcd_Init+1
  3713  06FA  30DD               	movlw	221
  3714  06FB  00A4               	movwf	??_Lcd_Init
  3715  06FC                     u1877:	
  3716  06FC  0BA4               	decfsz	??_Lcd_Init,f
  3717  06FD  2EFC               	goto	u1877
  3718  06FE  0BA5               	decfsz	??_Lcd_Init+1,f
  3719  06FF  2EFC               	goto	u1877
  3720                           
  3721                           ;lcd.h: 62: Lcd_Cmd(0x03);
  3722  0700  3003               	movlw	3
  3723  0701  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3724                           
  3725                           ;lcd.h: 63: _delay((unsigned long)((5)*(20000000/4000.0)));
  3726  0706  3021               	movlw	33
  3727  0707  1283               	bcf	3,5	;RP0=0, select bank0
  3728  0708  1303               	bcf	3,6	;RP1=0, select bank0
  3729  0709  00A5               	movwf	??_Lcd_Init+1
  3730  070A  3075               	movlw	117
  3731  070B  00A4               	movwf	??_Lcd_Init
  3732  070C                     u1887:	
  3733  070C  0BA4               	decfsz	??_Lcd_Init,f
  3734  070D  2F0C               	goto	u1887
  3735  070E  0BA5               	decfsz	??_Lcd_Init+1,f
  3736  070F  2F0C               	goto	u1887
  3737  0710  2F11               	nop2
  3738                           
  3739                           ;lcd.h: 64: Lcd_Cmd(0x03);
  3740  0711  3003               	movlw	3
  3741  0712  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3742                           
  3743                           ;lcd.h: 65: _delay((unsigned long)((11)*(20000000/4000.0)));
  3744  0717  3048               	movlw	72
  3745  0718  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0719  1303               	bcf	3,6	;RP1=0, select bank0
  3747  071A  00A5               	movwf	??_Lcd_Init+1
  3748  071B  306B               	movlw	107
  3749  071C  00A4               	movwf	??_Lcd_Init
  3750  071D                     u1897:	
  3751  071D  0BA4               	decfsz	??_Lcd_Init,f
  3752  071E  2F1D               	goto	u1897
  3753  071F  0BA5               	decfsz	??_Lcd_Init+1,f
  3754  0720  2F1D               	goto	u1897
  3755  0721  2F22               	nop2
  3756                           
  3757                           ;lcd.h: 66: Lcd_Cmd(0x03);
  3758  0722  3003               	movlw	3
  3759  0723  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3760                           
  3761                           ;lcd.h: 67: Lcd_Cmd(0x02);
  3762  0728  3002               	movlw	2
  3763  0729  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3764                           
  3765                           ;lcd.h: 68: Lcd_Cmd(0x02);
  3766  072E  3002               	movlw	2
  3767  072F  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3768                           
  3769                           ;lcd.h: 69: Lcd_Cmd(0x08);
  3770  0734  3008               	movlw	8
  3771  0735  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3772                           
  3773                           ;lcd.h: 70: Lcd_Cmd(0x00);
  3774  073A  3000               	movlw	0
  3775  073B  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3776                           
  3777                           ;lcd.h: 71: Lcd_Cmd(0x0C);
  3778  0740  300C               	movlw	12
  3779  0741  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3780                           
  3781                           ;lcd.h: 72: Lcd_Cmd(0x00);
  3782  0746  3000               	movlw	0
  3783  0747  120A  118A  27E4  120A  118A  	fcall	_Lcd_Cmd
  3784                           
  3785                           ;lcd.h: 73: Lcd_Cmd(0x06);
  3786  074C  3006               	movlw	6
  3787  074D  120A  118A  27E4   	fcall	_Lcd_Cmd
  3788  0750  0008               	return
  3789  0751                     __end_of_Lcd_Init:	
  3790                           
  3791                           	psect	text18
  3792  0E95                     __ptext18:	
  3793 ;; *************** function _Lcd_Clear *****************
  3794 ;; Defined at:
  3795 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  2   92[None  ] int 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0, pclath, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3809 ;;      Params:         0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0
  3812 ;;      Totals:         0       0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    4
  3816 ;; This function calls:
  3817 ;;		_Lcd_Cmd
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _Lcd_Clear
  3825  0E95                     _Lcd_Clear:	
  3826                           
  3827                           ;lcd.h: 33: Lcd_Cmd(0);
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3831  0E95  3000               	movlw	0
  3832  0E96  120A  118A  27E4  120A  158A  	fcall	_Lcd_Cmd
  3833                           
  3834                           ;lcd.h: 34: Lcd_Cmd(1);
  3835  0E9B  3001               	movlw	1
  3836  0E9C  120A  118A  27E4   	fcall	_Lcd_Cmd
  3837  0E9F  0008               	return
  3838  0EA0                     __end_of_Lcd_Clear:	
  3839                           
  3840                           	psect	text19
  3841  07E4                     __ptext19:	
  3842 ;; *************** function _Lcd_Cmd *****************
  3843 ;; Defined at:
  3844 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  a               1    wreg     unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  a               1    3[BANK0 ] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0, pclath, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3858 ;;      Params:         0       0       0       0       0
  3859 ;;      Locals:         0       1       0       0       0
  3860 ;;      Temps:          0       2       0       0       0
  3861 ;;      Totals:         0       3       0       0       0
  3862 ;;Total ram usage:        3 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    3
  3865 ;; This function calls:
  3866 ;;		_Lcd_Port
  3867 ;; This function is called by:
  3868 ;;		_Lcd_Clear
  3869 ;;		_Lcd_Set_Cursor
  3870 ;;		_Lcd_Init
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function _Lcd_Cmd
  3876  07E4                     _Lcd_Cmd:	
  3877                           
  3878                           ;incstack = 0
  3879                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3880                           ;Lcd_Cmd@a stored from wreg
  3881  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  3882  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  3883  07E6  00A3               	movwf	Lcd_Cmd@a
  3884                           
  3885                           ;lcd.h: 24: RD7 = 0;
  3886  07E7  1388               	bcf	8,7	;volatile
  3887                           
  3888                           ;lcd.h: 25: Lcd_Port(a);
  3889  07E8  0823               	movf	Lcd_Cmd@a,w
  3890  07E9  120A  158A  26CD  120A  118A  	fcall	_Lcd_Port
  3891                           
  3892                           ;lcd.h: 26: RD6 = 1;
  3893  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  3894  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  3895  07F0  1708               	bsf	8,6	;volatile
  3896                           
  3897                           ;lcd.h: 27: _delay((unsigned long)((4)*(20000000/4000.0)));
  3898  07F1  301A               	movlw	26
  3899  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  3900  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  3901  07F4  00A2               	movwf	??_Lcd_Cmd+1
  3902  07F5  30F7               	movlw	247
  3903  07F6  00A1               	movwf	??_Lcd_Cmd
  3904  07F7                     u1907:	
  3905  07F7  0BA1               	decfsz	??_Lcd_Cmd,f
  3906  07F8  2FF7               	goto	u1907
  3907  07F9  0BA2               	decfsz	??_Lcd_Cmd+1,f
  3908  07FA  2FF7               	goto	u1907
  3909  07FB  2FFC               	nop2
  3910                           
  3911                           ;lcd.h: 28: RD6 = 0;
  3912  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  3913  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  3914  07FE  1308               	bcf	8,6	;volatile
  3915  07FF  0008               	return
  3916  0800                     __end_of_Lcd_Cmd:	
  3917                           
  3918                           	psect	text20
  3919  0ECD                     __ptext20:	
  3920 ;; *************** function _Lcd_Port *****************
  3921 ;; Defined at:
  3922 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  a               1    wreg     unsigned char 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  a               1    0[BANK0 ] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3936 ;;      Params:         0       0       0       0       0
  3937 ;;      Locals:         0       1       0       0       0
  3938 ;;      Temps:          0       0       0       0       0
  3939 ;;      Totals:         0       1       0       0       0
  3940 ;;Total ram usage:        1 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    2
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_Lcd_Cmd
  3947 ;;		_Lcd_Init
  3948 ;;		_Lcd_Write_Char
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           
  3953                           ;psect for function _Lcd_Port
  3954  0ECD                     _Lcd_Port:	
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _Lcd_Port: [wreg]
  3958                           ;Lcd_Port@a stored from wreg
  3959  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  3960  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  3961  0ECF  00A0               	movwf	Lcd_Port@a
  3962                           
  3963                           ;lcd.h: 2: if(a & 1)
  3964  0ED0  1C20               	btfss	Lcd_Port@a,0
  3965  0ED1  2ED4               	goto	l79
  3966                           
  3967                           ;lcd.h: 3: RD5 = 1;
  3968  0ED2  1688               	bsf	8,5	;volatile
  3969  0ED3  2ED5               	goto	l80
  3970  0ED4                     l79:	
  3971                           
  3972                           ;lcd.h: 4: else
  3973                           ;lcd.h: 5: RD5 = 0;
  3974  0ED4  1288               	bcf	8,5	;volatile
  3975  0ED5                     l80:	
  3976                           
  3977                           ;lcd.h: 7: if(a & 2)
  3978  0ED5  1CA0               	btfss	Lcd_Port@a,1
  3979  0ED6  2ED9               	goto	l81
  3980                           
  3981                           ;lcd.h: 8: RD4 = 1;
  3982  0ED7  1608               	bsf	8,4	;volatile
  3983  0ED8  2EDA               	goto	l82
  3984  0ED9                     l81:	
  3985                           
  3986                           ;lcd.h: 9: else
  3987                           ;lcd.h: 10: RD4 = 0;
  3988  0ED9  1208               	bcf	8,4	;volatile
  3989  0EDA                     l82:	
  3990                           
  3991                           ;lcd.h: 12: if(a & 4)
  3992  0EDA  1D20               	btfss	Lcd_Port@a,2
  3993  0EDB  2EDE               	goto	l83
  3994                           
  3995                           ;lcd.h: 13: RD3 = 1;
  3996  0EDC  1588               	bsf	8,3	;volatile
  3997  0EDD  2EDF               	goto	l84
  3998  0EDE                     l83:	
  3999                           
  4000                           ;lcd.h: 14: else
  4001                           ;lcd.h: 15: RD3 = 0;
  4002  0EDE  1188               	bcf	8,3	;volatile
  4003  0EDF                     l84:	
  4004                           
  4005                           ;lcd.h: 17: if(a & 8)
  4006  0EDF  1DA0               	btfss	Lcd_Port@a,3
  4007  0EE0  2EE3               	goto	l85
  4008                           
  4009                           ;lcd.h: 18: RD2 = 1;
  4010  0EE1  1508               	bsf	8,2	;volatile
  4011  0EE2  0008               	return
  4012  0EE3                     l85:	
  4013                           
  4014                           ;lcd.h: 19: else
  4015                           ;lcd.h: 20: RD2 = 0;
  4016  0EE3  1108               	bcf	8,2	;volatile
  4017  0EE4  0008               	return
  4018  0EE5                     __end_of_Lcd_Port:	
  4019                           
  4020                           	psect	text21
  4021  0597                     __ptext21:	
  4022 ;; *************** function _T1 *****************
  4023 ;; Defined at:
  4024 ;;		line 188 in file "HEALTH_IOT.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      void 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0, pclath, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4038 ;;      Params:         0       0       0       0       0
  4039 ;;      Locals:         0       0       0       0       0
  4040 ;;      Temps:          6       0       0       0       0
  4041 ;;      Totals:         6       0       0       0       0
  4042 ;;Total ram usage:        6 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    1
  4045 ;; This function calls:
  4046 ;;		___wmul
  4047 ;; This function is called by:
  4048 ;;		Interrupt level 1
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           
  4053                           ;psect for function _T1
  4054  0597                     _T1:	
  4055                           
  4056                           ;HEALTH_IOT.c: 190: if(TMR1IF)
  4057  0597  1C0C               	btfss	12,0	;volatile
  4058  0598  2DCA               	goto	i1l189
  4059                           
  4060                           ;HEALTH_IOT.c: 191: {
  4061                           ;HEALTH_IOT.c: 192: TMR1IF = 0;
  4062  0599  100C               	bcf	12,0	;volatile
  4063                           
  4064                           ;HEALTH_IOT.c: 193: count++;
  4065  059A  3001               	movlw	1
  4066  059B  1683               	bsf	3,5	;RP0=1, select bank1
  4067  059C  1303               	bcf	3,6	;RP1=0, select bank1
  4068  059D  07CC               	addwf	_count^(0+128),f
  4069  059E  1803               	skipnc
  4070  059F  0ACD               	incf	(_count+1)^(0+128),f
  4071  05A0  3000               	movlw	0
  4072  05A1  07CD               	addwf	(_count+1)^(0+128),f
  4073                           
  4074                           ;HEALTH_IOT.c: 194: if(count == 95)
  4075  05A2  305F               	movlw	95
  4076  05A3  064C               	xorwf	_count^(0+128),w
  4077  05A4  044D               	iorwf	(_count+1)^(0+128),w
  4078  05A5  1D03               	btfss	3,2
  4079  05A6  2DCA               	goto	i1l189
  4080                           
  4081                           ;HEALTH_IOT.c: 195: {
  4082                           ;HEALTH_IOT.c: 196: cbeat = TMR0;
  4083  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  4084  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  4085  05A9  0801               	movf	1,w	;volatile
  4086  05AA  00F6               	movwf	??_T1
  4087  05AB  01F7               	clrf	??_T1+1
  4088  05AC  0876               	movf	??_T1,w
  4089  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  4090  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  4091  05AF  00CA               	movwf	_cbeat^(0+128)
  4092  05B0  0877               	movf	??_T1+1,w
  4093  05B1  00CB               	movwf	(_cbeat+1)^(0+128)
  4094                           
  4095                           ;HEALTH_IOT.c: 197: cbeat = cbeat * 6;
  4096  05B2  084B               	movf	(_cbeat+1)^(0+128),w
  4097  05B3  00F1               	movwf	___wmul@multiplier+1
  4098  05B4  084A               	movf	_cbeat^(0+128),w
  4099  05B5  00F0               	movwf	___wmul@multiplier
  4100  05B6  3006               	movlw	6
  4101  05B7  00F2               	movwf	___wmul@multiplicand
  4102  05B8  3000               	movlw	0
  4103  05B9  00F3               	movwf	___wmul@multiplicand+1
  4104  05BA  120A  158A  26FD  120A  118A  	fcall	___wmul
  4105  05BF  0871               	movf	?___wmul+1,w
  4106  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  4107  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  4108  05C2  00CB               	movwf	(_cbeat+1)^(0+128)
  4109  05C3  0870               	movf	?___wmul,w
  4110  05C4  00CA               	movwf	_cbeat^(0+128)
  4111                           
  4112                           ;HEALTH_IOT.c: 198: count = 0;
  4113  05C5  01CC               	clrf	_count^(0+128)
  4114  05C6  01CD               	clrf	(_count+1)^(0+128)
  4115                           
  4116                           ;HEALTH_IOT.c: 199: TMR0 = 0;
  4117  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  4118  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  4119  05C9  0181               	clrf	1	;volatile
  4120  05CA                     i1l189:	
  4121  05CA  087B               	movf	??_T1+5,w
  4122  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  4123  05CC  00FF               	movwf	127
  4124  05CD  087A               	movf	??_T1+4,w
  4125  05CE  008A               	movwf	10
  4126  05CF  0879               	movf	??_T1+3,w
  4127  05D0  0084               	movwf	4
  4128  05D1  0E78               	swapf	(??_T1+2)^(0+-128),w
  4129  05D2  0083               	movwf	3
  4130  05D3  0EFE               	swapf	126,f
  4131  05D4  0E7E               	swapf	126,w
  4132  05D5  0009               	retfie
  4133  05D6                     __end_of_T1:	
  4134                           
  4135                           	psect	intentry
  4136  0004                     __pintentry:	
  4137                           ;incstack = 0
  4138                           ; Regs used in _T1: [wreg+status,2+status,0+pclath+cstack]
  4139                           
  4140  0004                     interrupt_function:	
  4141  007E                     saved_w	set	btemp
  4142  0004  00FE               	movwf	btemp
  4143  0005  0E03               	swapf	3,w
  4144  0006  00F8               	movwf	??_T1+2
  4145  0007  0804               	movf	4,w
  4146  0008  00F9               	movwf	??_T1+3
  4147  0009  080A               	movf	10,w
  4148  000A  00FA               	movwf	??_T1+4
  4149  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4150  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4151  000D  087F               	movf	btemp+1,w
  4152  000E  00FB               	movwf	??_T1+5
  4153  000F  120A  118A  2D97   	ljmp	_T1
  4154                           
  4155                           	psect	text22
  4156  0EFD                     __ptext22:	
  4157 ;; *************** function ___wmul *****************
  4158 ;; Defined at:
  4159 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  multiplier      2    0[COMMON] unsigned int 
  4162 ;;  multiplicand    2    2[COMMON] unsigned int 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  product         2    4[COMMON] unsigned int 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2    0[COMMON] unsigned int 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4174 ;;      Params:         4       0       0       0       0
  4175 ;;      Locals:         2       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0
  4177 ;;      Totals:         6       0       0       0       0
  4178 ;;Total ram usage:        6 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_T1
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function ___wmul
  4189  0EFD                     ___wmul:	
  4190                           
  4191                           ;incstack = 0
  4192                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4193  0EFD  01F4               	clrf	___wmul@product
  4194  0EFE  01F5               	clrf	___wmul@product+1
  4195  0EFF                     i1l1488:	
  4196  0EFF  1C70               	btfss	___wmul@multiplier,0
  4197  0F00  2F07               	goto	i1l304
  4198  0F01  0872               	movf	___wmul@multiplicand,w
  4199  0F02  07F4               	addwf	___wmul@product,f
  4200  0F03  1803               	skipnc
  4201  0F04  0AF5               	incf	___wmul@product+1,f
  4202  0F05  0873               	movf	___wmul@multiplicand+1,w
  4203  0F06  07F5               	addwf	___wmul@product+1,f
  4204  0F07                     i1l304:	
  4205  0F07  3001               	movlw	1
  4206  0F08                     u145_25:	
  4207  0F08  1003               	clrc
  4208  0F09  0DF2               	rlf	___wmul@multiplicand,f
  4209  0F0A  0DF3               	rlf	___wmul@multiplicand+1,f
  4210  0F0B  3EFF               	addlw	-1
  4211  0F0C  1D03               	skipz
  4212  0F0D  2F08               	goto	u145_25
  4213  0F0E  3001               	movlw	1
  4214  0F0F                     u146_25:	
  4215  0F0F  1003               	clrc
  4216  0F10  0CF1               	rrf	___wmul@multiplier+1,f
  4217  0F11  0CF0               	rrf	___wmul@multiplier,f
  4218  0F12  3EFF               	addlw	-1
  4219  0F13  1D03               	skipz
  4220  0F14  2F0F               	goto	u146_25
  4221  0F15  0870               	movf	___wmul@multiplier,w
  4222  0F16  0471               	iorwf	___wmul@multiplier+1,w
  4223  0F17  1D03               	btfss	3,2
  4224  0F18  2EFF               	goto	i1l1488
  4225  0F19  0875               	movf	___wmul@product+1,w
  4226  0F1A  00F1               	movwf	?___wmul+1
  4227  0F1B  0874               	movf	___wmul@product,w
  4228  0F1C  00F0               	movwf	?___wmul
  4229  0F1D  0008               	return
  4230  0F1E                     __end_of___wmul:	
  4231  007E                     btemp	set	126	;btemp
  4232  007E                     wtemp0	set	126


Data Sizes:
    Strings     104
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     45      47
    BANK1            80     36      46
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_11(CODE[4]), STR_8(CODE[4]), 
		 -> STR_5(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@p(BANK1[10]), main@h(BANK1[10]), main@t(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_txs@st	PTR unsigned char  size(2) Largest target is 12
		 -> STR_21(CODE[3]), STR_20(CODE[12]), STR_19(CODE[3]), STR_18(CODE[11]), 
		 -> STR_17(CODE[3]), STR_16(CODE[11]), main@p(BANK1[10]), main@h(BANK1[10]), 
		 -> main@t(BANK1[10]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[3]), main@p(BANK1[10]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[4]), main@h(BANK1[10]), STR_7(CODE[3]), STR_6(CODE[6]), 
		 -> main@t(BANK1[10]), STR_4(CODE[3]), STR_3(CODE[10]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _T1 in COMMON

    _T1->___wmul

Critical Paths under _main in BANK0

    _main->___fttol
    _uart_txs->_uart_txc
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _T1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _T1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _T1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _T1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    41      0    9119
                                             42 BANK0      3     3      0
                                              0 BANK1     36    36      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                           ___lwtoft
                           _adc_init
                           _adc_read
                            _sprintf
                        _timer1_init
                          _uart_init
                           _uart_txc
                           _uart_txs
 ---------------------------------------------------------------------------------
 (1) _uart_txs                                             2     0      2     544
                                              1 BANK0      2     0      2
                           _uart_txc
 ---------------------------------------------------------------------------------
 (2) _uart_txc                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1457
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      44
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1704
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             28 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2061
                                             12 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1063
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1175
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _T1                                                   6     6      0     198
                                              6 COMMON     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _adc_init
   _adc_read
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _timer1_init
   _uart_init
   _uart_txc
   _uart_txs
     _uart_txc

 _T1 (ROOT)
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      6B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     24      2E       7       57.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      6B      12        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Mar 24 15:29:49 2018

                        pc 0002                __CFG_CP$OFF 0000                         l80 0ED5  
                       l81 0ED9                         l82 0EDA                         l83 0EDE  
                       l84 0EDF                         l85 0EE3                         _T1 0597  
                       l79 0ED4                         fsr 0004        ___wmul@multiplicand 0072  
                      ?_T1 0070                        l131 0EA3                        l206 038E  
                      l134 0EA7                        l208 0374                        l158 0F46  
                      l472 06CF                        l473 06D7                        l465 06BA  
                      l556 057D                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        u965 0F96  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
                     ??_T1 0076               __CFG_LVP$OFF 0000                       l1300 0FF0  
                     l1400 0F28                       l1304 0FFB                       l1322 0F75  
                     l1260 069F                       l1316 0F59                       l1342 077A  
                     l1270 06C9                       l1262 06A4                       l1254 068C  
                     l1318 0F67                       l1326 0F80                       l1512 0464  
                     l1432 0372                       l1258 0693                       l1506 044E  
                     l1268 06BF                       l1540 04DB                       l1524 04A3  
                     l1292 0FCC                       l1452 03B4                       l1436 0376  
                     l1294 0FDA                       l1470 03EA                       l1390 05D6  
                     l1702 031F                       l1368 07A7                       l1536 04CB  
                     l1528 04B3                       l1464 03DB                       l1448 03A8  
                     l1480 0352                       l1616 008C                       l1458 03BA  
                     l1482 0431                       l1556 0523                       l1652 01C7  
                     l1628 00FE                       l1582 0572                       l1574 0555  
                     l1478 03EE                       l1584 0580                       l1576 0565  
                     l1680 02AF                       l1690 02D5                       l1674 0269  
                     l1658 020D                       l1588 058E                       l1696 02FA  
                     STR_1 062B                       STR_2 061A                       STR_3 065E  
                     STR_4 067C                       STR_5 0672                       STR_6 0668  
                     STR_7 0676                       STR_8 066E                       STR_9 066A  
                     _BRGH 04C2                       _CREN 00C4                       u1015 0698  
                     u1035 06B3                       u1125 0FCF                       u1055 06C2  
                     u1215 0F6D                       u1145 0FDB                       u1225 0F76  
                     u1155 0FE7                       u1165 0FF1                       u1255 075F  
                     u1095 06DE                       u1335 0F2F                       u1505 0470  
                     u1275 0788                       u1515 0482                       u1195 0F5C  
                     u1605 04E4                       u1545 04B4                       u1555 04BC  
                     u1635 052A                       u1395 03D1                       u1735 0161  
                     u1665 0556                       u1817 0081                       u1907 07F7  
                     u1595 04DC                       u1827 02C2                       u1837 0343  
                     u1695 0574                       u1847 0F3F                       u1857 0FA8  
                     u1867 0FBB                       u1877 06FC                       u1887 070C  
                     u1897 071D                       _RCIF 0065                       _OERR 00C1  
                     _TMR0 0001                       _SPEN 00C7                       _TRMT 04C1  
                     _TXEN 04C5                       _TXIF 0064                       _SYNC 04C4  
             __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0025                       _main 002B  
             ___ftpack@arg 0020               ___ftpack@exp 0023                       _temp 007C  
                     btemp 007E                       start 0012         ??_Lcd_Write_String 0027  
          __end_of_Lcd_Cmd 0800               ___ftmul@cntr 003A               ___ftmul@sign 003B  
             ___fttol@exp1 0049               ___fttol@lval 0045                      ?_main 0070  
                    STR_10 0676                      STR_11 066E                      STR_12 0679  
                    STR_20 063C                      STR_21 0679                      STR_13 067F  
                    STR_14 0679                      STR_15 067F                      STR_16 0648  
                    STR_17 067C              __CFG_WDTE$OFF 0000                      STR_18 0653  
                    STR_19 0676            __end_of___ftmul 0509            __end_of___fttol 0597  
          __end_of___lwdiv 1000                      i1l304 0F07            __end_of___lwmod 0F85  
                    i1l189 05CA                      _RCREG 001A                      _TMR1H 000F  
                    _TMR1L 000E                      _SPBRG 0099    __size_of_Lcd_Set_Cursor 0052  
                    _TRISA 0085                      _TRISD 0088                      _TXREG 0019  
                    _cbeat 00CA            __end_of_dpowers 061A                      _count 00CC  
                    _pbeat 00C8              ___ftpack@sign 0024                      _press 004D  
                    main@h 00B6                      main@p 00AC                      main@t 00A2  
           __CFG_BOREN$OFF 0000                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0436           __end_of_Lcd_Init 0751  
         __end_of_Lcd_Port 0EE5            __initialization 0015               __end_of_main 034B  
                   ??_main 004A              ___fttol@sign1 0044         __size_of_Lcd_Clear 000B  
                   _ADCON0 001F                     _ADCON1 009F                     _ADRESH 001E  
                   _ADRESL 009E           __end_of___ftpack 06F0           __end_of_adc_init 0E95  
         __end_of_adc_read 0F51                     i1l1488 0EFF                     _INTCON 000B  
                   u145_25 0F08                     u146_25 0F0F           __end_of___lwtoft 0EFD  
                ??_Lcd_Cmd 0021                     _TMR1IF 0060    __size_of_Lcd_Write_Char 003D  
                   _TRISC6 043E                     _TRISC7 043F             __CFG_PWRTE$OFF 0000  
                   ___wmul 0EFD                  ??___ftmul 0032                  ??___fttol 0040  
             ?_timer1_init 0070                  ??___lwdiv 0024                  ??___lwmod 002C  
    ___ftmul@f3_as_product 0037                     saved_w 007E           __end_of_uart_txc 0EAC  
         __end_of_uart_txs 05FB                  ??_sprintf 0031            Lcd_Set_Cursor@a 0027  
          Lcd_Set_Cursor@b 0024            Lcd_Set_Cursor@y 0029            Lcd_Set_Cursor@z 0028  
  __end_of__initialization 0027          __end_of_Lcd_Clear 0EA0                 ___ftmul@f1 002C  
               ___ftmul@f2 002F                 ___fttol@f1 003C             __pcstackCOMMON 0070  
               __end_of_T1 05D6                 ___lwtoft@c 0028             _Lcd_Set_Cursor 0751  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pbssBANK0 004D  
               __pbssBANK1 00C4                 __pmaintext 002B                    ?___wmul 0070  
               __pintentry 0004  __size_of_Lcd_Write_String 0041                  ?___ftpack 0020  
   __end_of_Lcd_Set_Cursor 07A3                  ?_adc_init 0070                  ?_adc_read 0020  
                ?___lwtoft 0028         __size_of_uart_init 0012                 ??_Lcd_Init 0024  
               ??_Lcd_Port 0020                 __stringtab 0600             _Lcd_Write_Char 0F85  
                  _Lcd_Cmd 07E4                  ?_uart_txc 0070                  ?_uart_txs 0021  
          __size_of___wmul 0021                    ___ftmul 0436                    ___fttol 0509  
                  ___lwdiv 0FC2                    ___lwmod 0F51                 ??___ftpack 0025  
          ?_Lcd_Set_Cursor 0024                 ??_adc_init 0020                 ??_adc_read 0022  
     __size_of_timer1_init 000F                    __ptext1 05D6                    __ptext2 0EA0  
                  __ptext3 0EBB                    __ptext4 0EAC                    __ptext5 034B  
                  __ptext6 0F51                    __ptext7 0FC2                    __ptext8 0F1E  
                  __ptext9 0E8C                 ??___lwtoft 002B                  _T1CONbits 0010  
            _p_press_count 00C4                    _dpowers 0610                    _sprintf 034B  
   __end_of_Lcd_Write_Char 0FC2       end_of_initialization 0027          __end_of_uart_init 0ECD  
               ??_uart_txc 0020                 ??_uart_txs 0023                  Lcd_Port@a 0020  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0025          Lcd_Write_String@i 002A  
               main@cpress 00A0                ___ftmul@exp 0036                  _Lcd_Clear 0E95  
            _c_press_count 00C6             __end_of___wmul 0F1E           _Lcd_Write_String 07A3  
      start_initialization 0015          __size_of_Lcd_Init 0061          __size_of_Lcd_Port 0018  
               ?_Lcd_Clear 0070                   ??___wmul 0074            Lcd_Write_Char@a 0024  
          Lcd_Write_Char@y 0023          __size_of___ftpack 006E          __size_of_adc_init 0009  
        __size_of_adc_read 0033                __pbssCOMMON 007C            adc_read@channel 0024  
                ___latbits 0002          __size_of___lwtoft 0018              __pcstackBANK0 0020  
            __pcstackBANK1 00A0                   ?_Lcd_Cmd 0070                sprintf@flag 0036  
              sprintf@prec 0034           ___lwdiv@dividend 0022           ??_Lcd_Set_Cursor 0025  
                 ?___ftmul 002C                   ?___fttol 003C                   ?___lwdiv 0020  
                 ?___lwmod 0028          __size_of_uart_txc 000C          __size_of_uart_txs 0025  
                __pstrings 0600           ___lwdiv@quotient 0025                   ?_sprintf 002E  
              __size_of_T1 003F          interrupt_function 0004             ___wmul@product 0074  
                 _PIE1bits 008C                   Lcd_Cmd@a 0023                   _PIR1bits 000C  
                 _GO_nDONE 00FA                ??_Lcd_Clear 0024                  _uart_init 0EBB  
            ??_timer1_init 0020                 uart_txc@ch 0020                 uart_txs@st 0021  
              __stringbase 060F          ___wmul@multiplier 0070           ??_Lcd_Write_Char 0021  
                main@press 00C0                   _Lcd_Init 06F0                   _Lcd_Port 0ECD  
 __end_of_Lcd_Write_String 07E4           __size_of_Lcd_Cmd 001C                 ?_uart_init 0070  
         __size_of___ftmul 00D3           __size_of___fttol 008E           __size_of___lwdiv 003E  
         __size_of___lwmod 0034                   ___ftpack 0682         __end_of__stringtab 0610  
                 _adc_init 0E8C                   _adc_read 0F1E                   ___lwtoft 0EE5  
      __end_of_timer1_init 0EBB                 sprintf@val 0037            ___lwdiv@divisor 0020  
          ___lwdiv@counter 0027                   __ptext10 0EE5                   __ptext11 0509  
                 __ptext20 0ECD                   __ptext12 0436                   __ptext21 0597  
                 __ptext13 0682                   __ptext22 0EFD                   __ptext14 07A3  
                 __ptext15 0F85                   __ptext16 0751                   __ptext17 06F0  
                 __ptext18 0E95                   __ptext19 07E4           __size_of_sprintf 00EB  
            __size_of_main 0320                   _uart_txc 0EA0                   _uart_txs 05D6  
                 main@temp 00C2         Lcd_Write_Char@temp 0022                   intlevel1 0000  
                sprintf@ap 0035                  sprintf@sp 0039           ___lwmod@dividend 002A  
                stringcode 060A                ??_uart_init 0020                _timer1_init 0EAC  
       Lcd_Set_Cursor@temp 002A                 _OPTION_REG 0081                   sprintf@c 003A  
                 sprintf@f 002E            ___lwmod@divisor 0028            ___lwmod@counter 002D  
                 stringdir 060A                   stringtab 0600  
