

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Mar 20 16:22:18 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.42
    41                           ; Generated 13/04/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134                           
   135                           	psect	strings
   136  051E                     __pstrings:	
   137  051E                     stringtab:	
   138  051E                     __stringtab:	
   139                           
   140                           ;	String table - string pointers are 1 byte each
   141  051E  1BFF               	btfsc	btemp+1,7
   142  051F  2D28               	ljmp	stringcode
   143  0520  1383               	bcf	3,7
   144  0521  187F               	btfsc	btemp+1,0
   145  0522  1783               	bsf	3,7
   146  0523  0800               	movf	0,w
   147  0524  0A84               	incf	4,f
   148  0525  1903               	skipnz
   149  0526  0AFF               	incf	btemp+1,f
   150  0527  0008               	return
   151  0528                     stringcode:	
   152  0528                     stringdir:	
   153  0528  3005               	movlw	high stringdir
   154  0529  008A               	movwf	10
   155  052A  0804               	movf	4,w
   156  052B  0A84               	incf	4,f
   157  052C  0782               	addwf	2,f
   158  052D                     __stringbase:	
   159  052D  3400               	retlw	0
   160  052E                     __end_of__stringtab:	
   161  052E                     _dpowers:	
   162  052E  3401               	retlw	1
   163  052F  3400               	retlw	0
   164  0530  340A               	retlw	10
   165  0531  3400               	retlw	0
   166  0532  3464               	retlw	100
   167  0533  3400               	retlw	0
   168  0534  34E8               	retlw	232
   169  0535  3403               	retlw	3
   170  0536  3410               	retlw	16
   171  0537  3427               	retlw	39
   172  0538                     __end_of_dpowers:	
   173  001E                     _ADRESH	set	30
   174  001F                     _ADCON0	set	31
   175  001A                     _RCREG	set	26
   176  0019                     _TXREG	set	25
   177  005E                     _PEIE	set	94
   178  005F                     _GIE	set	95
   179  0031                     _RB1	set	49
   180  0030                     _RB0	set	48
   181  00FA                     _GO_nDONE	set	250
   182  0032                     _RB2	set	50
   183  00C1                     _OERR	set	193
   184  0064                     _TXIF	set	100
   185  0065                     _RCIF	set	101
   186  00C4                     _CREN	set	196
   187  00C7                     _SPEN	set	199
   188  0043                     _RD3	set	67
   189  0042                     _RD2	set	66
   190  0047                     _RD7	set	71
   191  0046                     _RD6	set	70
   192  0045                     _RD5	set	69
   193  0044                     _RD4	set	68
   194  0086                     _TRISBbits	set	134
   195  0085                     _TRISA	set	133
   196  0088                     _TRISD	set	136
   197  009E                     _ADRESL	set	158
   198  009F                     _ADCON1	set	159
   199  0099                     _SPBRG	set	153
   200  0432                     _TRISB2	set	1074
   201  04C1                     _TRMT	set	1217
   202  0465                     _RCIE	set	1125
   203  04C5                     _TXEN	set	1221
   204  04C4                     _SYNC	set	1220
   205  04C2                     _BRGH	set	1218
   206  043F                     _TRISC7	set	1087
   207  043E                     _TRISC6	set	1086
   208  0538                     STR_2:	
   209  0538  3420               	retlw	32	;' '
   210  0539  3444               	retlw	68	;'D'
   211  053A  3472               	retlw	114	;'r'
   212  053B  3469               	retlw	105	;'i'
   213  053C  3470               	retlw	112	;'p'
   214  053D  3470               	retlw	112	;'p'
   215  053E  3469               	retlw	105	;'i'
   216  053F  346E               	retlw	110	;'n'
   217  0540  3467               	retlw	103	;'g'
   218  0541  3420               	retlw	32	;' '
   219  0542  3461               	retlw	97	;'a'
   220  0543  3467               	retlw	103	;'g'
   221  0544  3472               	retlw	114	;'r'
   222  0545  3469               	retlw	105	;'i'
   223  0546  3420               	retlw	32	;' '
   224  0547  3420               	retlw	32	;' '
   225  0548  3400               	retlw	0
   226  0549                     STR_1:	
   227  0549  344C               	retlw	76	;'L'
   228  054A  3449               	retlw	73	;'I'
   229  054B  3446               	retlw	70	;'F'
   230  054C  3449               	retlw	73	;'I'
   231  054D  3420               	retlw	32	;' '
   232  054E  3442               	retlw	66	;'B'
   233  054F  3461               	retlw	97	;'a'
   234  0550  3473               	retlw	115	;'s'
   235  0551  3465               	retlw	101	;'e'
   236  0552  3464               	retlw	100	;'d'
   237  0553  3420               	retlw	32	;' '
   238  0554  3457               	retlw	87	;'W'
   239  0555  3461               	retlw	97	;'a'
   240  0556  3474               	retlw	116	;'t'
   241  0557  3465               	retlw	101	;'e'
   242  0558  3472               	retlw	114	;'r'
   243  0559  3400               	retlw	0
   244  055A                     STR_8:	
   245  055A  3420               	retlw	32	;' '
   246  055B  3420               	retlw	32	;' '
   247  055C  3420               	retlw	32	;' '
   248  055D  3457               	retlw	87	;'W'
   249  055E  3465               	retlw	101	;'e'
   250  055F  3474               	retlw	116	;'t'
   251  0560  3420               	retlw	32	;' '
   252  0561  3453               	retlw	83	;'S'
   253  0562  346F               	retlw	111	;'o'
   254  0563  3469               	retlw	105	;'i'
   255  0564  346C               	retlw	108	;'l'
   256  0565  3420               	retlw	32	;' '
   257  0566  3420               	retlw	32	;' '
   258  0567  3420               	retlw	32	;' '
   259  0568  3400               	retlw	0
   260  0569                     STR_7:	
   261  0569  3420               	retlw	32	;' '
   262  056A  3420               	retlw	32	;' '
   263  056B  3420               	retlw	32	;' '
   264  056C  3444               	retlw	68	;'D'
   265  056D  3472               	retlw	114	;'r'
   266  056E  3479               	retlw	121	;'y'
   267  056F  3420               	retlw	32	;' '
   268  0570  3453               	retlw	83	;'S'
   269  0571  346F               	retlw	111	;'o'
   270  0572  3469               	retlw	105	;'i'
   271  0573  346C               	retlw	108	;'l'
   272  0574  3420               	retlw	32	;' '
   273  0575  3420               	retlw	32	;' '
   274  0576  3420               	retlw	32	;' '
   275  0577  3400               	retlw	0
   276  0578                     STR_5:	
   277  0578  3420               	retlw	32	;' '
   278  0579  3444               	retlw	68	;'D'
   279  057A  3472               	retlw	114	;'r'
   280  057B  3479               	retlw	121	;'y'
   281  057C  3420               	retlw	32	;' '
   282  057D  3420               	retlw	32	;' '
   283  057E  3420               	retlw	32	;' '
   284  057F  3420               	retlw	32	;' '
   285  0580  3420               	retlw	32	;' '
   286  0581  3400               	retlw	0
   287  0582                     STR_6:	
   288  0582  3452               	retlw	82	;'R'
   289  0583  3448               	retlw	72	;'H'
   290  0584  343A               	retlw	58	;':'
   291  0585  3425               	retlw	37	;'%'
   292  0586  3475               	retlw	117	;'u'
   293  0587  3425               	retlw	37	;'%'
   294  0588  3425               	retlw	37	;'%'
   295  0589  3420               	retlw	32	;' '
   296  058A  3400               	retlw	0
   297  058B                     STR_3:	
   298  058B  3454               	retlw	84	;'T'
   299  058C  3465               	retlw	101	;'e'
   300  058D  346D               	retlw	109	;'m'
   301  058E  343A               	retlw	58	;':'
   302  058F  3425               	retlw	37	;'%'
   303  0590  3475               	retlw	117	;'u'
   304  0591  3443               	retlw	67	;'C'
   305  0592  3420               	retlw	32	;' '
   306  0593  3400               	retlw	0
   307  0594                     STR_4:	
   308  0594  3448               	retlw	72	;'H'
   309  0595  3469               	retlw	105	;'i'
   310  0596  3467               	retlw	103	;'g'
   311  0597  3468               	retlw	104	;'h'
   312  0598  3420               	retlw	32	;' '
   313  0599  3474               	retlw	116	;'t'
   314  059A  3465               	retlw	101	;'e'
   315  059B  346D               	retlw	109	;'m'
   316  059C  3400               	retlw	0
   317                           
   318                           ; #config settings
   319  0000                     
   320                           	psect	cinit
   321  0015                     start_initialization:	
   322  0015                     __initialization:	
   323                           
   324                           ; Clear objects allocated to COMMON
   325  0015  01F7               	clrf	__pbssCOMMON& (0+127)
   326  0016  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   327                           
   328                           ; Clear objects allocated to BANK0
   329  0017  1383               	bcf	3,7	;select IRP bank0
   330  0018  305F               	movlw	low __pbssBANK0
   331  0019  0084               	movwf	4
   332  001A  306C               	movlw	low (__pbssBANK0+13)
   333  001B  120A  158A  26F0  120A  118A  	fcall	clear_ram0
   334                           
   335                           ; Clear objects allocated to BANK1
   336  0020  30A0               	movlw	low __pbssBANK1
   337  0021  0084               	movwf	4
   338  0022  30BE               	movlw	low (__pbssBANK1+30)
   339  0023  120A  158A  26F0   	fcall	clear_ram0
   340  0026                     end_of_initialization:	
   341                           ;End of C runtime variable initialization code
   342                           
   343  0026                     __end_of__initialization:	
   344  0026  0183               	clrf	3
   345  0027  120A  118A  282A   	ljmp	_main	;jump to C main() function
   346                           
   347                           	psect	bssCOMMON
   348  0077                     __pbssCOMMON:	
   349  0077                     _recv:	
   350  0077                     	ds	1
   351  0078                     _b:	
   352  0078                     	ds	1
   353                           
   354                           	psect	bssBANK0
   355  005F                     __pbssBANK0:	
   356  005F                     _ADCvalue1:	
   357  005F                     	ds	2
   358  0061                     _moist:	
   359  0061                     	ds	2
   360  0063                     _temp:	
   361  0063                     	ds	2
   362  0065                     _sum:	
   363  0065                     	ds	1
   364  0066                     _rh2:	
   365  0066                     	ds	1
   366  0067                     _rh1:	
   367  0067                     	ds	1
   368  0068                     _t2:	
   369  0068                     	ds	1
   370  0069                     _t1:	
   371  0069                     	ds	1
   372  006A                     _i:	
   373  006A                     	ds	1
   374  006B                     _a:	
   375  006B                     	ds	1
   376                           
   377                           	psect	bssBANK1
   378  00A0                     __pbssBANK1:	
   379  00A0                     _m:	
   380  00A0                     	ds	10
   381  00AA                     _hum:	
   382  00AA                     	ds	10
   383  00B4                     _t:	
   384  00B4                     	ds	10
   385                           
   386                           	psect	clrtext
   387  0EF0                     clear_ram0:	
   388                           ;	Called with FSR containing the base address, and
   389                           ;	W with the last address+1
   390                           
   391  0EF0  0064               	clrwdt	;clear the watchdog before getting into this loop
   392  0EF1                     clrloop0:	
   393  0EF1  0180               	clrf	0	;clear RAM location pointed to by FSR
   394  0EF2  0A84               	incf	4,f	;increment pointer
   395  0EF3  0604               	xorwf	4,w	;XOR with final address
   396  0EF4  1903               	btfsc	3,2	;have we reached the end yet?
   397  0EF5  3400               	retlw	0	;all done for this memory range, return
   398  0EF6  0604               	xorwf	4,w	;XOR again to restore value
   399  0EF7  2EF1               	goto	clrloop0	;do the next byte
   400                           
   401                           	psect	cstackCOMMON
   402  0070                     __pcstackCOMMON:	
   403  0070                     ?_Lcd_Port:	
   404  0070                     ?_Lcd_Cmd:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_Lcd_Init:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_Lcd_Write_Char:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_uart_init:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_uart_txc:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_uart_rx:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ??_uart_rx:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_StartSignal:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_CheckResponse:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_ReadData:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_adc_init:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_main:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_ISR:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ??_ISR:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_Lcd_Clear:	
   447                           ; 1 bytes @ 0x0
   448                           
   449                           
   450                           ; 2 bytes @ 0x0
   451  0070                     	ds	5
   452  0075                     ??_Lcd_Port:	
   453  0075                     ??_uart_init:	
   454                           ; 1 bytes @ 0x5
   455                           
   456  0075                     ??_uart_txc:	
   457                           ; 1 bytes @ 0x5
   458                           
   459  0075                     ??_StartSignal:	
   460                           ; 1 bytes @ 0x5
   461                           
   462  0075                     ??_CheckResponse:	
   463                           ; 1 bytes @ 0x5
   464                           
   465  0075                     ??_ReadData:	
   466                           ; 1 bytes @ 0x5
   467                           
   468  0075                     ??_adc_init:	
   469                           ; 1 bytes @ 0x5
   470                           
   471  0075                     ??___lwdiv:	
   472                           ; 1 bytes @ 0x5
   473                           
   474  0075                     ??___lwtoft:	
   475                           ; 1 bytes @ 0x5
   476                           
   477  0075                     ?_adc_read:	
   478                           ; 1 bytes @ 0x5
   479                           
   480  0075                     Lcd_Port@a:	
   481                           ; 2 bytes @ 0x5
   482                           
   483  0075                     uart_txc@ch:	
   484                           ; 1 bytes @ 0x5
   485                           
   486                           
   487                           ; 1 bytes @ 0x5
   488  0075                     	ds	1
   489  0076                     ??_Lcd_Write_Char:	
   490  0076                     ??___lwmod:	
   491                           ; 1 bytes @ 0x6
   492                           
   493  0076                     Lcd_Cmd@a:	
   494                           ; 1 bytes @ 0x6
   495                           
   496                           
   497                           ; 1 bytes @ 0x6
   498  0076                     	ds	1
   499  0077                     ??_Lcd_Clear:	
   500                           
   501                           	psect	cstackBANK0
   502  0020                     __pcstackBANK0:	
   503                           ; 1 bytes @ 0x7
   504                           
   505  0020                     ??_Lcd_Cmd:	
   506  0020                     ??_adc_read:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0020                     ?___lwdiv:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0020                     ?___ftpack:	
   513                           ; 2 bytes @ 0x0
   514                           
   515  0020                     Lcd_Write_Char@temp:	
   516                           ; 3 bytes @ 0x0
   517                           
   518  0020                     ___lwdiv@divisor:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0020                     ___ftpack@arg:	
   522                           ; 2 bytes @ 0x0
   523                           
   524                           
   525                           ; 3 bytes @ 0x0
   526  0020                     	ds	1
   527  0021                     Lcd_Write_Char@y:	
   528                           
   529                           ; 1 bytes @ 0x1
   530  0021                     	ds	1
   531  0022                     ?_Lcd_Set_Cursor:	
   532  0022                     ??_Lcd_Init:	
   533                           ; 1 bytes @ 0x2
   534                           
   535  0022                     Lcd_Set_Cursor@b:	
   536                           ; 1 bytes @ 0x2
   537                           
   538  0022                     Lcd_Write_Char@a:	
   539                           ; 1 bytes @ 0x2
   540                           
   541  0022                     adc_read@channel:	
   542                           ; 1 bytes @ 0x2
   543                           
   544  0022                     ___lwdiv@dividend:	
   545                           ; 1 bytes @ 0x2
   546                           
   547                           
   548                           ; 2 bytes @ 0x2
   549  0022                     	ds	1
   550  0023                     ??_Lcd_Set_Cursor:	
   551  0023                     ?_Lcd_Write_String:	
   552                           ; 1 bytes @ 0x3
   553                           
   554  0023                     ___ftpack@exp:	
   555                           ; 1 bytes @ 0x3
   556                           
   557  0023                     Lcd_Write_String@a:	
   558                           ; 1 bytes @ 0x3
   559                           
   560                           
   561                           ; 2 bytes @ 0x3
   562  0023                     	ds	1
   563  0024                     ___ftpack@sign:	
   564  0024                     ___lwdiv@counter:	
   565                           ; 1 bytes @ 0x4
   566                           
   567                           
   568                           ; 1 bytes @ 0x4
   569  0024                     	ds	1
   570  0025                     ??___ftpack:	
   571  0025                     ??_Lcd_Write_String:	
   572                           ; 1 bytes @ 0x5
   573                           
   574  0025                     Lcd_Set_Cursor@a:	
   575                           ; 1 bytes @ 0x5
   576                           
   577  0025                     ___lwdiv@quotient:	
   578                           ; 1 bytes @ 0x5
   579                           
   580                           
   581                           ; 2 bytes @ 0x5
   582  0025                     	ds	1
   583  0026                     Lcd_Set_Cursor@z:	
   584                           
   585                           ; 1 bytes @ 0x6
   586  0026                     	ds	1
   587  0027                     ?___lwmod:	
   588  0027                     Lcd_Set_Cursor@y:	
   589                           ; 2 bytes @ 0x7
   590                           
   591  0027                     ___lwmod@divisor:	
   592                           ; 1 bytes @ 0x7
   593                           
   594                           
   595                           ; 2 bytes @ 0x7
   596  0027                     	ds	1
   597  0028                     ?___lwtoft:	
   598  0028                     Lcd_Set_Cursor@temp:	
   599                           ; 3 bytes @ 0x8
   600                           
   601  0028                     Lcd_Write_String@i:	
   602                           ; 1 bytes @ 0x8
   603                           
   604  0028                     ___lwtoft@c:	
   605                           ; 2 bytes @ 0x8
   606                           
   607                           
   608                           ; 2 bytes @ 0x8
   609  0028                     	ds	1
   610  0029                     ___lwmod@dividend:	
   611                           
   612                           ; 2 bytes @ 0x9
   613  0029                     	ds	2
   614  002B                     ?___ftdiv:	
   615  002B                     ___lwmod@counter:	
   616                           ; 3 bytes @ 0xB
   617                           
   618  002B                     ___ftdiv@f2:	
   619                           ; 1 bytes @ 0xB
   620                           
   621                           
   622                           ; 3 bytes @ 0xB
   623  002B                     	ds	1
   624  002C                     ?_sprintf:	
   625  002C                     sprintf@f:	
   626                           ; 2 bytes @ 0xC
   627                           
   628                           
   629                           ; 1 bytes @ 0xC
   630  002C                     	ds	2
   631  002E                     ___ftdiv@f1:	
   632                           
   633                           ; 3 bytes @ 0xE
   634  002E                     	ds	1
   635  002F                     ??_sprintf:	
   636                           
   637                           ; 1 bytes @ 0xF
   638  002F                     	ds	2
   639  0031                     ??___ftdiv:	
   640                           
   641                           ; 1 bytes @ 0x11
   642  0031                     	ds	1
   643  0032                     sprintf@flag:	
   644                           
   645                           ; 1 bytes @ 0x12
   646  0032                     	ds	1
   647  0033                     sprintf@ap:	
   648                           
   649                           ; 1 bytes @ 0x13
   650  0033                     	ds	1
   651  0034                     sprintf@val:	
   652                           
   653                           ; 2 bytes @ 0x14
   654  0034                     	ds	1
   655  0035                     ___ftdiv@cntr:	
   656                           
   657                           ; 1 bytes @ 0x15
   658  0035                     	ds	1
   659  0036                     sprintf@prec:	
   660  0036                     ___ftdiv@f3:	
   661                           ; 1 bytes @ 0x16
   662                           
   663                           
   664                           ; 3 bytes @ 0x16
   665  0036                     	ds	1
   666  0037                     sprintf@sp:	
   667                           
   668                           ; 1 bytes @ 0x17
   669  0037                     	ds	1
   670  0038                     sprintf@c:	
   671                           
   672                           ; 1 bytes @ 0x18
   673  0038                     	ds	1
   674  0039                     ___ftdiv@exp:	
   675                           
   676                           ; 1 bytes @ 0x19
   677  0039                     	ds	1
   678  003A                     ___ftdiv@sign:	
   679                           
   680                           ; 1 bytes @ 0x1A
   681  003A                     	ds	1
   682  003B                     ?___ftmul:	
   683  003B                     ___ftmul@f1:	
   684                           ; 3 bytes @ 0x1B
   685                           
   686                           
   687                           ; 3 bytes @ 0x1B
   688  003B                     	ds	3
   689  003E                     ___ftmul@f2:	
   690                           
   691                           ; 3 bytes @ 0x1E
   692  003E                     	ds	3
   693  0041                     ??___ftmul:	
   694                           
   695                           ; 1 bytes @ 0x21
   696  0041                     	ds	4
   697  0045                     ___ftmul@exp:	
   698                           
   699                           ; 1 bytes @ 0x25
   700  0045                     	ds	1
   701  0046                     ___ftmul@f3_as_product:	
   702                           
   703                           ; 3 bytes @ 0x26
   704  0046                     	ds	3
   705  0049                     ___ftmul@cntr:	
   706                           
   707                           ; 1 bytes @ 0x29
   708  0049                     	ds	1
   709  004A                     ___ftmul@sign:	
   710                           
   711                           ; 1 bytes @ 0x2A
   712  004A                     	ds	1
   713  004B                     ?___fttol:	
   714  004B                     ___fttol@f1:	
   715                           ; 4 bytes @ 0x2B
   716                           
   717                           
   718                           ; 3 bytes @ 0x2B
   719  004B                     	ds	4
   720  004F                     ??___fttol:	
   721                           
   722                           ; 1 bytes @ 0x2F
   723  004F                     	ds	4
   724  0053                     ___fttol@sign1:	
   725                           
   726                           ; 1 bytes @ 0x33
   727  0053                     	ds	1
   728  0054                     ___fttol@lval:	
   729                           
   730                           ; 4 bytes @ 0x34
   731  0054                     	ds	4
   732  0058                     ___fttol@exp1:	
   733                           
   734                           ; 1 bytes @ 0x38
   735  0058                     	ds	1
   736  0059                     ??_main:	
   737                           
   738                           ; 1 bytes @ 0x39
   739  0059                     	ds	6
   740                           
   741                           	psect	maintext
   742  002A                     __pmaintext:	
   743 ;;
   744 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   745 ;;
   746 ;; *************** function _main *****************
   747 ;; Defined at:
   748 ;;		line 104 in file "LIFI_agri.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : B00/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   762 ;;      Params:         0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0
   764 ;;      Temps:          0       6       0       0       0
   765 ;;      Totals:         0       6       0       0       0
   766 ;;Total ram usage:        6 bytes
   767 ;; Hardware stack levels required when called:    5
   768 ;; This function calls:
   769 ;;		_CheckResponse
   770 ;;		_Lcd_Clear
   771 ;;		_Lcd_Init
   772 ;;		_Lcd_Set_Cursor
   773 ;;		_Lcd_Write_String
   774 ;;		_ReadData
   775 ;;		_StartSignal
   776 ;;		___ftdiv
   777 ;;		___ftmul
   778 ;;		___fttol
   779 ;;		___lwtoft
   780 ;;		_adc_init
   781 ;;		_adc_read
   782 ;;		_sprintf
   783 ;;		_uart_init
   784 ;;		_uart_txc
   785 ;; This function is called by:
   786 ;;		Startup code after reset
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           
   791                           ;psect for function _main
   792  002A                     _main:	
   793                           
   794                           ;LIFI_agri.c: 105: TRISD = 0x00;
   795                           
   796                           ;incstack = 0
   797                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   798  002A  1683               	bsf	3,5	;RP0=1, select bank1
   799  002B  1303               	bcf	3,6	;RP1=0, select bank1
   800  002C  0188               	clrf	8	;volatile
   801                           
   802                           ;LIFI_agri.c: 106: TRISA = 0xFF;
   803  002D  30FF               	movlw	255
   804  002E  0085               	movwf	5	;volatile
   805                           
   806                           ;LIFI_agri.c: 107: TRISBbits.TRISB0 = 0;
   807  002F  1006               	bcf	6,0	;volatile
   808                           
   809                           ;LIFI_agri.c: 108: TRISBbits.TRISB1 = 0;
   810  0030  1086               	bcf	6,1	;volatile
   811                           
   812                           ;LIFI_agri.c: 109: RB0 = 0;
   813  0031  1283               	bcf	3,5	;RP0=0, select bank0
   814  0032  1303               	bcf	3,6	;RP1=0, select bank0
   815  0033  1006               	bcf	6,0	;volatile
   816                           
   817                           ;LIFI_agri.c: 110: RB1 = 0;
   818  0034  1086               	bcf	6,1	;volatile
   819                           
   820                           ;LIFI_agri.c: 111: Lcd_Init();
   821  0035  120A  118A  260B  120A  118A  	fcall	_Lcd_Init
   822                           
   823                           ;LIFI_agri.c: 112: uart_init();
   824  003A  120A  158A  273A  120A  118A  	fcall	_uart_init
   825                           
   826                           ;LIFI_agri.c: 113: adc_init();
   827  003F  120A  158A  26F8  120A  118A  	fcall	_adc_init
   828                           
   829                           ;LIFI_agri.c: 114: GIE = 1;
   830  0044  178B               	bsf	11,7	;volatile
   831                           
   832                           ;LIFI_agri.c: 115: PEIE = 1;
   833  0045  170B               	bsf	11,6	;volatile
   834                           
   835                           ;LIFI_agri.c: 116: Lcd_Clear();
   836  0046  120A  158A  270B  120A  118A  	fcall	_Lcd_Clear
   837                           
   838                           ;LIFI_agri.c: 117: Lcd_Set_Cursor(1,1);
   839  004B  1283               	bcf	3,5	;RP0=0, select bank0
   840  004C  1303               	bcf	3,6	;RP1=0, select bank0
   841  004D  01A2               	clrf	Lcd_Set_Cursor@b
   842  004E  0AA2               	incf	Lcd_Set_Cursor@b,f
   843  004F  3001               	movlw	1
   844  0050  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
   845                           
   846                           ;LIFI_agri.c: 118: Lcd_Write_String("LIFI Based Water");
   847  0055  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   848  0056  1283               	bcf	3,5	;RP0=0, select bank0
   849  0057  1303               	bcf	3,6	;RP1=0, select bank0
   850  0058  00A3               	movwf	Lcd_Write_String@a
   851  0059  3080               	movlw	128
   852  005A  00A4               	movwf	Lcd_Write_String@a+1
   853  005B  120A  118A  26BE  120A  118A  	fcall	_Lcd_Write_String
   854                           
   855                           ;LIFI_agri.c: 119: Lcd_Set_Cursor(2,1);
   856  0060  1283               	bcf	3,5	;RP0=0, select bank0
   857  0061  1303               	bcf	3,6	;RP1=0, select bank0
   858  0062  01A2               	clrf	Lcd_Set_Cursor@b
   859  0063  0AA2               	incf	Lcd_Set_Cursor@b,f
   860  0064  3002               	movlw	2
   861  0065  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
   862                           
   863                           ;LIFI_agri.c: 120: Lcd_Write_String(" Dripping agri  ");
   864  006A  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   865  006B  1283               	bcf	3,5	;RP0=0, select bank0
   866  006C  1303               	bcf	3,6	;RP1=0, select bank0
   867  006D  00A3               	movwf	Lcd_Write_String@a
   868  006E  3080               	movlw	128
   869  006F  00A4               	movwf	Lcd_Write_String@a+1
   870  0070  120A  118A  26BE  120A  118A  	fcall	_Lcd_Write_String
   871                           
   872                           ;LIFI_agri.c: 121: _delay((unsigned long)((2000)*(20000000/4000.0)));
   873  0075  3033               	movlw	51
   874  0076  1283               	bcf	3,5	;RP0=0, select bank0
   875  0077  1303               	bcf	3,6	;RP1=0, select bank0
   876  0078  00DB               	movwf	??_main+2
   877  0079  30BB               	movlw	187
   878  007A  00DA               	movwf	??_main+1
   879  007B  30DF               	movlw	223
   880  007C  00D9               	movwf	??_main
   881  007D                     u2717:	
   882  007D  0BD9               	decfsz	??_main,f
   883  007E  287D               	goto	u2717
   884  007F  0BDA               	decfsz	??_main+1,f
   885  0080  287D               	goto	u2717
   886  0081  0BDB               	decfsz	??_main+2,f
   887  0082  287D               	goto	u2717
   888                           
   889                           ;LIFI_agri.c: 122: Lcd_Clear();
   890  0083  120A  158A  270B  120A  118A  	fcall	_Lcd_Clear
   891  0088                     l2144:	
   892                           ;LIFI_agri.c: 123: while(1){
   893                           
   894                           
   895                           ;LIFI_agri.c: 124: temp = adc_read(0);
   896  0088  3000               	movlw	0
   897  0089  120A  158A  27CF  120A  118A  	fcall	_adc_read
   898  008E  0876               	movf	?_adc_read+1,w
   899  008F  1283               	bcf	3,5	;RP0=0, select bank0
   900  0090  1303               	bcf	3,6	;RP1=0, select bank0
   901  0091  00E4               	movwf	_temp+1
   902  0092  0875               	movf	?_adc_read,w
   903  0093  00E3               	movwf	_temp
   904                           
   905                           ;LIFI_agri.c: 125: ADCvalue1 = adc_read(1);
   906  0094  3001               	movlw	1
   907  0095  120A  158A  27CF  120A  118A  	fcall	_adc_read
   908  009A  0876               	movf	?_adc_read+1,w
   909  009B  1283               	bcf	3,5	;RP0=0, select bank0
   910  009C  1303               	bcf	3,6	;RP1=0, select bank0
   911  009D  00E0               	movwf	_ADCvalue1+1
   912  009E  0875               	movf	?_adc_read,w
   913  009F  00DF               	movwf	_ADCvalue1
   914                           
   915                           ;LIFI_agri.c: 126: temp = temp*0.488;
   916  00A0  0864               	movf	_temp+1,w
   917  00A1  00A9               	movwf	___lwtoft@c+1
   918  00A2  0863               	movf	_temp,w
   919  00A3  00A8               	movwf	___lwtoft@c
   920  00A4  120A  158A  2722  120A  118A  	fcall	___lwtoft
   921  00A9  1283               	bcf	3,5	;RP0=0, select bank0
   922  00AA  1303               	bcf	3,6	;RP1=0, select bank0
   923  00AB  0828               	movf	?___lwtoft,w
   924  00AC  00BE               	movwf	___ftmul@f2
   925  00AD  0829               	movf	?___lwtoft+1,w
   926  00AE  00BF               	movwf	___ftmul@f2+1
   927  00AF  082A               	movf	?___lwtoft+2,w
   928  00B0  00C0               	movwf	___ftmul@f2+2
   929  00B1  30DB               	movlw	219
   930  00B2  00BB               	movwf	___ftmul@f1
   931  00B3  30F9               	movlw	249
   932  00B4  00BC               	movwf	___ftmul@f1+1
   933  00B5  303E               	movlw	62
   934  00B6  00BD               	movwf	___ftmul@f1+2
   935  00B7  120A  118A  2246  120A  118A  	fcall	___ftmul
   936  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   937  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   938  00BE  083B               	movf	?___ftmul,w
   939  00BF  00CB               	movwf	___fttol@f1
   940  00C0  083C               	movf	?___ftmul+1,w
   941  00C1  00CC               	movwf	___fttol@f1+1
   942  00C2  083D               	movf	?___ftmul+2,w
   943  00C3  00CD               	movwf	___fttol@f1+2
   944  00C4  120A  118A  2490  120A  118A  	fcall	___fttol
   945  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   946  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   947  00CB  084C               	movf	?___fttol+1,w
   948  00CC  00E4               	movwf	_temp+1
   949  00CD  084B               	movf	?___fttol,w
   950  00CE  00E3               	movwf	_temp
   951                           
   952                           ;LIFI_agri.c: 127: sprintf(t,"Tem:%uC ",temp);
   953  00CF  305E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   954  00D0  00D9               	movwf	??_main
   955  00D1  0859               	movf	??_main,w
   956  00D2  00AC               	movwf	sprintf@f
   957  00D3  0864               	movf	_temp+1,w
   958  00D4  00AE               	movwf	?_sprintf+2
   959  00D5  0863               	movf	_temp,w
   960  00D6  00AD               	movwf	?_sprintf+1
   961  00D7  30B4               	movlw	(low (_t| 0))& (0+255)
   962  00D8  120A  118A  2319  120A  118A  	fcall	_sprintf
   963                           
   964                           ;LIFI_agri.c: 128: moist = ((float)ADCvalue1/1023)*100;
   965  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   966  00DE  1303               	bcf	3,6	;RP1=0, select bank0
   967  00DF  0860               	movf	_ADCvalue1+1,w
   968  00E0  00A9               	movwf	___lwtoft@c+1
   969  00E1  085F               	movf	_ADCvalue1,w
   970  00E2  00A8               	movwf	___lwtoft@c
   971  00E3  120A  158A  2722  120A  118A  	fcall	___lwtoft
   972  00E8  1283               	bcf	3,5	;RP0=0, select bank0
   973  00E9  1303               	bcf	3,6	;RP1=0, select bank0
   974  00EA  0828               	movf	?___lwtoft,w
   975  00EB  00AE               	movwf	___ftdiv@f1
   976  00EC  0829               	movf	?___lwtoft+1,w
   977  00ED  00AF               	movwf	___ftdiv@f1+1
   978  00EE  082A               	movf	?___lwtoft+2,w
   979  00EF  00B0               	movwf	___ftdiv@f1+2
   980  00F0  30C0               	movlw	192
   981  00F1  00AB               	movwf	___ftdiv@f2
   982  00F2  307F               	movlw	127
   983  00F3  00AC               	movwf	___ftdiv@f2+1
   984  00F4  3044               	movlw	68
   985  00F5  00AD               	movwf	___ftdiv@f2+2
   986  00F6  120A  118A  23D8  120A  118A  	fcall	___ftdiv
   987  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   988  00FC  1303               	bcf	3,6	;RP1=0, select bank0
   989  00FD  082B               	movf	?___ftdiv,w
   990  00FE  00BE               	movwf	___ftmul@f2
   991  00FF  082C               	movf	?___ftdiv+1,w
   992  0100  00BF               	movwf	___ftmul@f2+1
   993  0101  082D               	movf	?___ftdiv+2,w
   994  0102  00C0               	movwf	___ftmul@f2+2
   995  0103  3000               	movlw	0
   996  0104  00BB               	movwf	___ftmul@f1
   997  0105  30C8               	movlw	200
   998  0106  00BC               	movwf	___ftmul@f1+1
   999  0107  3042               	movlw	66
  1000  0108  00BD               	movwf	___ftmul@f1+2
  1001  0109  120A  118A  2246  120A  118A  	fcall	___ftmul
  1002  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1003  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1004  0110  083B               	movf	?___ftmul,w
  1005  0111  00CB               	movwf	___fttol@f1
  1006  0112  083C               	movf	?___ftmul+1,w
  1007  0113  00CC               	movwf	___fttol@f1+1
  1008  0114  083D               	movf	?___ftmul+2,w
  1009  0115  00CD               	movwf	___fttol@f1+2
  1010  0116  120A  118A  2490  120A  118A  	fcall	___fttol
  1011  011B  1283               	bcf	3,5	;RP0=0, select bank0
  1012  011C  1303               	bcf	3,6	;RP1=0, select bank0
  1013  011D  084C               	movf	?___fttol+1,w
  1014  011E  00E2               	movwf	_moist+1
  1015  011F  084B               	movf	?___fttol,w
  1016  0120  00E1               	movwf	_moist
  1017                           
  1018                           ;LIFI_agri.c: 129: StartSignal();
  1019  0121  120A  118A  27E5  120A  118A  	fcall	_StartSignal
  1020                           
  1021                           ;LIFI_agri.c: 130: CheckResponse();
  1022  0126  120A  158A  276C  120A  118A  	fcall	_CheckResponse
  1023                           
  1024                           ;LIFI_agri.c: 131: if(a == 1){
  1025  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1026  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1027  012D  036B               	decf	_a,w
  1028  012E  1D03               	btfss	3,2
  1029  012F  2967               	goto	l201
  1030                           
  1031                           ;LIFI_agri.c: 132: ReadData();
  1032  0130  120A  118A  273D  120A  118A  	fcall	_ReadData
  1033                           
  1034                           ;LIFI_agri.c: 133: rh1 =i;
  1035  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0137  086A               	movf	_i,w
  1038  0138  00D9               	movwf	??_main
  1039  0139  0859               	movf	??_main,w
  1040  013A  00E7               	movwf	_rh1
  1041                           
  1042                           ;LIFI_agri.c: 134: ReadData();
  1043  013B  120A  118A  273D  120A  118A  	fcall	_ReadData
  1044                           
  1045                           ;LIFI_agri.c: 135: rh2 =i;
  1046  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1047  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1048  0142  086A               	movf	_i,w
  1049  0143  00D9               	movwf	??_main
  1050  0144  0859               	movf	??_main,w
  1051  0145  00E6               	movwf	_rh2
  1052                           
  1053                           ;LIFI_agri.c: 136: ReadData();
  1054  0146  120A  118A  273D  120A  118A  	fcall	_ReadData
  1055                           
  1056                           ;LIFI_agri.c: 137: t1 =i;
  1057  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1058  014C  1303               	bcf	3,6	;RP1=0, select bank0
  1059  014D  086A               	movf	_i,w
  1060  014E  00D9               	movwf	??_main
  1061  014F  0859               	movf	??_main,w
  1062  0150  00E9               	movwf	_t1
  1063                           
  1064                           ;LIFI_agri.c: 138: ReadData();
  1065  0151  120A  118A  273D  120A  118A  	fcall	_ReadData
  1066                           
  1067                           ;LIFI_agri.c: 139: t2 =i;
  1068  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1070  0158  086A               	movf	_i,w
  1071  0159  00D9               	movwf	??_main
  1072  015A  0859               	movf	??_main,w
  1073  015B  00E8               	movwf	_t2
  1074                           
  1075                           ;LIFI_agri.c: 140: ReadData();
  1076  015C  120A  118A  273D  120A  118A  	fcall	_ReadData
  1077                           
  1078                           ;LIFI_agri.c: 141: sum = i;
  1079  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1081  0163  086A               	movf	_i,w
  1082  0164  00D9               	movwf	??_main
  1083  0165  0859               	movf	??_main,w
  1084  0166  00E5               	movwf	_sum
  1085  0167                     l201:	
  1086                           
  1087                           ;LIFI_agri.c: 142: }
  1088                           ;LIFI_agri.c: 143: if(temp>=35){
  1089  0167  3000               	movlw	0
  1090  0168  0264               	subwf	_temp+1,w
  1091  0169  3023               	movlw	35
  1092  016A  1903               	skipnz
  1093  016B  0263               	subwf	_temp,w
  1094  016C  1C03               	skipc
  1095  016D  2984               	goto	l2178
  1096                           
  1097                           ;LIFI_agri.c: 144: uart_txc('1');
  1098  016E  3031               	movlw	49
  1099  016F  120A  158A  2716  120A  118A  	fcall	_uart_txc
  1100                           
  1101                           ;LIFI_agri.c: 145: Lcd_Set_Cursor(1,1);
  1102  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1103  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1104  0176  01A2               	clrf	Lcd_Set_Cursor@b
  1105  0177  0AA2               	incf	Lcd_Set_Cursor@b,f
  1106  0178  3001               	movlw	1
  1107  0179  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
  1108                           
  1109                           ;LIFI_agri.c: 146: Lcd_Write_String("High tem");
  1110  017E  3067               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1111  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0181  00A3               	movwf	Lcd_Write_String@a
  1114  0182  3080               	movlw	128
  1115  0183  2993               	goto	L1
  1116  0184                     l2178:	
  1117                           ;LIFI_agri.c: 147: }
  1118                           
  1119                           
  1120                           ;LIFI_agri.c: 148: else {
  1121                           ;LIFI_agri.c: 149: Lcd_Set_Cursor(1,1);
  1122  0184  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0185  1303               	bcf	3,6	;RP1=0, select bank0
  1124  0186  01A2               	clrf	Lcd_Set_Cursor@b
  1125  0187  0AA2               	incf	Lcd_Set_Cursor@b,f
  1126  0188  3001               	movlw	1
  1127  0189  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
  1128                           
  1129                           ;LIFI_agri.c: 150: Lcd_Write_String(t);
  1130  018E  30B4               	movlw	(low (_t| 0))& (0+255)
  1131  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1132  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1133  0191  00A3               	movwf	Lcd_Write_String@a
  1134  0192  3000               	movlw	0
  1135  0193                     L1:	
  1136  0193  00A4               	movwf	Lcd_Write_String@a+1
  1137  0194  120A  118A  26BE  120A  118A  	fcall	_Lcd_Write_String
  1138                           
  1139                           ;LIFI_agri.c: 151: }
  1140                           ;LIFI_agri.c: 152: if(rh1>=60){
  1141  0199  303C               	movlw	60
  1142  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1143  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1144  019C  0267               	subwf	_rh1,w
  1145  019D  1C03               	skipc
  1146  019E  29B7               	goto	l2188
  1147                           
  1148                           ;LIFI_agri.c: 153: uart_txc('1');
  1149  019F  3031               	movlw	49
  1150  01A0  120A  158A  2716  120A  118A  	fcall	_uart_txc
  1151                           
  1152                           ;LIFI_agri.c: 154: Lcd_Set_Cursor(1,10);
  1153  01A5  300A               	movlw	10
  1154  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1155  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1156  01A8  00D9               	movwf	??_main
  1157  01A9  0859               	movf	??_main,w
  1158  01AA  00A2               	movwf	Lcd_Set_Cursor@b
  1159  01AB  3001               	movlw	1
  1160  01AC  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
  1161                           
  1162                           ;LIFI_agri.c: 155: Lcd_Write_String(" Dry     ");
  1163  01B1  304B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1164  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1165  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1166  01B4  00A3               	movwf	Lcd_Write_String@a
  1167  01B5  3080               	movlw	128
  1168  01B6  29F5               	goto	L2
  1169  01B7                     l2188:	
  1170                           ;LIFI_agri.c: 156: }
  1171                           
  1172                           
  1173                           ;LIFI_agri.c: 157: else {
  1174                           ;LIFI_agri.c: 158: if(sum == rh1+rh2+t1+t2){
  1175  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1176  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1177  01B9  0867               	movf	_rh1,w
  1178  01BA  0766               	addwf	_rh2,w
  1179  01BB  00D9               	movwf	??_main
  1180  01BC  01DA               	clrf	??_main+1
  1181  01BD  0DDA               	rlf	??_main+1,f
  1182  01BE  0869               	movf	_t1,w
  1183  01BF  0759               	addwf	??_main,w
  1184  01C0  00DB               	movwf	??_main+2
  1185  01C1  3000               	movlw	0
  1186  01C2  1803               	skipnc
  1187  01C3  3001               	movlw	1
  1188  01C4  075A               	addwf	??_main+1,w
  1189  01C5  00DC               	movwf	??_main+3
  1190  01C6  0868               	movf	_t2,w
  1191  01C7  075B               	addwf	??_main+2,w
  1192  01C8  00DD               	movwf	??_main+4
  1193  01C9  3000               	movlw	0
  1194  01CA  1803               	skipnc
  1195  01CB  3001               	movlw	1
  1196  01CC  075C               	addwf	??_main+3,w
  1197  01CD  00DE               	movwf	??_main+5
  1198  01CE  0865               	movf	_sum,w
  1199  01CF  065D               	xorwf	??_main+4,w
  1200  01D0  045E               	iorwf	??_main+5,w
  1201  01D1  1D03               	skipz
  1202  01D2  29FB               	goto	l2196
  1203                           
  1204                           ;LIFI_agri.c: 159: Lcd_Set_Cursor(1,10);
  1205  01D3  300A               	movlw	10
  1206  01D4  00D9               	movwf	??_main
  1207  01D5  0859               	movf	??_main,w
  1208  01D6  00A2               	movwf	Lcd_Set_Cursor@b
  1209  01D7  3001               	movlw	1
  1210  01D8  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
  1211                           
  1212                           ;LIFI_agri.c: 160: sprintf(hum,"RH:%u%% ",rh1);
  1213  01DD  3055               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1214  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1215  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1216  01E0  00D9               	movwf	??_main
  1217  01E1  0859               	movf	??_main,w
  1218  01E2  00AC               	movwf	sprintf@f
  1219  01E3  0867               	movf	_rh1,w
  1220  01E4  00DA               	movwf	??_main+1
  1221  01E5  01DB               	clrf	??_main+2
  1222  01E6  085A               	movf	??_main+1,w
  1223  01E7  00AD               	movwf	?_sprintf+1
  1224  01E8  085B               	movf	??_main+2,w
  1225  01E9  00AE               	movwf	?_sprintf+2
  1226  01EA  30AA               	movlw	(low (_hum| 0))& (0+255)
  1227  01EB  120A  118A  2319  120A  118A  	fcall	_sprintf
  1228                           
  1229                           ;LIFI_agri.c: 161: Lcd_Write_String(hum);
  1230  01F0  30AA               	movlw	(low (_hum| 0))& (0+255)
  1231  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1232  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1233  01F3  00A3               	movwf	Lcd_Write_String@a
  1234  01F4  3000               	movlw	0
  1235  01F5                     L2:	
  1236  01F5  00A4               	movwf	Lcd_Write_String@a+1
  1237  01F6  120A  118A  26BE  120A  118A  	fcall	_Lcd_Write_String
  1238  01FB                     l2196:	
  1239                           
  1240                           ;LIFI_agri.c: 162: }
  1241                           ;LIFI_agri.c: 163: }
  1242                           ;LIFI_agri.c: 164: if(moist <= 50)
  1243  01FB  3000               	movlw	0
  1244  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1245  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1246  01FE  0262               	subwf	_moist+1,w
  1247  01FF  3033               	movlw	51
  1248  0200  1903               	skipnz
  1249  0201  0261               	subwf	_moist,w
  1250  0202  1803               	skipnc
  1251  0203  2A16               	goto	l2202
  1252                           
  1253                           ;LIFI_agri.c: 165: {
  1254                           ;LIFI_agri.c: 166: uart_txc('1');
  1255  0204  3031               	movlw	49
  1256  0205  120A  158A  2716  120A  118A  	fcall	_uart_txc
  1257                           
  1258                           ;LIFI_agri.c: 167: Lcd_Set_Cursor(2,1);
  1259  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1260  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1261  020C  01A2               	clrf	Lcd_Set_Cursor@b
  1262  020D  0AA2               	incf	Lcd_Set_Cursor@b,f
  1263  020E  3002               	movlw	2
  1264  020F  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
  1265                           
  1266                           ;LIFI_agri.c: 168: Lcd_Write_String("   Dry Soil   ");
  1267  0214  303C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1268  0215  2A21               	goto	L3
  1269  0216                     l2202:	
  1270                           ;LIFI_agri.c: 169: }
  1271                           
  1272                           
  1273                           ;LIFI_agri.c: 170: else{
  1274                           ;LIFI_agri.c: 171: Lcd_Set_Cursor(2,1);
  1275  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1276  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1277  0218  01A2               	clrf	Lcd_Set_Cursor@b
  1278  0219  0AA2               	incf	Lcd_Set_Cursor@b,f
  1279  021A  3002               	movlw	2
  1280  021B  120A  118A  266C  120A  118A  	fcall	_Lcd_Set_Cursor
  1281                           
  1282                           ;LIFI_agri.c: 172: Lcd_Write_String("   Wet Soil   ");
  1283  0220  302D               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1284  0221                     L3:	
  1285  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1287  0223  00A3               	movwf	Lcd_Write_String@a
  1288  0224  3080               	movlw	128
  1289  0225  00A4               	movwf	Lcd_Write_String@a+1
  1290  0226  120A  118A  26BE  120A  118A  	fcall	_Lcd_Write_String
  1291                           
  1292                           ;LIFI_agri.c: 173: }
  1293                           ;LIFI_agri.c: 174: if(temp<40 && moist > 50 && rh1 < 60){
  1294  022B  3000               	movlw	0
  1295  022C  1283               	bcf	3,5	;RP0=0, select bank0
  1296  022D  1303               	bcf	3,6	;RP1=0, select bank0
  1297  022E  0264               	subwf	_temp+1,w
  1298  022F  3028               	movlw	40
  1299  0230  1903               	skipnz
  1300  0231  0263               	subwf	_temp,w
  1301  0232  1803               	skipnc
  1302  0233  2888               	goto	l2144
  1303  0234  3000               	movlw	0
  1304  0235  0262               	subwf	_moist+1,w
  1305  0236  3033               	movlw	51
  1306  0237  1903               	skipnz
  1307  0238  0261               	subwf	_moist,w
  1308  0239  1C03               	skipc
  1309  023A  2888               	goto	l2144
  1310  023B  303C               	movlw	60
  1311  023C  0267               	subwf	_rh1,w
  1312  023D  1803               	skipnc
  1313  023E  2888               	goto	l2144
  1314                           
  1315                           ;LIFI_agri.c: 175: uart_txc('0');
  1316  023F  3030               	movlw	48
  1317  0240  120A  158A  2716  120A  118A  	fcall	_uart_txc
  1318  0245  2888               	goto	l2144
  1319  0246                     __end_of_main:	
  1320                           
  1321                           	psect	text1
  1322  0F16                     __ptext1:	
  1323 ;; *************** function _uart_txc *****************
  1324 ;; Defined at:
  1325 ;;		line 40 in file "LIFI_agri.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  ch              1    wreg     unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  ch              1    5[COMMON] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1339 ;;      Params:         0       0       0       0       0
  1340 ;;      Locals:         1       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0
  1342 ;;      Totals:         1       0       0       0       0
  1343 ;;Total ram usage:        1 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    2
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_main
  1350 ;;		_uart_txs
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           
  1355                           ;psect for function _uart_txc
  1356  0F16                     _uart_txc:	
  1357                           
  1358                           ;incstack = 0
  1359                           ; Regs used in _uart_txc: [wreg]
  1360                           ;uart_txc@ch stored from wreg
  1361  0F16  00F5               	movwf	uart_txc@ch
  1362  0F17                     l145:	
  1363                           ;LIFI_agri.c: 41: while(!TXIF);
  1364                           
  1365  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  1366  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  1367  0F19  1E0C               	btfss	12,4	;volatile
  1368  0F1A  2F17               	goto	l145
  1369                           
  1370                           ;LIFI_agri.c: 42: TXREG = ch;
  1371  0F1B  0875               	movf	uart_txc@ch,w
  1372  0F1C  0099               	movwf	25	;volatile
  1373  0F1D                     l148:	
  1374                           ;LIFI_agri.c: 43: while(!TRMT);
  1375                           
  1376  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  1377  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  1378  0F1F  1898               	btfsc	24,1	;volatile
  1379  0F20  0008               	return
  1380  0F21  2F1D               	goto	l148
  1381  0F22                     __end_of_uart_txc:	
  1382                           
  1383                           	psect	text2
  1384  0F3A                     __ptext2:	
  1385 ;; *************** function _uart_init *****************
  1386 ;; Defined at:
  1387 ;;		line 28 in file "LIFI_agri.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1401 ;;      Params:         0       0       0       0       0
  1402 ;;      Locals:         0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0
  1404 ;;      Totals:         0       0       0       0       0
  1405 ;;Total ram usage:        0 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    2
  1408 ;; This function calls:
  1409 ;;		Nothing
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           
  1416                           ;psect for function _uart_init
  1417  0F3A                     _uart_init:	
  1418                           
  1419                           ;LIFI_agri.c: 29: TRISC6 = 0;
  1420                           
  1421                           ;incstack = 0
  1422                           ; Regs used in _uart_init: [wreg]
  1423  0F3A  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0F3B  1303               	bcf	3,6	;RP1=0, select bank1
  1425  0F3C  1307               	bcf	7,6	;volatile
  1426                           
  1427                           ;LIFI_agri.c: 30: TRISC7 = 1;
  1428  0F3D  1787               	bsf	7,7	;volatile
  1429                           
  1430                           ;LIFI_agri.c: 31: SPBRG = ((20000000/16)/9600) - 1;
  1431  0F3E  3081               	movlw	129
  1432  0F3F  0099               	movwf	25	;volatile
  1433                           
  1434                           ;LIFI_agri.c: 32: BRGH = 1;
  1435  0F40  1518               	bsf	24,2	;volatile
  1436                           
  1437                           ;LIFI_agri.c: 33: SYNC = 0;
  1438  0F41  1218               	bcf	24,4	;volatile
  1439                           
  1440                           ;LIFI_agri.c: 34: SPEN = 1;
  1441  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  1442  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  1443  0F44  1798               	bsf	24,7	;volatile
  1444                           
  1445                           ;LIFI_agri.c: 35: TXEN = 1;
  1446  0F45  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0F46  1303               	bcf	3,6	;RP1=0, select bank1
  1448  0F47  1698               	bsf	24,5	;volatile
  1449                           
  1450                           ;LIFI_agri.c: 36: CREN = 1;
  1451  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  1452  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  1453  0F4A  1618               	bsf	24,4	;volatile
  1454                           
  1455                           ;LIFI_agri.c: 37: RCIE = 1;
  1456  0F4B  1683               	bsf	3,5	;RP0=1, select bank1
  1457  0F4C  1303               	bcf	3,6	;RP1=0, select bank1
  1458  0F4D  168C               	bsf	12,5	;volatile
  1459                           
  1460                           ;LIFI_agri.c: 38: RCIF = 0;
  1461  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0F50  128C               	bcf	12,5	;volatile
  1464  0F51  0008               	return
  1465  0F52                     __end_of_uart_init:	
  1466                           
  1467                           	psect	text3
  1468  0319                     __ptext3:	
  1469 ;; *************** function _sprintf *****************
  1470 ;; Defined at:
  1471 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  sp              1    wreg     PTR unsigned char 
  1474 ;;		 -> hum(10), t(10), 
  1475 ;;  f               1   12[BANK0 ] PTR const unsigned char 
  1476 ;;		 -> STR_6(9), STR_3(9), 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  1479 ;;		 -> hum(10), t(10), 
  1480 ;;  tmpval          4    0        struct .
  1481 ;;  val             2   20[BANK0 ] unsigned int 
  1482 ;;  cp              2    0        PTR const unsigned char 
  1483 ;;  len             2    0        unsigned int 
  1484 ;;  c               1   24[BANK0 ] char 
  1485 ;;  prec            1   22[BANK0 ] char 
  1486 ;;  ap              1   19[BANK0 ] PTR void [1]
  1487 ;;		 -> ?_sprintf(2), 
  1488 ;;  flag            1   18[BANK0 ] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  2   12[BANK0 ] int 
  1491 ;; Registers used:
  1492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1498 ;;      Params:         0       3       0       0       0
  1499 ;;      Locals:         0       7       0       0       0
  1500 ;;      Temps:          0       3       0       0       0
  1501 ;;      Totals:         0      13       0       0       0
  1502 ;;Total ram usage:       13 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    3
  1505 ;; This function calls:
  1506 ;;		___lwdiv
  1507 ;;		___lwmod
  1508 ;; This function is called by:
  1509 ;;		_main
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           
  1514                           ;psect for function _sprintf
  1515  0319                     _sprintf:	
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1519                           ;sprintf@sp stored from wreg
  1520  0319  1283               	bcf	3,5	;RP0=0, select bank0
  1521  031A  1303               	bcf	3,6	;RP1=0, select bank0
  1522  031B  00B7               	movwf	sprintf@sp
  1523                           
  1524                           ;doprnt.c: 494: va_list ap;
  1525                           ;doprnt.c: 499: signed char c;
  1526                           ;doprnt.c: 506: signed char prec;
  1527                           ;doprnt.c: 508: unsigned char flag;
  1528                           ;doprnt.c: 523: union {
  1529                           ;doprnt.c: 524: unsigned long vd;
  1530                           ;doprnt.c: 525: double integ;
  1531                           ;doprnt.c: 526: } tmpval;
  1532                           ;doprnt.c: 528: unsigned int val;
  1533                           ;doprnt.c: 529: unsigned len;
  1534                           ;doprnt.c: 530: const char * cp;
  1535                           ;doprnt.c: 533: *ap = __va_start();
  1536  031C  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1537  031D  00AF               	movwf	??_sprintf
  1538  031E  082F               	movf	??_sprintf,w
  1539  031F  00B3               	movwf	sprintf@ap
  1540  0320                     l2006:	
  1541                           ;doprnt.c: 536: while(c = *f++) {
  1542                           
  1543  0320  3001               	movlw	1
  1544  0321  07AC               	addwf	sprintf@f,f
  1545  0322  30FF               	movlw	-1
  1546  0323  072C               	addwf	sprintf@f,w
  1547  0324  0084               	movwf	4
  1548  0325  120A  118A  2528  120A  118A  	fcall	stringdir
  1549  032A  00AF               	movwf	??_sprintf
  1550  032B  082F               	movf	??_sprintf,w
  1551  032C  00B8               	movwf	sprintf@c
  1552  032D  0838               	movf	sprintf@c,w
  1553  032E  1903               	btfsc	3,2
  1554  032F  2BD3               	goto	l2008
  1555                           
  1556                           ;doprnt.c: 538: if(c != '%')
  1557  0330  3025               	movlw	37
  1558  0331  0638               	xorwf	sprintf@c,w
  1559  0332  1D03               	btfss	3,2
  1560  0333  2B36               	goto	l1970
  1561                           
  1562                           ;doprnt.c: 543: }
  1563                           ;doprnt.c: 548: flag = 0;
  1564                           
  1565                           ;doprnt.c: 542: continue;
  1566                           
  1567                           ;doprnt.c: 540: {
  1568                           ;doprnt.c: 541: ((*sp++ = (c)));
  1569  0334  01B2               	clrf	sprintf@flag
  1570                           
  1571                           ;doprnt.c: 635: switch(c = *f++) {
  1572  0335  2B47               	goto	l1978
  1573  0336                     l1970:	
  1574                           ;doprnt.c: 802: default:
  1575                           
  1576                           ;doprnt.c: 638: goto alldone;
  1577                           
  1578                           ;doprnt.c: 637: case 0:
  1579                           
  1580                           
  1581                           ;doprnt.c: 809: ((*sp++ = (c)));
  1582  0336  0838               	movf	sprintf@c,w
  1583  0337  00AF               	movwf	??_sprintf
  1584  0338  0837               	movf	sprintf@sp,w
  1585  0339  0084               	movwf	4
  1586  033A  082F               	movf	??_sprintf,w
  1587  033B  1383               	bcf	3,7	;select IRP bank0
  1588  033C  0080               	movwf	0
  1589  033D  3001               	movlw	1
  1590  033E  00AF               	movwf	??_sprintf
  1591  033F  082F               	movf	??_sprintf,w
  1592  0340  07B7               	addwf	sprintf@sp,f
  1593                           
  1594                           ;doprnt.c: 810: continue;
  1595  0341  2B20               	goto	l2006
  1596  0342                     l1974:	
  1597                           ;doprnt.c: 817: case 'u':
  1598                           
  1599                           
  1600                           ;doprnt.c: 818: flag |= 0xC0;
  1601  0342  30C0               	movlw	192
  1602  0343  00AF               	movwf	??_sprintf
  1603  0344  082F               	movf	??_sprintf,w
  1604  0345  04B2               	iorwf	sprintf@flag,f
  1605                           
  1606                           ;doprnt.c: 822: }
  1607                           
  1608                           ;doprnt.c: 819: break;
  1609  0346  2B59               	goto	l1980
  1610  0347                     l1978:	
  1611  0347  3001               	movlw	1
  1612  0348  07AC               	addwf	sprintf@f,f
  1613  0349  30FF               	movlw	-1
  1614  034A  072C               	addwf	sprintf@f,w
  1615  034B  0084               	movwf	4
  1616  034C  120A  118A  2528  120A  118A  	fcall	stringdir
  1617  0351  00B8               	movwf	sprintf@c
  1618                           
  1619                           ; Switch size 1, requested type "space"
  1620                           ; Number of cases is 2, Range of values is 0 to 117
  1621                           ; switch strategies available:
  1622                           ; Name         Instructions Cycles
  1623                           ; simple_byte            7     4 (average)
  1624                           ; jumptable            260     6 (fixed)
  1625                           ;	Chosen strategy is simple_byte
  1626  0352  3A00               	xorlw	0	; case 0
  1627  0353  1903               	skipnz
  1628  0354  2BD3               	goto	l2008
  1629  0355  3A75               	xorlw	117	; case 117
  1630  0356  1903               	skipnz
  1631  0357  2B42               	goto	l1974
  1632  0358  2B36               	goto	l1970
  1633  0359                     l1980:	
  1634                           
  1635                           ;doprnt.c: 1273: {
  1636                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1637  0359  0833               	movf	sprintf@ap,w
  1638  035A  0084               	movwf	4
  1639  035B  1383               	bcf	3,7	;select IRP bank0
  1640  035C  0800               	movf	0,w
  1641  035D  00B4               	movwf	sprintf@val
  1642  035E  0A84               	incf	4,f
  1643  035F  0800               	movf	0,w
  1644  0360  00B5               	movwf	sprintf@val+1
  1645  0361  3002               	movlw	2
  1646  0362  00AF               	movwf	??_sprintf
  1647  0363  082F               	movf	??_sprintf,w
  1648  0364  07B3               	addwf	sprintf@ap,f
  1649                           
  1650                           ;doprnt.c: 1287: }
  1651                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1652  0365  01B8               	clrf	sprintf@c
  1653  0366  0AB8               	incf	sprintf@c,f
  1654  0367  3005               	movlw	5
  1655  0368  0638               	xorwf	sprintf@c,w
  1656  0369  1903               	btfsc	3,2
  1657  036A  2B8C               	goto	l1996
  1658  036B                     l1990:	
  1659                           
  1660                           ;doprnt.c: 1306: if(val < dpowers[c])
  1661  036B  0838               	movf	sprintf@c,w
  1662  036C  00AF               	movwf	??_sprintf
  1663  036D  072F               	addwf	??_sprintf,w
  1664  036E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1665  036F  0084               	movwf	4
  1666  0370  120A  118A  2528  120A  118A  	fcall	stringdir
  1667  0375  00B0               	movwf	??_sprintf+1
  1668  0376  120A  118A  2528  120A  118A  	fcall	stringdir
  1669  037B  00B1               	movwf	??_sprintf+2
  1670  037C  0831               	movf	??_sprintf+2,w
  1671  037D  0235               	subwf	sprintf@val+1,w
  1672  037E  1D03               	skipz
  1673  037F  2B82               	goto	u2375
  1674  0380  0830               	movf	??_sprintf+1,w
  1675  0381  0234               	subwf	sprintf@val,w
  1676  0382                     u2375:	
  1677  0382  1C03               	btfss	3,0
  1678  0383  2B8C               	goto	l1996
  1679                           
  1680                           ;doprnt.c: 1307: break;
  1681  0384  3001               	movlw	1
  1682  0385  00AF               	movwf	??_sprintf
  1683  0386  082F               	movf	??_sprintf,w
  1684  0387  07B8               	addwf	sprintf@c,f
  1685  0388  3005               	movlw	5
  1686  0389  0638               	xorwf	sprintf@c,w
  1687  038A  1D03               	btfss	3,2
  1688  038B  2B6B               	goto	l1990
  1689  038C                     l1996:	
  1690                           
  1691                           ;doprnt.c: 1422: {
  1692                           ;doprnt.c: 1469: }
  1693                           ;doprnt.c: 1472: prec = c;
  1694  038C  0838               	movf	sprintf@c,w
  1695  038D  00AF               	movwf	??_sprintf
  1696  038E  082F               	movf	??_sprintf,w
  1697  038F  00B6               	movwf	sprintf@prec
  1698  0390                     l2004:	
  1699                           ;doprnt.c: 1474: while(prec--) {
  1700                           
  1701  0390  30FF               	movlw	255
  1702  0391  00AF               	movwf	??_sprintf
  1703  0392  082F               	movf	??_sprintf,w
  1704  0393  07B6               	addwf	sprintf@prec,f
  1705  0394  0A36               	incf	sprintf@prec,w
  1706  0395  1903               	btfsc	3,2
  1707  0396  2B20               	goto	l2006
  1708                           
  1709                           ;doprnt.c: 1478: {
  1710                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1711  0397  300A               	movlw	10
  1712  0398  00A7               	movwf	___lwmod@divisor
  1713  0399  3000               	movlw	0
  1714  039A  00A8               	movwf	___lwmod@divisor+1
  1715  039B  0836               	movf	sprintf@prec,w
  1716  039C  00AF               	movwf	??_sprintf
  1717  039D  072F               	addwf	??_sprintf,w
  1718  039E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1719  039F  0084               	movwf	4
  1720  03A0  120A  118A  2528  120A  118A  	fcall	stringdir
  1721  03A5  00A0               	movwf	___lwdiv@divisor
  1722  03A6  120A  118A  2528  120A  118A  	fcall	stringdir
  1723  03AB  00A1               	movwf	___lwdiv@divisor+1
  1724  03AC  0835               	movf	sprintf@val+1,w
  1725  03AD  00A3               	movwf	___lwdiv@dividend+1
  1726  03AE  0834               	movf	sprintf@val,w
  1727  03AF  00A2               	movwf	___lwdiv@dividend
  1728  03B0  120A  118A  26FF  120A  118A  	fcall	___lwdiv
  1729  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1730  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1731  03B7  0821               	movf	?___lwdiv+1,w
  1732  03B8  00AA               	movwf	___lwmod@dividend+1
  1733  03B9  0820               	movf	?___lwdiv,w
  1734  03BA  00A9               	movwf	___lwmod@dividend
  1735  03BB  120A  118A  27B1  120A  118A  	fcall	___lwmod
  1736  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1737  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  1738  03C2  0827               	movf	?___lwmod,w
  1739  03C3  3E30               	addlw	48
  1740  03C4  00B0               	movwf	??_sprintf+1
  1741  03C5  0830               	movf	??_sprintf+1,w
  1742  03C6  00B8               	movwf	sprintf@c
  1743                           
  1744                           ;doprnt.c: 1523: }
  1745                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1746  03C7  0838               	movf	sprintf@c,w
  1747  03C8  00AF               	movwf	??_sprintf
  1748  03C9  0837               	movf	sprintf@sp,w
  1749  03CA  0084               	movwf	4
  1750  03CB  082F               	movf	??_sprintf,w
  1751  03CC  1383               	bcf	3,7	;select IRP bank0
  1752  03CD  0080               	movwf	0
  1753  03CE  3001               	movlw	1
  1754  03CF  00AF               	movwf	??_sprintf
  1755  03D0  082F               	movf	??_sprintf,w
  1756  03D1  07B7               	addwf	sprintf@sp,f
  1757  03D2  2B90               	goto	l2004
  1758  03D3                     l2008:	
  1759                           ;doprnt.c: 1525: }
  1760                           ;doprnt.c: 1533: }
  1761                           ;doprnt.c: 1535: alldone:
  1762                           
  1763                           
  1764                           ;doprnt.c: 1538: *sp = 0;
  1765  03D3  0837               	movf	sprintf@sp,w
  1766  03D4  0084               	movwf	4
  1767  03D5  1383               	bcf	3,7	;select IRP bank0
  1768  03D6  0180               	clrf	0
  1769  03D7  0008               	return
  1770  03D8                     __end_of_sprintf:	
  1771                           ;doprnt.c: 1540: return 0;
  1772                           ;	Return value of _sprintf is never used
  1773                           
  1774                           
  1775                           	psect	text4
  1776  07B1                     __ptext4:	
  1777 ;; *************** function ___lwmod *****************
  1778 ;; Defined at:
  1779 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  divisor         2    7[BANK0 ] unsigned int 
  1782 ;;  dividend        2    9[BANK0 ] unsigned int 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  counter         1   11[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2    7[BANK0 ] unsigned int 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1794 ;;      Params:         0       4       0       0       0
  1795 ;;      Locals:         0       1       0       0       0
  1796 ;;      Temps:          1       0       0       0       0
  1797 ;;      Totals:         1       5       0       0       0
  1798 ;;Total ram usage:        6 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    2
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_sprintf
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function ___lwmod
  1810  07B1                     ___lwmod:	
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1814  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1815  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  1816  07B3  0827               	movf	___lwmod@divisor,w
  1817  07B4  0428               	iorwf	___lwmod@divisor+1,w
  1818  07B5  1903               	btfsc	3,2
  1819  07B6  2FE0               	goto	l1900
  1820  07B7  01AB               	clrf	___lwmod@counter
  1821  07B8  0AAB               	incf	___lwmod@counter,f
  1822  07B9                     l1890:	
  1823  07B9  1BA8               	btfsc	___lwmod@divisor+1,7
  1824  07BA  2FC7               	goto	l1892
  1825  07BB  3001               	movlw	1
  1826  07BC                     u2205:	
  1827  07BC  1003               	clrc
  1828  07BD  0DA7               	rlf	___lwmod@divisor,f
  1829  07BE  0DA8               	rlf	___lwmod@divisor+1,f
  1830  07BF  3EFF               	addlw	-1
  1831  07C0  1D03               	skipz
  1832  07C1  2FBC               	goto	u2205
  1833  07C2  3001               	movlw	1
  1834  07C3  00F6               	movwf	??___lwmod
  1835  07C4  0876               	movf	??___lwmod,w
  1836  07C5  07AB               	addwf	___lwmod@counter,f
  1837  07C6  2FB9               	goto	l1890
  1838  07C7                     l1892:	
  1839  07C7  0828               	movf	___lwmod@divisor+1,w
  1840  07C8  022A               	subwf	___lwmod@dividend+1,w
  1841  07C9  1D03               	skipz
  1842  07CA  2FCD               	goto	u2225
  1843  07CB  0827               	movf	___lwmod@divisor,w
  1844  07CC  0229               	subwf	___lwmod@dividend,w
  1845  07CD                     u2225:	
  1846  07CD  1C03               	skipc
  1847  07CE  2FD5               	goto	l1896
  1848  07CF  0827               	movf	___lwmod@divisor,w
  1849  07D0  02A9               	subwf	___lwmod@dividend,f
  1850  07D1  0828               	movf	___lwmod@divisor+1,w
  1851  07D2  1C03               	skipc
  1852  07D3  03AA               	decf	___lwmod@dividend+1,f
  1853  07D4  02AA               	subwf	___lwmod@dividend+1,f
  1854  07D5                     l1896:	
  1855  07D5  3001               	movlw	1
  1856  07D6                     u2235:	
  1857  07D6  1003               	clrc
  1858  07D7  0CA8               	rrf	___lwmod@divisor+1,f
  1859  07D8  0CA7               	rrf	___lwmod@divisor,f
  1860  07D9  3EFF               	addlw	-1
  1861  07DA  1D03               	skipz
  1862  07DB  2FD6               	goto	u2235
  1863  07DC  3001               	movlw	1
  1864  07DD  02AB               	subwf	___lwmod@counter,f
  1865  07DE  1D03               	btfss	3,2
  1866  07DF  2FC7               	goto	l1892
  1867  07E0                     l1900:	
  1868  07E0  082A               	movf	___lwmod@dividend+1,w
  1869  07E1  00A8               	movwf	?___lwmod+1
  1870  07E2  0829               	movf	___lwmod@dividend,w
  1871  07E3  00A7               	movwf	?___lwmod
  1872  07E4  0008               	return
  1873  07E5                     __end_of___lwmod:	
  1874                           
  1875                           	psect	text5
  1876  06FF                     __ptext5:	
  1877 ;; *************** function ___lwdiv *****************
  1878 ;; Defined at:
  1879 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  divisor         2    0[BANK0 ] unsigned int 
  1882 ;;  dividend        2    2[BANK0 ] unsigned int 
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;  quotient        2    5[BANK0 ] unsigned int 
  1885 ;;  counter         1    4[BANK0 ] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    0[BANK0 ] unsigned int 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         0       4       0       0       0
  1896 ;;      Locals:         0       3       0       0       0
  1897 ;;      Temps:          1       0       0       0       0
  1898 ;;      Totals:         1       7       0       0       0
  1899 ;;Total ram usage:        8 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    2
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_sprintf
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function ___lwdiv
  1911  06FF                     ___lwdiv:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1915  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0700  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0701  01A5               	clrf	___lwdiv@quotient
  1918  0702  01A6               	clrf	___lwdiv@quotient+1
  1919  0703  0820               	movf	___lwdiv@divisor,w
  1920  0704  0421               	iorwf	___lwdiv@divisor+1,w
  1921  0705  1903               	btfsc	3,2
  1922  0706  2F38               	goto	l1878
  1923  0707  01A4               	clrf	___lwdiv@counter
  1924  0708  0AA4               	incf	___lwdiv@counter,f
  1925  0709                     l1866:	
  1926  0709  1BA1               	btfsc	___lwdiv@divisor+1,7
  1927  070A  2F17               	goto	l1868
  1928  070B  3001               	movlw	1
  1929  070C                     u2135:	
  1930  070C  1003               	clrc
  1931  070D  0DA0               	rlf	___lwdiv@divisor,f
  1932  070E  0DA1               	rlf	___lwdiv@divisor+1,f
  1933  070F  3EFF               	addlw	-1
  1934  0710  1D03               	skipz
  1935  0711  2F0C               	goto	u2135
  1936  0712  3001               	movlw	1
  1937  0713  00F5               	movwf	??___lwdiv
  1938  0714  0875               	movf	??___lwdiv,w
  1939  0715  07A4               	addwf	___lwdiv@counter,f
  1940  0716  2F09               	goto	l1866
  1941  0717                     l1868:	
  1942  0717  3001               	movlw	1
  1943  0718                     u2155:	
  1944  0718  1003               	clrc
  1945  0719  0DA5               	rlf	___lwdiv@quotient,f
  1946  071A  0DA6               	rlf	___lwdiv@quotient+1,f
  1947  071B  3EFF               	addlw	-1
  1948  071C  1D03               	skipz
  1949  071D  2F18               	goto	u2155
  1950  071E  0821               	movf	___lwdiv@divisor+1,w
  1951  071F  0223               	subwf	___lwdiv@dividend+1,w
  1952  0720  1D03               	skipz
  1953  0721  2F24               	goto	u2165
  1954  0722  0820               	movf	___lwdiv@divisor,w
  1955  0723  0222               	subwf	___lwdiv@dividend,w
  1956  0724                     u2165:	
  1957  0724  1C03               	skipc
  1958  0725  2F2D               	goto	l1874
  1959  0726  0820               	movf	___lwdiv@divisor,w
  1960  0727  02A2               	subwf	___lwdiv@dividend,f
  1961  0728  0821               	movf	___lwdiv@divisor+1,w
  1962  0729  1C03               	skipc
  1963  072A  03A3               	decf	___lwdiv@dividend+1,f
  1964  072B  02A3               	subwf	___lwdiv@dividend+1,f
  1965  072C  1425               	bsf	___lwdiv@quotient,0
  1966  072D                     l1874:	
  1967  072D  3001               	movlw	1
  1968  072E                     u2175:	
  1969  072E  1003               	clrc
  1970  072F  0CA1               	rrf	___lwdiv@divisor+1,f
  1971  0730  0CA0               	rrf	___lwdiv@divisor,f
  1972  0731  3EFF               	addlw	-1
  1973  0732  1D03               	skipz
  1974  0733  2F2E               	goto	u2175
  1975  0734  3001               	movlw	1
  1976  0735  02A4               	subwf	___lwdiv@counter,f
  1977  0736  1D03               	btfss	3,2
  1978  0737  2F17               	goto	l1868
  1979  0738                     l1878:	
  1980  0738  0826               	movf	___lwdiv@quotient+1,w
  1981  0739  00A1               	movwf	?___lwdiv+1
  1982  073A  0825               	movf	___lwdiv@quotient,w
  1983  073B  00A0               	movwf	?___lwdiv
  1984  073C  0008               	return
  1985  073D                     __end_of___lwdiv:	
  1986                           
  1987                           	psect	text6
  1988  0FCF                     __ptext6:	
  1989 ;; *************** function _adc_read *****************
  1990 ;; Defined at:
  1991 ;;		line 93 in file "LIFI_agri.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  channel         1    wreg     unsigned char 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  channel         1    2[BANK0 ] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  2    5[COMMON] unsigned int 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, status,0
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2005 ;;      Params:         2       0       0       0       0
  2006 ;;      Locals:         0       1       0       0       0
  2007 ;;      Temps:          0       2       0       0       0
  2008 ;;      Totals:         2       3       0       0       0
  2009 ;;Total ram usage:        5 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    2
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           
  2020                           ;psect for function _adc_read
  2021  0FCF                     _adc_read:	
  2022                           
  2023                           ;incstack = 0
  2024                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  2025                           ;adc_read@channel stored from wreg
  2026  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2028  0FD1  00A2               	movwf	adc_read@channel
  2029                           
  2030                           ;LIFI_agri.c: 94: if(channel > 7)
  2031  0FD2  3008               	movlw	8
  2032  0FD3  0222               	subwf	adc_read@channel,w
  2033  0FD4  1C03               	skipc
  2034  0FD5  2FD9               	goto	l1950
  2035                           
  2036                           ;LIFI_agri.c: 95: return 0;
  2037  0FD6  01F5               	clrf	?_adc_read
  2038  0FD7  01F6               	clrf	?_adc_read+1
  2039  0FD8  0008               	return
  2040  0FD9                     l1950:	
  2041                           
  2042                           ;LIFI_agri.c: 96: ADCON0 &= 0xC5;
  2043  0FD9  30C5               	movlw	197
  2044  0FDA  00A0               	movwf	??_adc_read
  2045  0FDB  0820               	movf	??_adc_read,w
  2046  0FDC  059F               	andwf	31,f	;volatile
  2047                           
  2048                           ;LIFI_agri.c: 97: ADCON0 |= channel<<3;
  2049  0FDD  0822               	movf	adc_read@channel,w
  2050  0FDE  00A0               	movwf	??_adc_read
  2051  0FDF  3002               	movlw	2
  2052  0FE0                     u2335:	
  2053  0FE0  1003               	clrc
  2054  0FE1  0DA0               	rlf	??_adc_read,f
  2055  0FE2  3EFF               	addlw	-1
  2056  0FE3  1D03               	skipz
  2057  0FE4  2FE0               	goto	u2335
  2058  0FE5  1003               	clrc
  2059  0FE6  0D20               	rlf	??_adc_read,w
  2060  0FE7  00A1               	movwf	??_adc_read+1
  2061  0FE8  0821               	movf	??_adc_read+1,w
  2062  0FE9  049F               	iorwf	31,f	;volatile
  2063                           
  2064                           ;LIFI_agri.c: 98: _delay((unsigned long)((2)*(20000000/4000.0)));
  2065  0FEA  300D               	movlw	13
  2066  0FEB  1283               	bcf	3,5	;RP0=0, select bank0
  2067  0FEC  1303               	bcf	3,6	;RP1=0, select bank0
  2068  0FED  00A1               	movwf	??_adc_read+1
  2069  0FEE  30FB               	movlw	251
  2070  0FEF  00A0               	movwf	??_adc_read
  2071  0FF0                     u2727:	
  2072  0FF0  0BA0               	decfsz	??_adc_read,f
  2073  0FF1  2FF0               	goto	u2727
  2074  0FF2  0BA1               	decfsz	??_adc_read+1,f
  2075  0FF3  2FF0               	goto	u2727
  2076                           
  2077                           ;LIFI_agri.c: 99: GO_nDONE = 1;
  2078  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0FF6  151F               	bsf	31,2	;volatile
  2081  0FF7                     l193:	
  2082                           ;LIFI_agri.c: 100: while(GO_nDONE);
  2083                           
  2084  0FF7  191F               	btfsc	31,2	;volatile
  2085  0FF8  2FF7               	goto	l193
  2086                           
  2087                           ;LIFI_agri.c: 101: return ((ADRESH<<8)+ADRESL);
  2088  0FF9  081E               	movf	30,w	;volatile
  2089  0FFA  00F6               	movwf	?_adc_read+1
  2090  0FFB  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0FFC  1303               	bcf	3,6	;RP1=0, select bank1
  2092  0FFD  081E               	movf	30,w	;volatile
  2093  0FFE  00F5               	movwf	?_adc_read
  2094  0FFF  0008               	return
  2095  1000                     __end_of_adc_read:	
  2096                           
  2097                           	psect	text7
  2098  0EF8                     __ptext7:	
  2099 ;; *************** function _adc_init *****************
  2100 ;; Defined at:
  2101 ;;		line 89 in file "LIFI_agri.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2115 ;;      Params:         0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0
  2118 ;;      Totals:         0       0       0       0       0
  2119 ;;Total ram usage:        0 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    2
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_main
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           
  2130                           ;psect for function _adc_init
  2131  0EF8                     _adc_init:	
  2132                           
  2133                           ;LIFI_agri.c: 90: ADCON0 = 0x81;
  2134                           
  2135                           ;incstack = 0
  2136                           ; Regs used in _adc_init: [wreg]
  2137  0EF8  3081               	movlw	129
  2138  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  2139  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  2140  0EFB  009F               	movwf	31	;volatile
  2141                           
  2142                           ;LIFI_agri.c: 91: ADCON1 = 0xC0;
  2143  0EFC  30C0               	movlw	192
  2144  0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  2145  0EFE  1303               	bcf	3,6	;RP1=0, select bank1
  2146  0EFF  009F               	movwf	31	;volatile
  2147  0F00  0008               	return
  2148  0F01                     __end_of_adc_init:	
  2149                           
  2150                           	psect	text8
  2151  0F22                     __ptext8:	
  2152 ;; *************** function ___lwtoft *****************
  2153 ;; Defined at:
  2154 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  c               2    8[BANK0 ] unsigned int 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  3    8[BANK0 ] float 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0, pclath, cstack
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2168 ;;      Params:         0       3       0       0       0
  2169 ;;      Locals:         0       0       0       0       0
  2170 ;;      Temps:          1       0       0       0       0
  2171 ;;      Totals:         1       3       0       0       0
  2172 ;;Total ram usage:        4 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    3
  2175 ;; This function calls:
  2176 ;;		___ftpack
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           
  2183                           ;psect for function ___lwtoft
  2184  0F22                     ___lwtoft:	
  2185                           
  2186                           ;incstack = 0
  2187                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2188  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  2189  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  2190  0F24  0828               	movf	___lwtoft@c,w
  2191  0F25  00A0               	movwf	___ftpack@arg
  2192  0F26  0829               	movf	___lwtoft@c+1,w
  2193  0F27  00A1               	movwf	___ftpack@arg+1
  2194  0F28  01A2               	clrf	___ftpack@arg+2
  2195  0F29  308E               	movlw	142
  2196  0F2A  00F5               	movwf	??___lwtoft
  2197  0F2B  0875               	movf	??___lwtoft,w
  2198  0F2C  00A3               	movwf	___ftpack@exp
  2199  0F2D  01A4               	clrf	___ftpack@sign
  2200  0F2E  120A  118A  259D   	fcall	___ftpack
  2201  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0F33  0820               	movf	?___ftpack,w
  2204  0F34  00A8               	movwf	?___lwtoft
  2205  0F35  0821               	movf	?___ftpack+1,w
  2206  0F36  00A9               	movwf	?___lwtoft+1
  2207  0F37  0822               	movf	?___ftpack+2,w
  2208  0F38  00AA               	movwf	?___lwtoft+2
  2209  0F39  0008               	return
  2210  0F3A                     __end_of___lwtoft:	
  2211                           
  2212                           	psect	text9
  2213  0490                     __ptext9:	
  2214 ;; *************** function ___fttol *****************
  2215 ;; Defined at:
  2216 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  f1              3   43[BANK0 ] float 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  lval            4   52[BANK0 ] unsigned long 
  2221 ;;  exp1            1   56[BANK0 ] unsigned char 
  2222 ;;  sign1           1   51[BANK0 ] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  4   43[BANK0 ] long 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2232 ;;      Params:         0       4       0       0       0
  2233 ;;      Locals:         0       6       0       0       0
  2234 ;;      Temps:          0       4       0       0       0
  2235 ;;      Totals:         0      14       0       0       0
  2236 ;;Total ram usage:       14 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    2
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_main
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           
  2247                           ;psect for function ___fttol
  2248  0490                     ___fttol:	
  2249                           
  2250                           ;incstack = 0
  2251                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2252  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0492  084B               	movf	___fttol@f1,w
  2255  0493  00CF               	movwf	??___fttol
  2256  0494  084C               	movf	___fttol@f1+1,w
  2257  0495  00D0               	movwf	??___fttol+1
  2258  0496  084D               	movf	___fttol@f1+2,w
  2259  0497  00D1               	movwf	??___fttol+2
  2260  0498  1003               	clrc
  2261  0499  0D50               	rlf	??___fttol+1,w
  2262  049A  0D51               	rlf	??___fttol+2,w
  2263  049B  00D2               	movwf	??___fttol+3
  2264  049C  0852               	movf	??___fttol+3,w
  2265  049D  00D8               	movwf	___fttol@exp1
  2266  049E  0858               	movf	___fttol@exp1,w
  2267  049F  1D03               	btfss	3,2
  2268  04A0  2CAA               	goto	l1660
  2269  04A1  3000               	movlw	0
  2270  04A2  00CE               	movwf	?___fttol+3
  2271  04A3  3000               	movlw	0
  2272  04A4  00CD               	movwf	?___fttol+2
  2273  04A5  3000               	movlw	0
  2274  04A6  00CC               	movwf	?___fttol+1
  2275  04A7  3000               	movlw	0
  2276  04A8  00CB               	movwf	?___fttol
  2277  04A9  0008               	return
  2278  04AA                     l1660:	
  2279  04AA  084B               	movf	___fttol@f1,w
  2280  04AB  00CF               	movwf	??___fttol
  2281  04AC  084C               	movf	___fttol@f1+1,w
  2282  04AD  00D0               	movwf	??___fttol+1
  2283  04AE  084D               	movf	___fttol@f1+2,w
  2284  04AF  00D1               	movwf	??___fttol+2
  2285  04B0  3017               	movlw	23
  2286  04B1                     u1825:	
  2287  04B1  1003               	clrc
  2288  04B2  0CD1               	rrf	??___fttol+2,f
  2289  04B3  0CD0               	rrf	??___fttol+1,f
  2290  04B4  0CCF               	rrf	??___fttol,f
  2291  04B5  3EFF               	addlw	-1
  2292  04B6  1D03               	skipz
  2293  04B7  2CB1               	goto	u1825
  2294  04B8  084F               	movf	??___fttol,w
  2295  04B9  00D2               	movwf	??___fttol+3
  2296  04BA  0852               	movf	??___fttol+3,w
  2297  04BB  00D3               	movwf	___fttol@sign1
  2298  04BC  17CC               	bsf	___fttol@f1+1,7
  2299  04BD  30FF               	movlw	255
  2300  04BE  05CB               	andwf	___fttol@f1,f
  2301  04BF  30FF               	movlw	255
  2302  04C0  05CC               	andwf	___fttol@f1+1,f
  2303  04C1  3000               	movlw	0
  2304  04C2  05CD               	andwf	___fttol@f1+2,f
  2305  04C3  084B               	movf	___fttol@f1,w
  2306  04C4  00D4               	movwf	___fttol@lval
  2307  04C5  084C               	movf	___fttol@f1+1,w
  2308  04C6  00D5               	movwf	___fttol@lval+1
  2309  04C7  084D               	movf	___fttol@f1+2,w
  2310  04C8  00D6               	movwf	___fttol@lval+2
  2311  04C9  01D7               	clrf	___fttol@lval+3
  2312  04CA  308E               	movlw	142
  2313  04CB  02D8               	subwf	___fttol@exp1,f
  2314  04CC  1FD8               	btfss	___fttol@exp1,7
  2315  04CD  2CEC               	goto	l1680
  2316  04CE  0858               	movf	___fttol@exp1,w
  2317  04CF  3A80               	xorlw	128
  2318  04D0  3E8F               	addlw	143
  2319  04D1  1803               	skipnc
  2320  04D2  2CDC               	goto	l1678
  2321  04D3  3000               	movlw	0
  2322  04D4  00CE               	movwf	?___fttol+3
  2323  04D5  3000               	movlw	0
  2324  04D6  00CD               	movwf	?___fttol+2
  2325  04D7  3000               	movlw	0
  2326  04D8  00CC               	movwf	?___fttol+1
  2327  04D9  3000               	movlw	0
  2328  04DA  00CB               	movwf	?___fttol
  2329  04DB  0008               	return
  2330  04DC                     l1678:	
  2331  04DC  3001               	movlw	1
  2332  04DD                     u1855:	
  2333  04DD  1003               	clrc
  2334  04DE  0CD7               	rrf	___fttol@lval+3,f
  2335  04DF  0CD6               	rrf	___fttol@lval+2,f
  2336  04E0  0CD5               	rrf	___fttol@lval+1,f
  2337  04E1  0CD4               	rrf	___fttol@lval,f
  2338  04E2  3EFF               	addlw	-1
  2339  04E3  1D03               	skipz
  2340  04E4  2CDD               	goto	u1855
  2341  04E5  3001               	movlw	1
  2342  04E6  00CF               	movwf	??___fttol
  2343  04E7  084F               	movf	??___fttol,w
  2344  04E8  07D8               	addwf	___fttol@exp1,f
  2345  04E9  1903               	btfsc	3,2
  2346  04EA  2D07               	goto	l1688
  2347  04EB  2CDC               	goto	l1678
  2348  04EC                     l1680:	
  2349  04EC  3018               	movlw	24
  2350  04ED  0258               	subwf	___fttol@exp1,w
  2351  04EE  1C03               	skipc
  2352  04EF  2D04               	goto	l584
  2353  04F0  3000               	movlw	0
  2354  04F1  00CE               	movwf	?___fttol+3
  2355  04F2  3000               	movlw	0
  2356  04F3  00CD               	movwf	?___fttol+2
  2357  04F4  3000               	movlw	0
  2358  04F5  00CC               	movwf	?___fttol+1
  2359  04F6  3000               	movlw	0
  2360  04F7  00CB               	movwf	?___fttol
  2361  04F8  0008               	return
  2362  04F9                     l1686:	
  2363  04F9  3001               	movlw	1
  2364  04FA  00CF               	movwf	??___fttol
  2365  04FB                     u1885:	
  2366  04FB  1003               	clrc
  2367  04FC  0DD4               	rlf	___fttol@lval,f
  2368  04FD  0DD5               	rlf	___fttol@lval+1,f
  2369  04FE  0DD6               	rlf	___fttol@lval+2,f
  2370  04FF  0DD7               	rlf	___fttol@lval+3,f
  2371  0500  0BCF               	decfsz	??___fttol,f
  2372  0501  2CFB               	goto	u1885
  2373  0502  3001               	movlw	1
  2374  0503  02D8               	subwf	___fttol@exp1,f
  2375  0504                     l584:	
  2376  0504  0858               	movf	___fttol@exp1,w
  2377  0505  1D03               	btfss	3,2
  2378  0506  2CF9               	goto	l1686
  2379  0507                     l1688:	
  2380  0507  0853               	movf	___fttol@sign1,w
  2381  0508  1903               	btfsc	3,2
  2382  0509  2D15               	goto	l1692
  2383  050A  09D4               	comf	___fttol@lval,f
  2384  050B  09D5               	comf	___fttol@lval+1,f
  2385  050C  09D6               	comf	___fttol@lval+2,f
  2386  050D  09D7               	comf	___fttol@lval+3,f
  2387  050E  0AD4               	incf	___fttol@lval,f
  2388  050F  1903               	skipnz
  2389  0510  0AD5               	incf	___fttol@lval+1,f
  2390  0511  1903               	skipnz
  2391  0512  0AD6               	incf	___fttol@lval+2,f
  2392  0513  1903               	skipnz
  2393  0514  0AD7               	incf	___fttol@lval+3,f
  2394  0515                     l1692:	
  2395  0515  0857               	movf	___fttol@lval+3,w
  2396  0516  00CE               	movwf	?___fttol+3
  2397  0517  0856               	movf	___fttol@lval+2,w
  2398  0518  00CD               	movwf	?___fttol+2
  2399  0519  0855               	movf	___fttol@lval+1,w
  2400  051A  00CC               	movwf	?___fttol+1
  2401  051B  0854               	movf	___fttol@lval,w
  2402  051C  00CB               	movwf	?___fttol
  2403  051D  0008               	return
  2404  051E                     __end_of___fttol:	
  2405                           
  2406                           	psect	text10
  2407  0246                     __ptext10:	
  2408 ;; *************** function ___ftmul *****************
  2409 ;; Defined at:
  2410 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  f1              3   27[BANK0 ] float 
  2413 ;;  f2              3   30[BANK0 ] float 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  f3_as_produc    3   38[BANK0 ] unsigned um
  2416 ;;  sign            1   42[BANK0 ] unsigned char 
  2417 ;;  cntr            1   41[BANK0 ] unsigned char 
  2418 ;;  exp             1   37[BANK0 ] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  3   27[BANK0 ] float 
  2421 ;; Registers used:
  2422 ;;		wreg, status,2, status,0, pclath, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2428 ;;      Params:         0       6       0       0       0
  2429 ;;      Locals:         0       6       0       0       0
  2430 ;;      Temps:          0       4       0       0       0
  2431 ;;      Totals:         0      16       0       0       0
  2432 ;;Total ram usage:       16 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    3
  2435 ;; This function calls:
  2436 ;;		___ftpack
  2437 ;; This function is called by:
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function ___ftmul
  2444  0246                     ___ftmul:	
  2445                           
  2446                           ;incstack = 0
  2447                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2448  0246  1283               	bcf	3,5	;RP0=0, select bank0
  2449  0247  1303               	bcf	3,6	;RP1=0, select bank0
  2450  0248  083B               	movf	___ftmul@f1,w
  2451  0249  00C1               	movwf	??___ftmul
  2452  024A  083C               	movf	___ftmul@f1+1,w
  2453  024B  00C2               	movwf	??___ftmul+1
  2454  024C  083D               	movf	___ftmul@f1+2,w
  2455  024D  00C3               	movwf	??___ftmul+2
  2456  024E  1003               	clrc
  2457  024F  0D42               	rlf	??___ftmul+1,w
  2458  0250  0D43               	rlf	??___ftmul+2,w
  2459  0251  00C4               	movwf	??___ftmul+3
  2460  0252  0844               	movf	??___ftmul+3,w
  2461  0253  00C5               	movwf	___ftmul@exp
  2462  0254  0845               	movf	___ftmul@exp,w
  2463  0255  1D03               	btfss	3,2
  2464  0256  2A5E               	goto	l2060
  2465  0257  3000               	movlw	0
  2466  0258  00BB               	movwf	?___ftmul
  2467  0259  3000               	movlw	0
  2468  025A  00BC               	movwf	?___ftmul+1
  2469  025B  3000               	movlw	0
  2470  025C  00BD               	movwf	?___ftmul+2
  2471  025D  0008               	return
  2472  025E                     l2060:	
  2473  025E  083E               	movf	___ftmul@f2,w
  2474  025F  00C1               	movwf	??___ftmul
  2475  0260  083F               	movf	___ftmul@f2+1,w
  2476  0261  00C2               	movwf	??___ftmul+1
  2477  0262  0840               	movf	___ftmul@f2+2,w
  2478  0263  00C3               	movwf	??___ftmul+2
  2479  0264  1003               	clrc
  2480  0265  0D42               	rlf	??___ftmul+1,w
  2481  0266  0D43               	rlf	??___ftmul+2,w
  2482  0267  00C4               	movwf	??___ftmul+3
  2483  0268  0844               	movf	??___ftmul+3,w
  2484  0269  00CA               	movwf	___ftmul@sign
  2485  026A  084A               	movf	___ftmul@sign,w
  2486  026B  1D03               	btfss	3,2
  2487  026C  2A74               	goto	l2066
  2488  026D  3000               	movlw	0
  2489  026E  00BB               	movwf	?___ftmul
  2490  026F  3000               	movlw	0
  2491  0270  00BC               	movwf	?___ftmul+1
  2492  0271  3000               	movlw	0
  2493  0272  00BD               	movwf	?___ftmul+2
  2494  0273  0008               	return
  2495  0274                     l2066:	
  2496  0274  084A               	movf	___ftmul@sign,w
  2497  0275  3E7B               	addlw	123
  2498  0276  00C1               	movwf	??___ftmul
  2499  0277  0841               	movf	??___ftmul,w
  2500  0278  07C5               	addwf	___ftmul@exp,f
  2501  0279  083B               	movf	___ftmul@f1,w
  2502  027A  00C1               	movwf	??___ftmul
  2503  027B  083C               	movf	___ftmul@f1+1,w
  2504  027C  00C2               	movwf	??___ftmul+1
  2505  027D  083D               	movf	___ftmul@f1+2,w
  2506  027E  00C3               	movwf	??___ftmul+2
  2507  027F  3010               	movlw	16
  2508  0280                     u2515:	
  2509  0280  1003               	clrc
  2510  0281  0CC3               	rrf	??___ftmul+2,f
  2511  0282  0CC2               	rrf	??___ftmul+1,f
  2512  0283  0CC1               	rrf	??___ftmul,f
  2513  0284  3EFF               	addlw	-1
  2514  0285  1D03               	skipz
  2515  0286  2A80               	goto	u2515
  2516  0287  0841               	movf	??___ftmul,w
  2517  0288  00C4               	movwf	??___ftmul+3
  2518  0289  0844               	movf	??___ftmul+3,w
  2519  028A  00CA               	movwf	___ftmul@sign
  2520  028B  083E               	movf	___ftmul@f2,w
  2521  028C  00C1               	movwf	??___ftmul
  2522  028D  083F               	movf	___ftmul@f2+1,w
  2523  028E  00C2               	movwf	??___ftmul+1
  2524  028F  0840               	movf	___ftmul@f2+2,w
  2525  0290  00C3               	movwf	??___ftmul+2
  2526  0291  3010               	movlw	16
  2527  0292                     u2525:	
  2528  0292  1003               	clrc
  2529  0293  0CC3               	rrf	??___ftmul+2,f
  2530  0294  0CC2               	rrf	??___ftmul+1,f
  2531  0295  0CC1               	rrf	??___ftmul,f
  2532  0296  3EFF               	addlw	-1
  2533  0297  1D03               	skipz
  2534  0298  2A92               	goto	u2525
  2535  0299  0841               	movf	??___ftmul,w
  2536  029A  00C4               	movwf	??___ftmul+3
  2537  029B  0844               	movf	??___ftmul+3,w
  2538  029C  06CA               	xorwf	___ftmul@sign,f
  2539  029D  3080               	movlw	128
  2540  029E  00C1               	movwf	??___ftmul
  2541  029F  0841               	movf	??___ftmul,w
  2542  02A0  05CA               	andwf	___ftmul@sign,f
  2543  02A1  17BC               	bsf	___ftmul@f1+1,7
  2544  02A2  17BF               	bsf	___ftmul@f2+1,7
  2545  02A3  30FF               	movlw	255
  2546  02A4  05BE               	andwf	___ftmul@f2,f
  2547  02A5  30FF               	movlw	255
  2548  02A6  05BF               	andwf	___ftmul@f2+1,f
  2549  02A7  3000               	movlw	0
  2550  02A8  05C0               	andwf	___ftmul@f2+2,f
  2551  02A9  3000               	movlw	0
  2552  02AA  00C6               	movwf	___ftmul@f3_as_product
  2553  02AB  3000               	movlw	0
  2554  02AC  00C7               	movwf	___ftmul@f3_as_product+1
  2555  02AD  3000               	movlw	0
  2556  02AE  00C8               	movwf	___ftmul@f3_as_product+2
  2557  02AF  3007               	movlw	7
  2558  02B0  00C1               	movwf	??___ftmul
  2559  02B1  0841               	movf	??___ftmul,w
  2560  02B2  00C9               	movwf	___ftmul@cntr
  2561  02B3                     l2078:	
  2562  02B3  1C3B               	btfss	___ftmul@f1,0
  2563  02B4  2AC3               	goto	l2082
  2564  02B5  083E               	movf	___ftmul@f2,w
  2565  02B6  07C6               	addwf	___ftmul@f3_as_product,f
  2566  02B7  083F               	movf	___ftmul@f2+1,w
  2567  02B8  1103               	clrz
  2568  02B9  1803               	skipnc
  2569  02BA  0A3F               	incf	___ftmul@f2+1,w
  2570  02BB  1D03               	btfss	3,2
  2571  02BC  07C7               	addwf	___ftmul@f3_as_product+1,f
  2572  02BD  0840               	movf	___ftmul@f2+2,w
  2573  02BE  1103               	clrz
  2574  02BF  1803               	skipnc
  2575  02C0  0A40               	incf	___ftmul@f2+2,w
  2576  02C1  1D03               	btfss	3,2
  2577  02C2  07C8               	addwf	___ftmul@f3_as_product+2,f
  2578  02C3                     l2082:	
  2579  02C3  3001               	movlw	1
  2580  02C4                     u2555:	
  2581  02C4  1003               	clrc
  2582  02C5  0CBD               	rrf	___ftmul@f1+2,f
  2583  02C6  0CBC               	rrf	___ftmul@f1+1,f
  2584  02C7  0CBB               	rrf	___ftmul@f1,f
  2585  02C8  3EFF               	addlw	-1
  2586  02C9  1D03               	skipz
  2587  02CA  2AC4               	goto	u2555
  2588  02CB  3001               	movlw	1
  2589  02CC                     u2565:	
  2590  02CC  1003               	clrc
  2591  02CD  0DBE               	rlf	___ftmul@f2,f
  2592  02CE  0DBF               	rlf	___ftmul@f2+1,f
  2593  02CF  0DC0               	rlf	___ftmul@f2+2,f
  2594  02D0  3EFF               	addlw	-1
  2595  02D1  1D03               	skipz
  2596  02D2  2ACC               	goto	u2565
  2597  02D3  3001               	movlw	1
  2598  02D4  02C9               	subwf	___ftmul@cntr,f
  2599  02D5  1D03               	btfss	3,2
  2600  02D6  2AB3               	goto	l2078
  2601  02D7  3009               	movlw	9
  2602  02D8  00C1               	movwf	??___ftmul
  2603  02D9  0841               	movf	??___ftmul,w
  2604  02DA  00C9               	movwf	___ftmul@cntr
  2605  02DB                     l2090:	
  2606  02DB  1C3B               	btfss	___ftmul@f1,0
  2607  02DC  2AEB               	goto	l2094
  2608  02DD  083E               	movf	___ftmul@f2,w
  2609  02DE  07C6               	addwf	___ftmul@f3_as_product,f
  2610  02DF  083F               	movf	___ftmul@f2+1,w
  2611  02E0  1103               	clrz
  2612  02E1  1803               	skipnc
  2613  02E2  0A3F               	incf	___ftmul@f2+1,w
  2614  02E3  1D03               	btfss	3,2
  2615  02E4  07C7               	addwf	___ftmul@f3_as_product+1,f
  2616  02E5  0840               	movf	___ftmul@f2+2,w
  2617  02E6  1103               	clrz
  2618  02E7  1803               	skipnc
  2619  02E8  0A40               	incf	___ftmul@f2+2,w
  2620  02E9  1D03               	btfss	3,2
  2621  02EA  07C8               	addwf	___ftmul@f3_as_product+2,f
  2622  02EB                     l2094:	
  2623  02EB  3001               	movlw	1
  2624  02EC                     u2605:	
  2625  02EC  1003               	clrc
  2626  02ED  0CBD               	rrf	___ftmul@f1+2,f
  2627  02EE  0CBC               	rrf	___ftmul@f1+1,f
  2628  02EF  0CBB               	rrf	___ftmul@f1,f
  2629  02F0  3EFF               	addlw	-1
  2630  02F1  1D03               	skipz
  2631  02F2  2AEC               	goto	u2605
  2632  02F3  3001               	movlw	1
  2633  02F4                     u2615:	
  2634  02F4  1003               	clrc
  2635  02F5  0CC8               	rrf	___ftmul@f3_as_product+2,f
  2636  02F6  0CC7               	rrf	___ftmul@f3_as_product+1,f
  2637  02F7  0CC6               	rrf	___ftmul@f3_as_product,f
  2638  02F8  3EFF               	addlw	-1
  2639  02F9  1D03               	skipz
  2640  02FA  2AF4               	goto	u2615
  2641  02FB  3001               	movlw	1
  2642  02FC  02C9               	subwf	___ftmul@cntr,f
  2643  02FD  1D03               	btfss	3,2
  2644  02FE  2ADB               	goto	l2090
  2645  02FF  0846               	movf	___ftmul@f3_as_product,w
  2646  0300  00A0               	movwf	___ftpack@arg
  2647  0301  0847               	movf	___ftmul@f3_as_product+1,w
  2648  0302  00A1               	movwf	___ftpack@arg+1
  2649  0303  0848               	movf	___ftmul@f3_as_product+2,w
  2650  0304  00A2               	movwf	___ftpack@arg+2
  2651  0305  0845               	movf	___ftmul@exp,w
  2652  0306  00C1               	movwf	??___ftmul
  2653  0307  0841               	movf	??___ftmul,w
  2654  0308  00A3               	movwf	___ftpack@exp
  2655  0309  084A               	movf	___ftmul@sign,w
  2656  030A  00C2               	movwf	??___ftmul+1
  2657  030B  0842               	movf	??___ftmul+1,w
  2658  030C  00A4               	movwf	___ftpack@sign
  2659  030D  120A  118A  259D   	fcall	___ftpack
  2660  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2661  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2662  0312  0820               	movf	?___ftpack,w
  2663  0313  00BB               	movwf	?___ftmul
  2664  0314  0821               	movf	?___ftpack+1,w
  2665  0315  00BC               	movwf	?___ftmul+1
  2666  0316  0822               	movf	?___ftpack+2,w
  2667  0317  00BD               	movwf	?___ftmul+2
  2668  0318  0008               	return
  2669  0319                     __end_of___ftmul:	
  2670                           
  2671                           	psect	text11
  2672  03D8                     __ptext11:	
  2673 ;; *************** function ___ftdiv *****************
  2674 ;; Defined at:
  2675 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;  f2              3   11[BANK0 ] float 
  2678 ;;  f1              3   14[BANK0 ] float 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;  f3              3   22[BANK0 ] float 
  2681 ;;  sign            1   26[BANK0 ] unsigned char 
  2682 ;;  exp             1   25[BANK0 ] unsigned char 
  2683 ;;  cntr            1   21[BANK0 ] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  3   11[BANK0 ] float 
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2693 ;;      Params:         0       6       0       0       0
  2694 ;;      Locals:         0       6       0       0       0
  2695 ;;      Temps:          0       4       0       0       0
  2696 ;;      Totals:         0      16       0       0       0
  2697 ;;Total ram usage:       16 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    3
  2700 ;; This function calls:
  2701 ;;		___ftpack
  2702 ;; This function is called by:
  2703 ;;		_main
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function ___ftdiv
  2709  03D8                     ___ftdiv:	
  2710                           
  2711                           ;incstack = 0
  2712                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2713  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2714  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2715  03DA  082E               	movf	___ftdiv@f1,w
  2716  03DB  00B1               	movwf	??___ftdiv
  2717  03DC  082F               	movf	___ftdiv@f1+1,w
  2718  03DD  00B2               	movwf	??___ftdiv+1
  2719  03DE  0830               	movf	___ftdiv@f1+2,w
  2720  03DF  00B3               	movwf	??___ftdiv+2
  2721  03E0  1003               	clrc
  2722  03E1  0D32               	rlf	??___ftdiv+1,w
  2723  03E2  0D33               	rlf	??___ftdiv+2,w
  2724  03E3  00B4               	movwf	??___ftdiv+3
  2725  03E4  0834               	movf	??___ftdiv+3,w
  2726  03E5  00B9               	movwf	___ftdiv@exp
  2727  03E6  0839               	movf	___ftdiv@exp,w
  2728  03E7  1D03               	btfss	3,2
  2729  03E8  2BF0               	goto	l2018
  2730  03E9  3000               	movlw	0
  2731  03EA  00AB               	movwf	?___ftdiv
  2732  03EB  3000               	movlw	0
  2733  03EC  00AC               	movwf	?___ftdiv+1
  2734  03ED  3000               	movlw	0
  2735  03EE  00AD               	movwf	?___ftdiv+2
  2736  03EF  0008               	return
  2737  03F0                     l2018:	
  2738  03F0  082B               	movf	___ftdiv@f2,w
  2739  03F1  00B1               	movwf	??___ftdiv
  2740  03F2  082C               	movf	___ftdiv@f2+1,w
  2741  03F3  00B2               	movwf	??___ftdiv+1
  2742  03F4  082D               	movf	___ftdiv@f2+2,w
  2743  03F5  00B3               	movwf	??___ftdiv+2
  2744  03F6  1003               	clrc
  2745  03F7  0D32               	rlf	??___ftdiv+1,w
  2746  03F8  0D33               	rlf	??___ftdiv+2,w
  2747  03F9  00B4               	movwf	??___ftdiv+3
  2748  03FA  0834               	movf	??___ftdiv+3,w
  2749  03FB  00BA               	movwf	___ftdiv@sign
  2750  03FC  083A               	movf	___ftdiv@sign,w
  2751  03FD  1D03               	btfss	3,2
  2752  03FE  2C06               	goto	l2024
  2753  03FF  3000               	movlw	0
  2754  0400  00AB               	movwf	?___ftdiv
  2755  0401  3000               	movlw	0
  2756  0402  00AC               	movwf	?___ftdiv+1
  2757  0403  3000               	movlw	0
  2758  0404  00AD               	movwf	?___ftdiv+2
  2759  0405  0008               	return
  2760  0406                     l2024:	
  2761  0406  3000               	movlw	0
  2762  0407  00B6               	movwf	___ftdiv@f3
  2763  0408  3000               	movlw	0
  2764  0409  00B7               	movwf	___ftdiv@f3+1
  2765  040A  3000               	movlw	0
  2766  040B  00B8               	movwf	___ftdiv@f3+2
  2767  040C  3089               	movlw	137
  2768  040D  073A               	addwf	___ftdiv@sign,w
  2769  040E  00B1               	movwf	??___ftdiv
  2770  040F  0831               	movf	??___ftdiv,w
  2771  0410  02B9               	subwf	___ftdiv@exp,f
  2772  0411  082E               	movf	___ftdiv@f1,w
  2773  0412  00B1               	movwf	??___ftdiv
  2774  0413  082F               	movf	___ftdiv@f1+1,w
  2775  0414  00B2               	movwf	??___ftdiv+1
  2776  0415  0830               	movf	___ftdiv@f1+2,w
  2777  0416  00B3               	movwf	??___ftdiv+2
  2778  0417  3010               	movlw	16
  2779  0418                     u2435:	
  2780  0418  1003               	clrc
  2781  0419  0CB3               	rrf	??___ftdiv+2,f
  2782  041A  0CB2               	rrf	??___ftdiv+1,f
  2783  041B  0CB1               	rrf	??___ftdiv,f
  2784  041C  3EFF               	addlw	-1
  2785  041D  1D03               	skipz
  2786  041E  2C18               	goto	u2435
  2787  041F  0831               	movf	??___ftdiv,w
  2788  0420  00B4               	movwf	??___ftdiv+3
  2789  0421  0834               	movf	??___ftdiv+3,w
  2790  0422  00BA               	movwf	___ftdiv@sign
  2791  0423  082B               	movf	___ftdiv@f2,w
  2792  0424  00B1               	movwf	??___ftdiv
  2793  0425  082C               	movf	___ftdiv@f2+1,w
  2794  0426  00B2               	movwf	??___ftdiv+1
  2795  0427  082D               	movf	___ftdiv@f2+2,w
  2796  0428  00B3               	movwf	??___ftdiv+2
  2797  0429  3010               	movlw	16
  2798  042A                     u2445:	
  2799  042A  1003               	clrc
  2800  042B  0CB3               	rrf	??___ftdiv+2,f
  2801  042C  0CB2               	rrf	??___ftdiv+1,f
  2802  042D  0CB1               	rrf	??___ftdiv,f
  2803  042E  3EFF               	addlw	-1
  2804  042F  1D03               	skipz
  2805  0430  2C2A               	goto	u2445
  2806  0431  0831               	movf	??___ftdiv,w
  2807  0432  00B4               	movwf	??___ftdiv+3
  2808  0433  0834               	movf	??___ftdiv+3,w
  2809  0434  06BA               	xorwf	___ftdiv@sign,f
  2810  0435  3080               	movlw	128
  2811  0436  00B1               	movwf	??___ftdiv
  2812  0437  0831               	movf	??___ftdiv,w
  2813  0438  05BA               	andwf	___ftdiv@sign,f
  2814  0439  17AF               	bsf	___ftdiv@f1+1,7
  2815  043A  30FF               	movlw	255
  2816  043B  05AE               	andwf	___ftdiv@f1,f
  2817  043C  30FF               	movlw	255
  2818  043D  05AF               	andwf	___ftdiv@f1+1,f
  2819  043E  3000               	movlw	0
  2820  043F  05B0               	andwf	___ftdiv@f1+2,f
  2821  0440  17AC               	bsf	___ftdiv@f2+1,7
  2822  0441  30FF               	movlw	255
  2823  0442  05AB               	andwf	___ftdiv@f2,f
  2824  0443  30FF               	movlw	255
  2825  0444  05AC               	andwf	___ftdiv@f2+1,f
  2826  0445  3000               	movlw	0
  2827  0446  05AD               	andwf	___ftdiv@f2+2,f
  2828  0447  3018               	movlw	24
  2829  0448  00B1               	movwf	??___ftdiv
  2830  0449  0831               	movf	??___ftdiv,w
  2831  044A  00B5               	movwf	___ftdiv@cntr
  2832  044B                     l2038:	
  2833  044B  3001               	movlw	1
  2834  044C                     u2455:	
  2835  044C  1003               	clrc
  2836  044D  0DB6               	rlf	___ftdiv@f3,f
  2837  044E  0DB7               	rlf	___ftdiv@f3+1,f
  2838  044F  0DB8               	rlf	___ftdiv@f3+2,f
  2839  0450  3EFF               	addlw	-1
  2840  0451  1D03               	skipz
  2841  0452  2C4C               	goto	u2455
  2842  0453  082D               	movf	___ftdiv@f2+2,w
  2843  0454  0230               	subwf	___ftdiv@f1+2,w
  2844  0455  1D03               	skipz
  2845  0456  2C5D               	goto	u2465
  2846  0457  082C               	movf	___ftdiv@f2+1,w
  2847  0458  022F               	subwf	___ftdiv@f1+1,w
  2848  0459  1D03               	skipz
  2849  045A  2C5D               	goto	u2465
  2850  045B  082B               	movf	___ftdiv@f2,w
  2851  045C  022E               	subwf	___ftdiv@f1,w
  2852  045D                     u2465:	
  2853  045D  1C03               	skipc
  2854  045E  2C6A               	goto	l2046
  2855  045F  082B               	movf	___ftdiv@f2,w
  2856  0460  02AE               	subwf	___ftdiv@f1,f
  2857  0461  082C               	movf	___ftdiv@f2+1,w
  2858  0462  1C03               	skipc
  2859  0463  0F2C               	incfsz	___ftdiv@f2+1,w
  2860  0464  02AF               	subwf	___ftdiv@f1+1,f
  2861  0465  082D               	movf	___ftdiv@f2+2,w
  2862  0466  1C03               	skipc
  2863  0467  0A2D               	incf	___ftdiv@f2+2,w
  2864  0468  02B0               	subwf	___ftdiv@f1+2,f
  2865  0469  1436               	bsf	___ftdiv@f3,0
  2866  046A                     l2046:	
  2867  046A  3001               	movlw	1
  2868  046B                     u2475:	
  2869  046B  1003               	clrc
  2870  046C  0DAE               	rlf	___ftdiv@f1,f
  2871  046D  0DAF               	rlf	___ftdiv@f1+1,f
  2872  046E  0DB0               	rlf	___ftdiv@f1+2,f
  2873  046F  3EFF               	addlw	-1
  2874  0470  1D03               	skipz
  2875  0471  2C6B               	goto	u2475
  2876  0472  3001               	movlw	1
  2877  0473  02B5               	subwf	___ftdiv@cntr,f
  2878  0474  1D03               	btfss	3,2
  2879  0475  2C4B               	goto	l2038
  2880  0476  0836               	movf	___ftdiv@f3,w
  2881  0477  00A0               	movwf	___ftpack@arg
  2882  0478  0837               	movf	___ftdiv@f3+1,w
  2883  0479  00A1               	movwf	___ftpack@arg+1
  2884  047A  0838               	movf	___ftdiv@f3+2,w
  2885  047B  00A2               	movwf	___ftpack@arg+2
  2886  047C  0839               	movf	___ftdiv@exp,w
  2887  047D  00B1               	movwf	??___ftdiv
  2888  047E  0831               	movf	??___ftdiv,w
  2889  047F  00A3               	movwf	___ftpack@exp
  2890  0480  083A               	movf	___ftdiv@sign,w
  2891  0481  00B2               	movwf	??___ftdiv+1
  2892  0482  0832               	movf	??___ftdiv+1,w
  2893  0483  00A4               	movwf	___ftpack@sign
  2894  0484  120A  118A  259D   	fcall	___ftpack
  2895  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0489  0820               	movf	?___ftpack,w
  2898  048A  00AB               	movwf	?___ftdiv
  2899  048B  0821               	movf	?___ftpack+1,w
  2900  048C  00AC               	movwf	?___ftdiv+1
  2901  048D  0822               	movf	?___ftpack+2,w
  2902  048E  00AD               	movwf	?___ftdiv+2
  2903  048F  0008               	return
  2904  0490                     __end_of___ftdiv:	
  2905                           
  2906                           	psect	text12
  2907  059D                     __ptext12:	
  2908 ;; *************** function ___ftpack *****************
  2909 ;; Defined at:
  2910 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  arg             3    0[BANK0 ] unsigned um
  2913 ;;  exp             1    3[BANK0 ] unsigned char 
  2914 ;;  sign            1    4[BANK0 ] unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  3    0[BANK0 ] float 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2926 ;;      Params:         0       5       0       0       0
  2927 ;;      Locals:         0       0       0       0       0
  2928 ;;      Temps:          0       3       0       0       0
  2929 ;;      Totals:         0       8       0       0       0
  2930 ;;Total ram usage:        8 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    2
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		___ftdiv
  2937 ;;		___ftmul
  2938 ;;		___lwtoft
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           
  2943                           ;psect for function ___ftpack
  2944  059D                     ___ftpack:	
  2945                           
  2946                           ;incstack = 0
  2947                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2948  059D  1283               	bcf	3,5	;RP0=0, select bank0
  2949  059E  1303               	bcf	3,6	;RP1=0, select bank0
  2950  059F  0823               	movf	___ftpack@exp,w
  2951  05A0  1903               	btfsc	3,2
  2952  05A1  2DA7               	goto	l1828
  2953  05A2  0822               	movf	___ftpack@arg+2,w
  2954  05A3  0421               	iorwf	___ftpack@arg+1,w
  2955  05A4  0420               	iorwf	___ftpack@arg,w
  2956  05A5  1D03               	skipz
  2957  05A6  2DBA               	goto	l1834
  2958  05A7                     l1828:	
  2959  05A7  3000               	movlw	0
  2960  05A8  00A0               	movwf	?___ftpack
  2961  05A9  3000               	movlw	0
  2962  05AA  00A1               	movwf	?___ftpack+1
  2963  05AB  3000               	movlw	0
  2964  05AC  00A2               	movwf	?___ftpack+2
  2965  05AD  0008               	return
  2966  05AE                     l1832:	
  2967  05AE  3001               	movlw	1
  2968  05AF  00A5               	movwf	??___ftpack
  2969  05B0  0825               	movf	??___ftpack,w
  2970  05B1  07A3               	addwf	___ftpack@exp,f
  2971  05B2  3001               	movlw	1
  2972  05B3                     u2025:	
  2973  05B3  1003               	clrc
  2974  05B4  0CA2               	rrf	___ftpack@arg+2,f
  2975  05B5  0CA1               	rrf	___ftpack@arg+1,f
  2976  05B6  0CA0               	rrf	___ftpack@arg,f
  2977  05B7  3EFF               	addlw	-1
  2978  05B8  1D03               	skipz
  2979  05B9  2DB3               	goto	u2025
  2980  05BA                     l1834:	
  2981  05BA  30FE               	movlw	254
  2982  05BB  0522               	andwf	___ftpack@arg+2,w
  2983  05BC  1903               	btfsc	3,2
  2984  05BD  2DD5               	goto	l493
  2985  05BE  2DAE               	goto	l1832
  2986  05BF                     l1836:	
  2987  05BF  3001               	movlw	1
  2988  05C0  00A5               	movwf	??___ftpack
  2989  05C1  0825               	movf	??___ftpack,w
  2990  05C2  07A3               	addwf	___ftpack@exp,f
  2991  05C3  3001               	movlw	1
  2992  05C4  07A0               	addwf	___ftpack@arg,f
  2993  05C5  3000               	movlw	0
  2994  05C6  1803               	skipnc
  2995  05C7  3001               	movlw	1
  2996  05C8  07A1               	addwf	___ftpack@arg+1,f
  2997  05C9  3000               	movlw	0
  2998  05CA  1803               	skipnc
  2999  05CB  3001               	movlw	1
  3000  05CC  07A2               	addwf	___ftpack@arg+2,f
  3001  05CD  3001               	movlw	1
  3002  05CE                     u2045:	
  3003  05CE  1003               	clrc
  3004  05CF  0CA2               	rrf	___ftpack@arg+2,f
  3005  05D0  0CA1               	rrf	___ftpack@arg+1,f
  3006  05D1  0CA0               	rrf	___ftpack@arg,f
  3007  05D2  3EFF               	addlw	-1
  3008  05D3  1D03               	skipz
  3009  05D4  2DCE               	goto	u2045
  3010  05D5                     l493:	
  3011  05D5  30FF               	movlw	255
  3012  05D6  0522               	andwf	___ftpack@arg+2,w
  3013  05D7  1903               	btfsc	3,2
  3014  05D8  2DE4               	goto	l1844
  3015  05D9  2DBF               	goto	l1836
  3016  05DA                     l1842:	
  3017  05DA  3001               	movlw	1
  3018  05DB  02A3               	subwf	___ftpack@exp,f
  3019  05DC  3001               	movlw	1
  3020  05DD                     u2065:	
  3021  05DD  1003               	clrc
  3022  05DE  0DA0               	rlf	___ftpack@arg,f
  3023  05DF  0DA1               	rlf	___ftpack@arg+1,f
  3024  05E0  0DA2               	rlf	___ftpack@arg+2,f
  3025  05E1  3EFF               	addlw	-1
  3026  05E2  1D03               	skipz
  3027  05E3  2DDD               	goto	u2065
  3028  05E4                     l1844:	
  3029  05E4  1BA1               	btfsc	___ftpack@arg+1,7
  3030  05E5  2DEA               	goto	l500
  3031  05E6  3002               	movlw	2
  3032  05E7  0223               	subwf	___ftpack@exp,w
  3033  05E8  1803               	skipnc
  3034  05E9  2DDA               	goto	l1842
  3035  05EA                     l500:	
  3036  05EA  1823               	btfsc	___ftpack@exp,0
  3037  05EB  2DF2               	goto	l501
  3038  05EC  30FF               	movlw	255
  3039  05ED  05A0               	andwf	___ftpack@arg,f
  3040  05EE  307F               	movlw	127
  3041  05EF  05A1               	andwf	___ftpack@arg+1,f
  3042  05F0  30FF               	movlw	255
  3043  05F1  05A2               	andwf	___ftpack@arg+2,f
  3044  05F2                     l501:	
  3045  05F2  1003               	clrc
  3046  05F3  0CA3               	rrf	___ftpack@exp,f
  3047  05F4  0823               	movf	___ftpack@exp,w
  3048  05F5  00A5               	movwf	??___ftpack
  3049  05F6  01A6               	clrf	??___ftpack+1
  3050  05F7  01A7               	clrf	??___ftpack+2
  3051  05F8  3010               	movlw	16
  3052  05F9                     u2105:	
  3053  05F9  1003               	clrc
  3054  05FA  0DA5               	rlf	??___ftpack,f
  3055  05FB  0DA6               	rlf	??___ftpack+1,f
  3056  05FC  0DA7               	rlf	??___ftpack+2,f
  3057  05FD  3EFF               	addlw	-1
  3058  05FE  1D03               	skipz
  3059  05FF  2DF9               	goto	u2105
  3060  0600  0825               	movf	??___ftpack,w
  3061  0601  04A0               	iorwf	___ftpack@arg,f
  3062  0602  0826               	movf	??___ftpack+1,w
  3063  0603  04A1               	iorwf	___ftpack@arg+1,f
  3064  0604  0827               	movf	??___ftpack+2,w
  3065  0605  04A2               	iorwf	___ftpack@arg+2,f
  3066  0606  0824               	movf	___ftpack@sign,w
  3067  0607  1903               	btfsc	3,2
  3068  0608  0008               	return
  3069  0609  17A2               	bsf	___ftpack@arg+2,7
  3070  060A  0008               	return
  3071  060B                     __end_of___ftpack:	
  3072                           
  3073                           	psect	text13
  3074  07E5                     __ptext13:	
  3075 ;; *************** function _StartSignal *****************
  3076 ;; Defined at:
  3077 ;;		line 59 in file "LIFI_agri.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;		None
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3091 ;;      Params:         0       0       0       0       0
  3092 ;;      Locals:         0       0       0       0       0
  3093 ;;      Temps:          2       0       0       0       0
  3094 ;;      Totals:         2       0       0       0       0
  3095 ;;Total ram usage:        2 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    2
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _StartSignal
  3107  07E5                     _StartSignal:	
  3108                           
  3109                           ;LIFI_agri.c: 60: TRISB2 = 0;
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in _StartSignal: [wreg]
  3113  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  3114  07E6  1303               	bcf	3,6	;RP1=0, select bank1
  3115  07E7  1106               	bcf	6,2	;volatile
  3116                           
  3117                           ;LIFI_agri.c: 61: RB2 = 0;
  3118  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  3119  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  3120  07EA  1106               	bcf	6,2	;volatile
  3121                           
  3122                           ;LIFI_agri.c: 62: _delay((unsigned long)((18)*(20000000/4000.0)));
  3123  07EB  3075               	movlw	117
  3124  07EC  00F6               	movwf	??_StartSignal+1
  3125  07ED  30E1               	movlw	225
  3126  07EE  00F5               	movwf	??_StartSignal
  3127  07EF                     u2737:	
  3128  07EF  0BF5               	decfsz	??_StartSignal,f
  3129  07F0  2FEF               	goto	u2737
  3130  07F1  0BF6               	decfsz	??_StartSignal+1,f
  3131  07F2  2FEF               	goto	u2737
  3132                           
  3133                           ;LIFI_agri.c: 63: RB2 = 1;
  3134  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  3135  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  3136  07F5  1506               	bsf	6,2	;volatile
  3137                           
  3138                           ;LIFI_agri.c: 64: _delay((unsigned long)((30)*(20000000/4000000.0)));
  3139  07F6  3031               	movlw	49
  3140  07F7  00F5               	movwf	??_StartSignal
  3141  07F8                     u2747:	
  3142  07F8  0BF5               	decfsz	??_StartSignal,f
  3143  07F9  2FF8               	goto	u2747
  3144  07FA  2FFB               	nop2
  3145                           
  3146                           ;LIFI_agri.c: 65: TRISB2 = 1;
  3147  07FB  1683               	bsf	3,5	;RP0=1, select bank1
  3148  07FC  1303               	bcf	3,6	;RP1=0, select bank1
  3149  07FD  1506               	bsf	6,2	;volatile
  3150  07FE  0008               	return
  3151  07FF                     __end_of_StartSignal:	
  3152                           
  3153                           	psect	text14
  3154  073D                     __ptext14:	
  3155 ;; *************** function _ReadData *****************
  3156 ;; Defined at:
  3157 ;;		line 77 in file "LIFI_agri.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3171 ;;      Params:         0       0       0       0       0
  3172 ;;      Locals:         0       0       0       0       0
  3173 ;;      Temps:          2       0       0       0       0
  3174 ;;      Totals:         2       0       0       0       0
  3175 ;;Total ram usage:        2 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    2
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _ReadData
  3187  073D                     _ReadData:	
  3188                           
  3189                           ;LIFI_agri.c: 78: for(b=0;b<8;b++){
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _ReadData: [wreg+status,2+status,0]
  3193  073D  01F8               	clrf	_b
  3194  073E                     L4:	
  3195  073E  3008               	movlw	8
  3196  073F  0278               	subwf	_b,w
  3197  0740  1803               	btfsc	3,0
  3198  0741  0008               	return
  3199  0742                     l177:	
  3200                           ;LIFI_agri.c: 79: while(!RB2);
  3201                           
  3202  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3203  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3204  0744  1D06               	btfss	6,2	;volatile
  3205  0745  2F42               	goto	l177
  3206                           
  3207                           ;LIFI_agri.c: 80: _delay((unsigned long)((30)*(20000000/4000000.0)));
  3208  0746  3031               	movlw	49
  3209  0747  00F5               	movwf	??_ReadData
  3210  0748                     u2757:	
  3211  0748  0BF5               	decfsz	??_ReadData,f
  3212  0749  2F48               	goto	u2757
  3213  074A  2F4B               	nop2
  3214                           
  3215                           ;LIFI_agri.c: 81: if(RB2 == 0)
  3216  074B  1283               	bcf	3,5	;RP0=0, select bank0
  3217  074C  1303               	bcf	3,6	;RP1=0, select bank0
  3218  074D  1906               	btfsc	6,2	;volatile
  3219  074E  2F61               	goto	l1486
  3220                           
  3221                           ;LIFI_agri.c: 82: i&=~(1<<(7-b));
  3222  074F  3001               	movlw	1
  3223  0750  00F5               	movwf	??_ReadData
  3224  0751  0378               	decf	_b,w
  3225  0752  3AFF               	xorlw	255
  3226  0753  3E07               	addlw	7
  3227  0754  3E01               	addlw	1
  3228  0755  2F58               	goto	u1464
  3229  0756                     u1465:	
  3230  0756  1003               	clrc
  3231  0757  0DF5               	rlf	??_ReadData,f
  3232  0758                     u1464:	
  3233  0758  3EFF               	addlw	-1
  3234  0759  1D03               	skipz
  3235  075A  2F56               	goto	u1465
  3236  075B  0875               	movf	??_ReadData,w
  3237  075C  3AFF               	xorlw	255
  3238  075D  00F6               	movwf	??_ReadData+1
  3239  075E  0876               	movf	??_ReadData+1,w
  3240  075F  05EA               	andwf	_i,f
  3241  0760  2F73               	goto	l1488
  3242  0761                     l1486:	
  3243                           
  3244                           ;LIFI_agri.c: 83: else{i|= (1<<(7-b));
  3245  0761  3001               	movlw	1
  3246  0762  00F5               	movwf	??_ReadData
  3247  0763  0378               	decf	_b,w
  3248  0764  3AFF               	xorlw	255
  3249  0765  3E07               	addlw	7
  3250  0766  3E01               	addlw	1
  3251  0767  2F6A               	goto	u1474
  3252  0768                     u1475:	
  3253  0768  1003               	clrc
  3254  0769  0DF5               	rlf	??_ReadData,f
  3255  076A                     u1474:	
  3256  076A  3EFF               	addlw	-1
  3257  076B  1D03               	skipz
  3258  076C  2F68               	goto	u1475
  3259  076D  0875               	movf	??_ReadData,w
  3260  076E  00F6               	movwf	??_ReadData+1
  3261  076F  0876               	movf	??_ReadData+1,w
  3262  0770  04EA               	iorwf	_i,f
  3263  0771                     l182:	
  3264                           ;LIFI_agri.c: 84: while(RB2);
  3265                           
  3266  0771  1906               	btfsc	6,2	;volatile
  3267  0772  2F71               	goto	l182
  3268  0773                     l1488:	
  3269  0773  3001               	movlw	1
  3270  0774  00F5               	movwf	??_ReadData
  3271  0775  0875               	movf	??_ReadData,w
  3272  0776  07F8               	addwf	_b,f
  3273  0777  2F3E               	goto	L4
  3274  0778                     __end_of_ReadData:	
  3275                           
  3276                           	psect	text15
  3277  06BE                     __ptext15:	
  3278 ;; *************** function _Lcd_Write_String *****************
  3279 ;; Defined at:
  3280 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  a               2    3[BANK0 ] PTR unsigned char 
  3283 ;;		 -> STR_8(15), STR_7(15), hum(10), STR_5(10), 
  3284 ;;		 -> STR_4(9), t(10), STR_2(17), STR_1(17), 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  i               2    8[BANK0 ] int 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         0       2       0       0       0
  3297 ;;      Locals:         0       2       0       0       0
  3298 ;;      Temps:          0       3       0       0       0
  3299 ;;      Totals:         0       7       0       0       0
  3300 ;;Total ram usage:        7 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    4
  3303 ;; This function calls:
  3304 ;;		_Lcd_Write_Char
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           
  3311                           ;psect for function _Lcd_Write_String
  3312  06BE                     _Lcd_Write_String:	
  3313                           
  3314                           ;lcd.h: 94: int i;
  3315                           ;lcd.h: 95: for(i=0;a[i]!='\0';i++)
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3319  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  3320  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  3321  06C0  01A8               	clrf	Lcd_Write_String@i
  3322  06C1  01A9               	clrf	Lcd_Write_String@i+1
  3323  06C2                     l1942:	
  3324  06C2  0828               	movf	Lcd_Write_String@i,w
  3325  06C3  0723               	addwf	Lcd_Write_String@a,w
  3326  06C4  00A6               	movwf	??_Lcd_Write_String+1
  3327  06C5  0824               	movf	Lcd_Write_String@a+1,w
  3328  06C6  00A5               	movwf	??_Lcd_Write_String
  3329  06C7  1803               	skipnc
  3330  06C8  0AA5               	incf	??_Lcd_Write_String,f
  3331  06C9  1BA8               	btfsc	Lcd_Write_String@i,7
  3332  06CA  03A5               	decf	??_Lcd_Write_String,f
  3333  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3334  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3335  06CD  0825               	movf	??_Lcd_Write_String,w
  3336  06CE  00A7               	movwf	??_Lcd_Write_String+2
  3337  06CF  0827               	movf	??_Lcd_Write_String+2,w
  3338  06D0  00FF               	movwf	127
  3339  06D1  0826               	movf	??_Lcd_Write_String+1,w
  3340  06D2  0084               	movwf	4
  3341  06D3  120A  118A  251E  120A  118A  	fcall	stringtab
  3342  06D8  3A00               	xorlw	0
  3343  06D9  1903               	btfsc	3,2
  3344  06DA  0008               	return
  3345                           
  3346                           ;lcd.h: 96: Lcd_Write_Char(a[i]);
  3347  06DB  0828               	movf	Lcd_Write_String@i,w
  3348  06DC  0723               	addwf	Lcd_Write_String@a,w
  3349  06DD  00A6               	movwf	??_Lcd_Write_String+1
  3350  06DE  0824               	movf	Lcd_Write_String@a+1,w
  3351  06DF  00A5               	movwf	??_Lcd_Write_String
  3352  06E0  1803               	skipnc
  3353  06E1  0AA5               	incf	??_Lcd_Write_String,f
  3354  06E2  1BA8               	btfsc	Lcd_Write_String@i,7
  3355  06E3  03A5               	decf	??_Lcd_Write_String,f
  3356  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3357  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  3358  06E6  0825               	movf	??_Lcd_Write_String,w
  3359  06E7  00A7               	movwf	??_Lcd_Write_String+2
  3360  06E8  0827               	movf	??_Lcd_Write_String+2,w
  3361  06E9  00FF               	movwf	127
  3362  06EA  0826               	movf	??_Lcd_Write_String+1,w
  3363  06EB  0084               	movwf	4
  3364  06EC  120A  118A  251E  120A  118A  	fcall	stringtab
  3365  06F1  120A  118A  2778  120A  118A  	fcall	_Lcd_Write_Char
  3366  06F6  3001               	movlw	1
  3367  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  3368  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  3369  06F9  07A8               	addwf	Lcd_Write_String@i,f
  3370  06FA  1803               	skipnc
  3371  06FB  0AA9               	incf	Lcd_Write_String@i+1,f
  3372  06FC  3000               	movlw	0
  3373  06FD  07A9               	addwf	Lcd_Write_String@i+1,f
  3374  06FE  2EC2               	goto	l1942
  3375  06FF                     __end_of_Lcd_Write_String:	
  3376                           
  3377                           	psect	text16
  3378  0778                     __ptext16:	
  3379 ;; *************** function _Lcd_Write_Char *****************
  3380 ;; Defined at:
  3381 ;;		line 76 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  a               1    wreg     unsigned char 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  a               1    2[BANK0 ] unsigned char 
  3386 ;;  y               1    1[BANK0 ] unsigned char 
  3387 ;;  temp            1    0[BANK0 ] unsigned char 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  1    wreg      void 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0, pclath, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3397 ;;      Params:         0       0       0       0       0
  3398 ;;      Locals:         0       3       0       0       0
  3399 ;;      Temps:          1       0       0       0       0
  3400 ;;      Totals:         1       3       0       0       0
  3401 ;;Total ram usage:        4 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    3
  3404 ;; This function calls:
  3405 ;;		_Lcd_Port
  3406 ;; This function is called by:
  3407 ;;		_Lcd_Write_String
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function _Lcd_Write_Char
  3413  0778                     _Lcd_Write_Char:	
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3417                           ;Lcd_Write_Char@a stored from wreg
  3418  0778  1283               	bcf	3,5	;RP0=0, select bank0
  3419  0779  1303               	bcf	3,6	;RP1=0, select bank0
  3420  077A  00A2               	movwf	Lcd_Write_Char@a
  3421                           
  3422                           ;lcd.h: 78: char temp,y;
  3423                           ;lcd.h: 79: temp = a&0x0F;
  3424  077B  0822               	movf	Lcd_Write_Char@a,w
  3425  077C  390F               	andlw	15
  3426  077D  00F6               	movwf	??_Lcd_Write_Char
  3427  077E  0876               	movf	??_Lcd_Write_Char,w
  3428  077F  00A0               	movwf	Lcd_Write_Char@temp
  3429                           
  3430                           ;lcd.h: 80: y = a&0xF0;
  3431  0780  0822               	movf	Lcd_Write_Char@a,w
  3432  0781  39F0               	andlw	240
  3433  0782  00F6               	movwf	??_Lcd_Write_Char
  3434  0783  0876               	movf	??_Lcd_Write_Char,w
  3435  0784  00A1               	movwf	Lcd_Write_Char@y
  3436                           
  3437                           ;lcd.h: 81: RD2 = 1;
  3438  0785  1508               	bsf	8,2	;volatile
  3439                           
  3440                           ;lcd.h: 82: Lcd_Port(y>>4);
  3441  0786  0821               	movf	Lcd_Write_Char@y,w
  3442  0787  00F6               	movwf	??_Lcd_Write_Char
  3443  0788  3004               	movlw	4
  3444  0789                     u1065:	
  3445  0789  1003               	clrc
  3446  078A  0CF6               	rrf	??_Lcd_Write_Char,f
  3447  078B  3EFF               	addlw	-1
  3448  078C  1D03               	skipz
  3449  078D  2F89               	goto	u1065
  3450  078E  0876               	movf	??_Lcd_Write_Char,w
  3451  078F  120A  158A  2752  120A  118A  	fcall	_Lcd_Port
  3452                           
  3453                           ;lcd.h: 83: RD3 = 1;
  3454  0794  1283               	bcf	3,5	;RP0=0, select bank0
  3455  0795  1303               	bcf	3,6	;RP1=0, select bank0
  3456  0796  1588               	bsf	8,3	;volatile
  3457                           
  3458                           ;lcd.h: 84: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3459  0797  3042               	movlw	66
  3460  0798  00F6               	movwf	??_Lcd_Write_Char
  3461  0799                     u2767:	
  3462  0799  0BF6               	decfsz	??_Lcd_Write_Char,f
  3463  079A  2F99               	goto	u2767
  3464  079B  0000               	nop
  3465                           
  3466                           ;lcd.h: 85: RD3 = 0;
  3467  079C  1283               	bcf	3,5	;RP0=0, select bank0
  3468  079D  1303               	bcf	3,6	;RP1=0, select bank0
  3469  079E  1188               	bcf	8,3	;volatile
  3470                           
  3471                           ;lcd.h: 86: Lcd_Port(temp);
  3472  079F  0820               	movf	Lcd_Write_Char@temp,w
  3473  07A0  120A  158A  2752  120A  118A  	fcall	_Lcd_Port
  3474                           
  3475                           ;lcd.h: 87: RD3 = 1;
  3476  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  3477  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  3478  07A7  1588               	bsf	8,3	;volatile
  3479                           
  3480                           ;lcd.h: 88: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3481  07A8  3042               	movlw	66
  3482  07A9  00F6               	movwf	??_Lcd_Write_Char
  3483  07AA                     u2777:	
  3484  07AA  0BF6               	decfsz	??_Lcd_Write_Char,f
  3485  07AB  2FAA               	goto	u2777
  3486  07AC  0000               	nop
  3487                           
  3488                           ;lcd.h: 89: RD3 = 0;
  3489  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  3490  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  3491  07AF  1188               	bcf	8,3	;volatile
  3492  07B0  0008               	return
  3493  07B1                     __end_of_Lcd_Write_Char:	
  3494                           
  3495                           	psect	text17
  3496  066C                     __ptext17:	
  3497 ;; *************** function _Lcd_Set_Cursor *****************
  3498 ;; Defined at:
  3499 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  a               1    wreg     unsigned char 
  3502 ;;  b               1    2[BANK0 ] unsigned char 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  a               1    5[BANK0 ] unsigned char 
  3505 ;;  temp            1    8[BANK0 ] unsigned char 
  3506 ;;  y               1    7[BANK0 ] unsigned char 
  3507 ;;  z               1    6[BANK0 ] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0, pclath, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3517 ;;      Params:         0       1       0       0       0
  3518 ;;      Locals:         0       4       0       0       0
  3519 ;;      Temps:          0       2       0       0       0
  3520 ;;      Totals:         0       7       0       0       0
  3521 ;;Total ram usage:        7 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    4
  3524 ;; This function calls:
  3525 ;;		_Lcd_Cmd
  3526 ;; This function is called by:
  3527 ;;		_main
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           
  3532                           ;psect for function _Lcd_Set_Cursor
  3533  066C                     _Lcd_Set_Cursor:	
  3534                           
  3535                           ;incstack = 0
  3536                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3537                           ;Lcd_Set_Cursor@a stored from wreg
  3538  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3539  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3540  066E  00A5               	movwf	Lcd_Set_Cursor@a
  3541                           
  3542                           ;lcd.h: 39: char temp,z,y;
  3543                           ;lcd.h: 40: if(a == 1)
  3544  066F  0325               	decf	Lcd_Set_Cursor@a,w
  3545  0670  1D03               	btfss	3,2
  3546  0671  2E95               	goto	l1916
  3547                           
  3548                           ;lcd.h: 41: {
  3549                           ;lcd.h: 42: temp = 0x80 + b - 1;
  3550  0672  0822               	movf	Lcd_Set_Cursor@b,w
  3551  0673  3E7F               	addlw	127
  3552  0674  00A3               	movwf	??_Lcd_Set_Cursor
  3553  0675  0823               	movf	??_Lcd_Set_Cursor,w
  3554  0676  00A8               	movwf	Lcd_Set_Cursor@temp
  3555                           
  3556                           ;lcd.h: 43: z = temp>>4;
  3557  0677  0828               	movf	Lcd_Set_Cursor@temp,w
  3558  0678  00A3               	movwf	??_Lcd_Set_Cursor
  3559  0679  3004               	movlw	4
  3560  067A                     u2265:	
  3561  067A  1003               	clrc
  3562  067B  0CA3               	rrf	??_Lcd_Set_Cursor,f
  3563  067C  3EFF               	addlw	-1
  3564  067D  1D03               	skipz
  3565  067E  2E7A               	goto	u2265
  3566  067F  0823               	movf	??_Lcd_Set_Cursor,w
  3567  0680  00A4               	movwf	??_Lcd_Set_Cursor+1
  3568  0681  0824               	movf	??_Lcd_Set_Cursor+1,w
  3569  0682  00A6               	movwf	Lcd_Set_Cursor@z
  3570                           
  3571                           ;lcd.h: 44: y = temp & 0x0F;
  3572  0683  0828               	movf	Lcd_Set_Cursor@temp,w
  3573  0684  390F               	andlw	15
  3574  0685  00A3               	movwf	??_Lcd_Set_Cursor
  3575  0686  0823               	movf	??_Lcd_Set_Cursor,w
  3576  0687  00A7               	movwf	Lcd_Set_Cursor@y
  3577                           
  3578                           ;lcd.h: 45: Lcd_Cmd(z);
  3579  0688  0826               	movf	Lcd_Set_Cursor@z,w
  3580  0689  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3581                           
  3582                           ;lcd.h: 46: Lcd_Cmd(y);
  3583  068E  1283               	bcf	3,5	;RP0=0, select bank0
  3584  068F  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0690  0827               	movf	Lcd_Set_Cursor@y,w
  3586  0691  120A  158A  2788   	fcall	_Lcd_Cmd
  3587                           
  3588                           ;lcd.h: 47: }
  3589  0694  0008               	return
  3590  0695                     l1916:	
  3591                           
  3592                           ;lcd.h: 48: else if(a == 2)
  3593  0695  3002               	movlw	2
  3594  0696  1283               	bcf	3,5	;RP0=0, select bank0
  3595  0697  1303               	bcf	3,6	;RP1=0, select bank0
  3596  0698  0625               	xorwf	Lcd_Set_Cursor@a,w
  3597  0699  1D03               	btfss	3,2
  3598  069A  0008               	return
  3599                           
  3600                           ;lcd.h: 49: {
  3601                           ;lcd.h: 50: temp = 0xC0 + b - 1;
  3602  069B  0822               	movf	Lcd_Set_Cursor@b,w
  3603  069C  3EBF               	addlw	191
  3604  069D  00A3               	movwf	??_Lcd_Set_Cursor
  3605  069E  0823               	movf	??_Lcd_Set_Cursor,w
  3606  069F  00A8               	movwf	Lcd_Set_Cursor@temp
  3607                           
  3608                           ;lcd.h: 51: z = temp>>4;
  3609  06A0  0828               	movf	Lcd_Set_Cursor@temp,w
  3610  06A1  00A3               	movwf	??_Lcd_Set_Cursor
  3611  06A2  3004               	movlw	4
  3612  06A3                     u2285:	
  3613  06A3  1003               	clrc
  3614  06A4  0CA3               	rrf	??_Lcd_Set_Cursor,f
  3615  06A5  3EFF               	addlw	-1
  3616  06A6  1D03               	skipz
  3617  06A7  2EA3               	goto	u2285
  3618  06A8  0823               	movf	??_Lcd_Set_Cursor,w
  3619  06A9  00A4               	movwf	??_Lcd_Set_Cursor+1
  3620  06AA  0824               	movf	??_Lcd_Set_Cursor+1,w
  3621  06AB  00A6               	movwf	Lcd_Set_Cursor@z
  3622                           
  3623                           ;lcd.h: 52: y = temp & 0x0F;
  3624  06AC  0828               	movf	Lcd_Set_Cursor@temp,w
  3625  06AD  390F               	andlw	15
  3626  06AE  00A3               	movwf	??_Lcd_Set_Cursor
  3627  06AF  0823               	movf	??_Lcd_Set_Cursor,w
  3628  06B0  00A7               	movwf	Lcd_Set_Cursor@y
  3629                           
  3630                           ;lcd.h: 53: Lcd_Cmd(z);
  3631  06B1  0826               	movf	Lcd_Set_Cursor@z,w
  3632  06B2  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3633                           
  3634                           ;lcd.h: 54: Lcd_Cmd(y);
  3635  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3636  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3637  06B9  0827               	movf	Lcd_Set_Cursor@y,w
  3638  06BA  120A  158A  2788   	fcall	_Lcd_Cmd
  3639  06BD  0008               	return
  3640  06BE                     __end_of_Lcd_Set_Cursor:	
  3641                           
  3642                           	psect	text18
  3643  060B                     __ptext18:	
  3644 ;; *************** function _Lcd_Init *****************
  3645 ;; Defined at:
  3646 ;;		line 58 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2, status,0, pclath, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3660 ;;      Params:         0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0
  3662 ;;      Temps:          0       2       0       0       0
  3663 ;;      Totals:         0       2       0       0       0
  3664 ;;Total ram usage:        2 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    4
  3667 ;; This function calls:
  3668 ;;		_Lcd_Cmd
  3669 ;;		_Lcd_Port
  3670 ;; This function is called by:
  3671 ;;		_main
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function _Lcd_Init
  3677  060B                     _Lcd_Init:	
  3678                           
  3679                           ;lcd.h: 60: Lcd_Port(0x00);
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3683  060B  3000               	movlw	0
  3684  060C  120A  158A  2752  120A  118A  	fcall	_Lcd_Port
  3685                           
  3686                           ;lcd.h: 61: _delay((unsigned long)((20)*(20000000/4000.0)));
  3687  0611  3082               	movlw	130
  3688  0612  1283               	bcf	3,5	;RP0=0, select bank0
  3689  0613  1303               	bcf	3,6	;RP1=0, select bank0
  3690  0614  00A3               	movwf	??_Lcd_Init+1
  3691  0615  30DD               	movlw	221
  3692  0616  00A2               	movwf	??_Lcd_Init
  3693  0617                     u2787:	
  3694  0617  0BA2               	decfsz	??_Lcd_Init,f
  3695  0618  2E17               	goto	u2787
  3696  0619  0BA3               	decfsz	??_Lcd_Init+1,f
  3697  061A  2E17               	goto	u2787
  3698                           
  3699                           ;lcd.h: 62: Lcd_Cmd(0x03);
  3700  061B  3003               	movlw	3
  3701  061C  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3702                           
  3703                           ;lcd.h: 63: _delay((unsigned long)((5)*(20000000/4000.0)));
  3704  0621  3021               	movlw	33
  3705  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3706  0623  1303               	bcf	3,6	;RP1=0, select bank0
  3707  0624  00A3               	movwf	??_Lcd_Init+1
  3708  0625  3075               	movlw	117
  3709  0626  00A2               	movwf	??_Lcd_Init
  3710  0627                     u2797:	
  3711  0627  0BA2               	decfsz	??_Lcd_Init,f
  3712  0628  2E27               	goto	u2797
  3713  0629  0BA3               	decfsz	??_Lcd_Init+1,f
  3714  062A  2E27               	goto	u2797
  3715  062B  2E2C               	nop2
  3716                           
  3717                           ;lcd.h: 64: Lcd_Cmd(0x03);
  3718  062C  3003               	movlw	3
  3719  062D  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3720                           
  3721                           ;lcd.h: 65: _delay((unsigned long)((11)*(20000000/4000.0)));
  3722  0632  3048               	movlw	72
  3723  0633  1283               	bcf	3,5	;RP0=0, select bank0
  3724  0634  1303               	bcf	3,6	;RP1=0, select bank0
  3725  0635  00A3               	movwf	??_Lcd_Init+1
  3726  0636  306B               	movlw	107
  3727  0637  00A2               	movwf	??_Lcd_Init
  3728  0638                     u2807:	
  3729  0638  0BA2               	decfsz	??_Lcd_Init,f
  3730  0639  2E38               	goto	u2807
  3731  063A  0BA3               	decfsz	??_Lcd_Init+1,f
  3732  063B  2E38               	goto	u2807
  3733  063C  2E3D               	nop2
  3734                           
  3735                           ;lcd.h: 66: Lcd_Cmd(0x03);
  3736  063D  3003               	movlw	3
  3737  063E  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3738                           
  3739                           ;lcd.h: 67: Lcd_Cmd(0x02);
  3740  0643  3002               	movlw	2
  3741  0644  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3742                           
  3743                           ;lcd.h: 68: Lcd_Cmd(0x02);
  3744  0649  3002               	movlw	2
  3745  064A  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3746                           
  3747                           ;lcd.h: 69: Lcd_Cmd(0x08);
  3748  064F  3008               	movlw	8
  3749  0650  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3750                           
  3751                           ;lcd.h: 70: Lcd_Cmd(0x00);
  3752  0655  3000               	movlw	0
  3753  0656  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3754                           
  3755                           ;lcd.h: 71: Lcd_Cmd(0x0C);
  3756  065B  300C               	movlw	12
  3757  065C  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3758                           
  3759                           ;lcd.h: 72: Lcd_Cmd(0x00);
  3760  0661  3000               	movlw	0
  3761  0662  120A  158A  2788  120A  118A  	fcall	_Lcd_Cmd
  3762                           
  3763                           ;lcd.h: 73: Lcd_Cmd(0x06);
  3764  0667  3006               	movlw	6
  3765  0668  120A  158A  2788   	fcall	_Lcd_Cmd
  3766  066B  0008               	return
  3767  066C                     __end_of_Lcd_Init:	
  3768                           
  3769                           	psect	text19
  3770  0F0B                     __ptext19:	
  3771 ;; *************** function _Lcd_Clear *****************
  3772 ;; Defined at:
  3773 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;		None
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  2   90[None  ] int 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, pclath, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3787 ;;      Params:         0       0       0       0       0
  3788 ;;      Locals:         0       0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0
  3790 ;;      Totals:         0       0       0       0       0
  3791 ;;Total ram usage:        0 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    4
  3794 ;; This function calls:
  3795 ;;		_Lcd_Cmd
  3796 ;; This function is called by:
  3797 ;;		_main
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           
  3802                           ;psect for function _Lcd_Clear
  3803  0F0B                     _Lcd_Clear:	
  3804                           
  3805                           ;lcd.h: 33: Lcd_Cmd(0);
  3806                           
  3807                           ;incstack = 0
  3808                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3809  0F0B  3000               	movlw	0
  3810  0F0C  120A  158A  2788  120A  158A  	fcall	_Lcd_Cmd
  3811                           
  3812                           ;lcd.h: 34: Lcd_Cmd(1);
  3813  0F11  3001               	movlw	1
  3814  0F12  120A  158A  2788   	fcall	_Lcd_Cmd
  3815  0F15  0008               	return
  3816  0F16                     __end_of_Lcd_Clear:	
  3817                           
  3818                           	psect	text20
  3819  0F88                     __ptext20:	
  3820 ;; *************** function _Lcd_Cmd *****************
  3821 ;; Defined at:
  3822 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  a               1    wreg     unsigned char 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  a               1    6[COMMON] unsigned char 
  3827 ;; Return value:  Size  Location     Type
  3828 ;;                  1    wreg      void 
  3829 ;; Registers used:
  3830 ;;		wreg, status,2, status,0, pclath, cstack
  3831 ;; Tracked objects:
  3832 ;;		On entry : 0/0
  3833 ;;		On exit  : 0/0
  3834 ;;		Unchanged: 0/0
  3835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3836 ;;      Params:         0       0       0       0       0
  3837 ;;      Locals:         1       0       0       0       0
  3838 ;;      Temps:          0       2       0       0       0
  3839 ;;      Totals:         1       2       0       0       0
  3840 ;;Total ram usage:        3 bytes
  3841 ;; Hardware stack levels used:    1
  3842 ;; Hardware stack levels required when called:    3
  3843 ;; This function calls:
  3844 ;;		_Lcd_Port
  3845 ;; This function is called by:
  3846 ;;		_Lcd_Clear
  3847 ;;		_Lcd_Set_Cursor
  3848 ;;		_Lcd_Init
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           
  3853                           ;psect for function _Lcd_Cmd
  3854  0F88                     _Lcd_Cmd:	
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3858                           ;Lcd_Cmd@a stored from wreg
  3859  0F88  00F6               	movwf	Lcd_Cmd@a
  3860                           
  3861                           ;lcd.h: 24: RD2 = 0;
  3862  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  3863  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  3864  0F8B  1108               	bcf	8,2	;volatile
  3865                           
  3866                           ;lcd.h: 25: Lcd_Port(a);
  3867  0F8C  0876               	movf	Lcd_Cmd@a,w
  3868  0F8D  120A  158A  2752  120A  158A  	fcall	_Lcd_Port
  3869                           
  3870                           ;lcd.h: 26: RD3 = 1;
  3871  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0F94  1588               	bsf	8,3	;volatile
  3874                           
  3875                           ;lcd.h: 27: _delay((unsigned long)((4)*(20000000/4000.0)));
  3876  0F95  301A               	movlw	26
  3877  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0F98  00A1               	movwf	??_Lcd_Cmd+1
  3880  0F99  30F7               	movlw	247
  3881  0F9A  00A0               	movwf	??_Lcd_Cmd
  3882  0F9B                     u2817:	
  3883  0F9B  0BA0               	decfsz	??_Lcd_Cmd,f
  3884  0F9C  2F9B               	goto	u2817
  3885  0F9D  0BA1               	decfsz	??_Lcd_Cmd+1,f
  3886  0F9E  2F9B               	goto	u2817
  3887  0F9F  2FA0               	nop2
  3888                           
  3889                           ;lcd.h: 28: RD3 = 0;
  3890  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  3891  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  3892  0FA2  1188               	bcf	8,3	;volatile
  3893  0FA3  0008               	return
  3894  0FA4                     __end_of_Lcd_Cmd:	
  3895                           
  3896                           	psect	text21
  3897  0F52                     __ptext21:	
  3898 ;; *************** function _Lcd_Port *****************
  3899 ;; Defined at:
  3900 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\include\lcd.h"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  a               1    wreg     unsigned char 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  a               1    5[COMMON] unsigned char 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3914 ;;      Params:         0       0       0       0       0
  3915 ;;      Locals:         1       0       0       0       0
  3916 ;;      Temps:          0       0       0       0       0
  3917 ;;      Totals:         1       0       0       0       0
  3918 ;;Total ram usage:        1 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    2
  3921 ;; This function calls:
  3922 ;;		Nothing
  3923 ;; This function is called by:
  3924 ;;		_Lcd_Cmd
  3925 ;;		_Lcd_Init
  3926 ;;		_Lcd_Write_Char
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           
  3931                           ;psect for function _Lcd_Port
  3932  0F52                     _Lcd_Port:	
  3933                           
  3934                           ;incstack = 0
  3935                           ; Regs used in _Lcd_Port: [wreg]
  3936                           ;Lcd_Port@a stored from wreg
  3937  0F52  00F5               	movwf	Lcd_Port@a
  3938                           
  3939                           ;lcd.h: 2: if(a & 1)
  3940  0F53  1C75               	btfss	Lcd_Port@a,0
  3941  0F54  2F59               	goto	l77
  3942                           
  3943                           ;lcd.h: 3: RD4 = 1;
  3944  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  3945  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  3946  0F57  1608               	bsf	8,4	;volatile
  3947  0F58  2F5C               	goto	l78
  3948  0F59                     l77:	
  3949                           
  3950                           ;lcd.h: 4: else
  3951                           ;lcd.h: 5: RD4 = 0;
  3952  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0F5B  1208               	bcf	8,4	;volatile
  3955  0F5C                     l78:	
  3956                           
  3957                           ;lcd.h: 7: if(a & 2)
  3958  0F5C  1CF5               	btfss	Lcd_Port@a,1
  3959  0F5D  2F60               	goto	l79
  3960                           
  3961                           ;lcd.h: 8: RD5 = 1;
  3962  0F5E  1688               	bsf	8,5	;volatile
  3963  0F5F  2F61               	goto	l80
  3964  0F60                     l79:	
  3965                           
  3966                           ;lcd.h: 9: else
  3967                           ;lcd.h: 10: RD5 = 0;
  3968  0F60  1288               	bcf	8,5	;volatile
  3969  0F61                     l80:	
  3970                           
  3971                           ;lcd.h: 12: if(a & 4)
  3972  0F61  1D75               	btfss	Lcd_Port@a,2
  3973  0F62  2F65               	goto	l81
  3974                           
  3975                           ;lcd.h: 13: RD6 = 1;
  3976  0F63  1708               	bsf	8,6	;volatile
  3977  0F64  2F66               	goto	l82
  3978  0F65                     l81:	
  3979                           
  3980                           ;lcd.h: 14: else
  3981                           ;lcd.h: 15: RD6 = 0;
  3982  0F65  1308               	bcf	8,6	;volatile
  3983  0F66                     l82:	
  3984                           
  3985                           ;lcd.h: 17: if(a & 8)
  3986  0F66  1DF5               	btfss	Lcd_Port@a,3
  3987  0F67  2F6A               	goto	l83
  3988                           
  3989                           ;lcd.h: 18: RD7 = 1;
  3990  0F68  1788               	bsf	8,7	;volatile
  3991  0F69  0008               	return
  3992  0F6A                     l83:	
  3993                           
  3994                           ;lcd.h: 19: else
  3995                           ;lcd.h: 20: RD7 = 0;
  3996  0F6A  1388               	bcf	8,7	;volatile
  3997  0F6B  0008               	return
  3998  0F6C                     __end_of_Lcd_Port:	
  3999                           
  4000                           	psect	text22
  4001  0F6C                     __ptext22:	
  4002 ;; *************** function _CheckResponse *****************
  4003 ;; Defined at:
  4004 ;;		line 67 in file "LIFI_agri.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;		None
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;		None
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      void 
  4011 ;; Registers used:
  4012 ;;		wreg, status,2
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4018 ;;      Params:         0       0       0       0       0
  4019 ;;      Locals:         0       0       0       0       0
  4020 ;;      Temps:          1       0       0       0       0
  4021 ;;      Totals:         1       0       0       0       0
  4022 ;;Total ram usage:        1 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    2
  4025 ;; This function calls:
  4026 ;;		Nothing
  4027 ;; This function is called by:
  4028 ;;		_main
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _CheckResponse
  4034  0F6C                     _CheckResponse:	
  4035                           
  4036                           ;LIFI_agri.c: 68: a = 0;
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _CheckResponse: [wreg+status,2]
  4040  0F6C  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0F6D  1303               	bcf	3,6	;RP1=0, select bank0
  4042  0F6E  01EB               	clrf	_a
  4043                           
  4044                           ;LIFI_agri.c: 69: _delay((unsigned long)((40)*(20000000/4000000.0)));
  4045  0F6F  3042               	movlw	66
  4046  0F70  00F5               	movwf	??_CheckResponse
  4047  0F71                     u2827:	
  4048  0F71  0BF5               	decfsz	??_CheckResponse,f
  4049  0F72  2F71               	goto	u2827
  4050  0F73  0000               	nop
  4051                           
  4052                           ;LIFI_agri.c: 70: if (RB2 == 0){
  4053  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  4054  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  4055  0F76  1906               	btfsc	6,2	;volatile
  4056  0F77  0008               	return
  4057                           
  4058                           ;LIFI_agri.c: 71: _delay((unsigned long)((80)*(20000000/4000000.0)));
  4059  0F78  3085               	movlw	133
  4060  0F79  00F5               	movwf	??_CheckResponse
  4061  0F7A                     u2837:	
  4062  0F7A  0BF5               	decfsz	??_CheckResponse,f
  4063  0F7B  2F7A               	goto	u2837
  4064                           
  4065                           ;LIFI_agri.c: 72: if (RB2 == 1)
  4066  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  4068  0F7E  1D06               	btfss	6,2	;volatile
  4069  0F7F  2F82               	goto	l1472
  4070                           
  4071                           ;LIFI_agri.c: 73: a = 1;
  4072  0F80  01EB               	clrf	_a
  4073  0F81  0AEB               	incf	_a,f
  4074  0F82                     l1472:	
  4075                           
  4076                           ;LIFI_agri.c: 74: _delay((unsigned long)((40)*(20000000/4000000.0)));
  4077  0F82  3042               	movlw	66
  4078  0F83  00F5               	movwf	??_CheckResponse
  4079  0F84                     u2847:	
  4080  0F84  0BF5               	decfsz	??_CheckResponse,f
  4081  0F85  2F84               	goto	u2847
  4082  0F86  0000               	nop
  4083  0F87  0008               	return
  4084  0F88                     __end_of_CheckResponse:	
  4085                           
  4086                           	psect	text23
  4087  0FA4                     __ptext23:	
  4088 ;; *************** function _ISR *****************
  4089 ;; Defined at:
  4090 ;;		line 180 in file "LIFI_agri.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4104 ;;      Params:         0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0
  4106 ;;      Temps:          5       0       0       0       0
  4107 ;;      Totals:         5       0       0       0       0
  4108 ;;Total ram usage:        5 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    1
  4111 ;; This function calls:
  4112 ;;		_uart_rx
  4113 ;; This function is called by:
  4114 ;;		Interrupt level 1
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _ISR
  4120  0FA4                     _ISR:	
  4121                           
  4122                           ;LIFI_agri.c: 181: if(RCIF){
  4123  0FA4  1E8C               	btfss	12,5	;volatile
  4124  0FA5  2FC2               	goto	i1l223
  4125                           
  4126                           ;LIFI_agri.c: 182: RCIF = 0;
  4127  0FA6  128C               	bcf	12,5	;volatile
  4128                           
  4129                           ;LIFI_agri.c: 183: recv = uart_rx();
  4130  0FA7  120A  158A  2701  120A  158A  	fcall	_uart_rx
  4131  0FAC  00F0               	movwf	??_ISR
  4132  0FAD  0870               	movf	??_ISR,w
  4133  0FAE  00F7               	movwf	_recv
  4134                           
  4135                           ;LIFI_agri.c: 184: switch(recv){
  4136  0FAF  2FBA               	goto	i1l1268
  4137  0FB0                     i1l219:	
  4138                           ;LIFI_agri.c: 185: case '0':
  4139                           
  4140  0FB0  2FB5               	goto	i1l222
  4141  0FB1                     i1l221:	
  4142                           ;LIFI_agri.c: 189: case '1':
  4143                           
  4144                           ;LIFI_agri.c: 188: break;
  4145                           
  4146                           ;LIFI_agri.c: 187: RB1 = 0;
  4147                           
  4148                           ;LIFI_agri.c: 186: RB0 = 0;
  4149                           
  4150                           
  4151                           ;LIFI_agri.c: 190: RB0 = 1;
  4152  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  4153  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  4154  0FB3  1406               	bsf	6,0	;volatile
  4155  0FB4  2FB8               	goto	L6
  4156  0FB5                     i1l222:	
  4157                           ;LIFI_agri.c: 193: default:
  4158                           
  4159                           ;LIFI_agri.c: 192: break;
  4160                           
  4161                           ;LIFI_agri.c: 191: RB1 = 0;
  4162                           
  4163                           
  4164                           ;LIFI_agri.c: 194: RB0 = 0;
  4165  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  4166  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  4167  0FB7  1006               	bcf	6,0	;volatile
  4168  0FB8                     L6:	
  4169                           
  4170                           ;LIFI_agri.c: 195: RB1 = 0;
  4171  0FB8  1086               	bcf	6,1	;volatile
  4172                           
  4173                           ;LIFI_agri.c: 197: }
  4174                           
  4175                           ;LIFI_agri.c: 196: break;
  4176  0FB9  2FC2               	goto	i1l223
  4177  0FBA                     i1l1268:	
  4178  0FBA  0877               	movf	_recv,w
  4179                           
  4180                           ; Switch size 1, requested type "space"
  4181                           ; Number of cases is 2, Range of values is 48 to 49
  4182                           ; switch strategies available:
  4183                           ; Name         Instructions Cycles
  4184                           ; simple_byte            7     4 (average)
  4185                           ; direct_byte           17    11 (fixed)
  4186                           ; jumptable            263     9 (fixed)
  4187                           ;	Chosen strategy is simple_byte
  4188  0FBB  3A30               	xorlw	48	; case 48
  4189  0FBC  1903               	skipnz
  4190  0FBD  2FB0               	goto	i1l219
  4191  0FBE  3A01               	xorlw	1	; case 49
  4192  0FBF  1903               	skipnz
  4193  0FC0  2FB1               	goto	i1l221
  4194  0FC1  2FB5               	goto	i1l222
  4195  0FC2                     i1l223:	
  4196  0FC2  0874               	movf	??_ISR+4,w
  4197  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0FC5  00FF               	movwf	127
  4200  0FC6  0873               	movf	??_ISR+3,w
  4201  0FC7  008A               	movwf	10
  4202  0FC8  0872               	movf	??_ISR+2,w
  4203  0FC9  0084               	movwf	4
  4204  0FCA  0E71               	swapf	(??_ISR+1)^(0+-128),w
  4205  0FCB  0083               	movwf	3
  4206  0FCC  0EFE               	swapf	126,f
  4207  0FCD  0E7E               	swapf	126,w
  4208  0FCE  0009               	retfie
  4209  0FCF                     __end_of_ISR:	
  4210                           
  4211                           	psect	intentry
  4212  0004                     __pintentry:	
  4213                           ;incstack = 0
  4214                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4215                           
  4216  0004                     interrupt_function:	
  4217  007E                     saved_w	set	btemp
  4218  0004  00FE               	movwf	btemp
  4219  0005  0E03               	swapf	3,w
  4220  0006  00F1               	movwf	??_ISR+1
  4221  0007  0804               	movf	4,w
  4222  0008  00F2               	movwf	??_ISR+2
  4223  0009  080A               	movf	10,w
  4224  000A  00F3               	movwf	??_ISR+3
  4225  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4226  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4227  000D  087F               	movf	btemp+1,w
  4228  000E  00F4               	movwf	??_ISR+4
  4229  000F  120A  158A  2FA4   	ljmp	_ISR
  4230                           
  4231                           	psect	text24
  4232  0F01                     __ptext24:	
  4233 ;; *************** function _uart_rx *****************
  4234 ;; Defined at:
  4235 ;;		line 49 in file "LIFI_agri.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      unsigned char 
  4242 ;; Registers used:
  4243 ;;		wreg
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4249 ;;      Params:         0       0       0       0       0
  4250 ;;      Locals:         0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0
  4252 ;;      Totals:         0       0       0       0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; This function calls:
  4256 ;;		Nothing
  4257 ;; This function is called by:
  4258 ;;		_ISR
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           
  4263                           ;psect for function _uart_rx
  4264  0F01                     _uart_rx:	
  4265                           
  4266                           ;LIFI_agri.c: 50: if(OERR)
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _uart_rx: [wreg]
  4270  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  4271  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  4272  0F03  1C98               	btfss	24,1	;volatile
  4273  0F04  2F07               	goto	i1l161
  4274                           
  4275                           ;LIFI_agri.c: 51: {
  4276                           ;LIFI_agri.c: 52: CREN = 0;
  4277  0F05  1218               	bcf	24,4	;volatile
  4278                           
  4279                           ;LIFI_agri.c: 53: CREN = 1;
  4280  0F06  1618               	bsf	24,4	;volatile
  4281  0F07                     i1l161:	
  4282                           ;LIFI_agri.c: 54: }
  4283                           ;LIFI_agri.c: 55: while(!RCIF);
  4284                           
  4285  0F07  1E8C               	btfss	12,5	;volatile
  4286  0F08  2F07               	goto	i1l161
  4287                           
  4288                           ;LIFI_agri.c: 56: return RCREG;
  4289  0F09  081A               	movf	26,w	;volatile
  4290  0F0A  0008               	return
  4291  0F0B                     __end_of_uart_rx:	
  4292  007E                     btemp	set	126	;btemp
  4293  007E                     wtemp0	set	126


Data Sizes:
    Strings     101
    Constant    10
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     63      76
    BANK1            80      0      30
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_6(CODE[9]), STR_3(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> hum(BANK1[10]), t(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[15]), STR_7(CODE[15]), hum(BANK1[10]), STR_5(CODE[10]), 
		 -> STR_4(CODE[9]), t(BANK1[10]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_ReadData
    _main->_StartSignal
    _main->_adc_read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___lwtoft
    ___ftmul->___lwtoft
    ___ftdiv->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   11662
                                             57 BANK0      6     6      0
                      _CheckResponse
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _ReadData
                        _StartSignal
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                           _adc_init
                           _adc_read
                            _sprintf
                          _uart_init
                           _uart_txc
 ---------------------------------------------------------------------------------
 (1) _uart_txc                                             1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1554
                                             12 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              6 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      62
                                              5 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2169
                                              5 COMMON     1     1      0
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     358
                                             43 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2756
                                             27 BANK0     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2558
                                             11 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _StartSignal                                          2     2      0       0
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReadData                                             2     2      0       0
                                              5 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     828
                                              3 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              6 COMMON     1     1      0
                                              0 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1029
                                              2 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     207
                                              2 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     119
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     119
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckResponse                                        1     1      0       0
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
                            _uart_rx
 ---------------------------------------------------------------------------------
 (5) _uart_rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckResponse
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _ReadData
   _StartSignal
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _adc_init
   _adc_read
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _uart_init
   _uart_txc

 _ISR (ROOT)
   _uart_rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      73       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      4C       5       95.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      1E       7       37.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      73      12        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Mar 20 16:22:18 2018

                        _a 006B                          _b 0078                          _i 006A  
                        _m 00A0                          _t 00B4                          pc 0002  
              __CFG_CP$OFF 0000                         l80 0F61                         l81 0F65  
                       l82 0F66                         l83 0F6A                         l77 0F59  
                       l78 0F5C                         l79 0F60                         _t1 0069  
                       _t2 0068                         fsr 0004                        l201 0167  
                      l145 0F17                        l500 05EA                        l148 0F1D  
                      l501 05F2                        l182 0771                        l177 0742  
                      l193 0FF7                        l493 05D5                        l584 0504  
                      _GIE 005F                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        _ISR 0FA4  
                      _rh1 0067                        _rh2 0066                        _hum 00AA  
                      fsr0 0004                        _sum 0065                        indf 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       ?_ISR 0070  
             ___ftdiv@cntr 0035               ___ftdiv@sign 003A                       l2004 0390  
                     l2006 0320                       l2024 0406                       l2008 03D3  
                     l2018 03F0                       l2202 0216                       l2060 025E  
                     l2046 046A                       l2038 044B                       l2144 0088  
                     l2090 02DB                       l2082 02C3                       l2066 0274  
                     l2094 02EB                       l2078 02B3                       l1472 0F82  
                     l2178 0184                       l1660 04AA                       l1900 07E0  
                     l2196 01FB                       l2188 01B7                       l1486 0761  
                     l1488 0773                       l1832 05AE                       l1680 04EC  
                     l1842 05DA                       l1834 05BA                       l1916 0695  
                     l1844 05E4                       l1836 05BF                       l1828 05A7  
                     l1692 0515                       l1942 06C2                       l1686 04F9  
                     l1678 04DC                       l1950 0FD9                       l1688 0507  
                     l1874 072D                       l1866 0709                       l1890 07B9  
                     l1970 0336                       l1868 0717                       l1892 07C7  
                     l1980 0359                       l1878 0738                       l1990 036B  
                     l1974 0342                       l1896 07D5                       l1978 0347  
                     l1996 038C                       STR_1 0549                       STR_2 0538  
                     STR_3 058B                       STR_4 0594                       STR_5 0578  
                     STR_6 0582                       STR_7 0569                       STR_8 055A  
                     _BRGH 04C2                       _CREN 00C4                       u1065 0789  
                     u2105 05F9                       u2025 05B3                       u2045 05CE  
                     u2205 07BC                       u2135 070C                       u2065 05DD  
                     u2225 07CD                       u2155 0718                       u2235 07D6  
                     u2165 0724                       u2335 0FE0                       u2175 072E  
                     u1464 0758                       u2265 067A                       u1465 0756  
                     u1474 076A                       u1475 0768                       u2435 0418  
                     u2515 0280                       u2285 06A3                       u2445 042A  
                     u2605 02EC                       u2525 0292                       u2455 044C  
                     u2615 02F4                       u2375 0382                       u2465 045D  
                     u1825 04B1                       u2475 046B                       u2555 02C4  
                     u2565 02CC                       u2717 007D                       u2807 0638  
                     u1855 04DD                       u2727 0FF0                       u2817 0F9B  
                     u2737 07EF                       u2827 0F71                       u2747 07F8  
                     _PEIE 005E                       u2837 0F7A                       u2757 0748  
                     u1885 04FB                       u2847 0F84                       u2767 0799  
                     u2777 07AA                       u2787 0617                       _RCIE 0465  
                     _RCIF 0065                       u2797 0627                       _OERR 00C1  
                     _SPEN 00C7                       _TRMT 04C1                       _TXEN 04C5  
                     _TXIF 0064                       _SYNC 04C4               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0023                       _main 002A               ___ftpack@arg 0020  
                     _recv 0077               ___ftpack@exp 0023                       _temp 0063  
                     btemp 007E                       start 0012         ??_Lcd_Write_String 0025  
          __end_of_Lcd_Cmd 0FA4               ___ftmul@cntr 0049               ___ftmul@sign 004A  
                    ??_ISR 0070               ___fttol@exp1 0058               ___fttol@lval 0054  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___ftdiv 0490  
          __end_of___ftmul 0319            __end_of___fttol 051E            __end_of___lwdiv 073D  
                    i1l221 0FB1                      i1l222 0FB5                      i1l223 0FC2  
                    i1l161 0F07                      i1l219 0FB0            __end_of___lwmod 07E5  
                    _RCREG 001A                      _SPBRG 0099    __size_of_Lcd_Set_Cursor 0052  
                    _TRISA 0085                      _TRISD 0088                      _TXREG 0019  
          __end_of_dpowers 0538                      _moist 0061              ___ftpack@sign 0024  
           __CFG_BOREN$OFF 0000                      pclath 000A            __end_of_uart_rx 0F0B  
                    status 0003                      wtemp0 007E            __end_of_sprintf 03D8  
         __end_of_Lcd_Init 066C           __end_of_Lcd_Port 0F6C            __initialization 0015  
             __end_of_main 0246           __end_of_ReadData 0778                     ??_main 0059  
            ___fttol@sign1 0053         __size_of_Lcd_Clear 000B                     _ADCON0 001F  
                   _ADCON1 009F                     _ADRESH 001E                     _ADRESL 009E  
         __end_of___ftpack 060B           __end_of_adc_init 0F01           __end_of_adc_read 1000  
                   i1l1268 0FBA           __end_of___lwtoft 0F3A                  ??_Lcd_Cmd 0020  
  __size_of_Lcd_Write_Char 0039                     _TRISB2 0432                     _TRISC6 043E  
                   _TRISC7 043F             __CFG_PWRTE$OFF 0000                  ??___ftdiv 0031  
                ??___ftmul 0041                  ??___fttol 004F                  ??___lwdiv 0075  
                ??___lwmod 0076      ___ftmul@f3_as_product 0046     __size_of_CheckResponse 001C  
                   saved_w 007E           __end_of_uart_txc 0F22                  ??_uart_rx 0070  
                ??_sprintf 002F            Lcd_Set_Cursor@a 0025            Lcd_Set_Cursor@b 0022  
          Lcd_Set_Cursor@y 0027            Lcd_Set_Cursor@z 0026    __end_of__initialization 0026  
        __end_of_Lcd_Clear 0F16                 ___ftdiv@f1 002E                 ___ftdiv@f2 002B  
               ___ftdiv@f3 0036                 ___ftmul@f1 003B                 ___ftmul@f2 003E  
               ___fttol@f1 004B             __pcstackCOMMON 0070              ??_StartSignal 0075  
               ___lwtoft@c 0028             _Lcd_Set_Cursor 066C                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pbssBANK0 005F                 __pbssBANK1 00A0  
                ?_ReadData 0070              _CheckResponse 0F6C                 __pmaintext 002A  
               __pintentry 0004  __size_of_Lcd_Write_String 0041                  ?___ftpack 0020  
   __end_of_Lcd_Set_Cursor 06BE                  ?_adc_init 0070                  ?_adc_read 0075  
                ?___lwtoft 0028         __size_of_uart_init 0018        __end_of_StartSignal 07FF  
               ??_Lcd_Init 0022                 ??_Lcd_Port 0075                 __stringtab 051E  
               ??_ReadData 0075             _Lcd_Write_Char 0778                    _Lcd_Cmd 0F88  
           ?_CheckResponse 0070                  ?_uart_txc 0070                    ___ftdiv 03D8  
                  ___ftmul 0246                    ___fttol 0490                    ___lwdiv 06FF  
                _ADCvalue1 005F                    ___lwmod 07B1                 ??___ftpack 0025  
          ?_Lcd_Set_Cursor 0022                 ??_adc_init 0075                 ??_adc_read 0020  
                  __ptext1 0F16                    __ptext2 0F3A                    __ptext3 0319  
                  __ptext4 07B1                    __ptext5 06FF                    __ptext6 0FCF  
                  __ptext7 0EF8                    __ptext8 0F22                    __ptext9 0490  
               ??___lwtoft 0075               __size_of_ISR 002B                    _dpowers 052E  
                  _uart_rx 0F01                    _sprintf 0319                    clrloop0 0EF1  
   __end_of_Lcd_Write_Char 07B1       end_of_initialization 0026          __end_of_uart_init 0F52  
               ??_uart_txc 0075                  Lcd_Port@a 0075                _StartSignal 07E5  
                _TRISBbits 0086            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0023  
          ??_CheckResponse 0075          Lcd_Write_String@i 0028                ___ftdiv@exp 0039  
              ___ftmul@exp 0045                  _Lcd_Clear 0F0B           _Lcd_Write_String 06BE  
      start_initialization 0015                __end_of_ISR 0FCF          __size_of_Lcd_Init 0061  
        __size_of_Lcd_Port 001A          __size_of_ReadData 003B                 ?_Lcd_Clear 0070  
          Lcd_Write_Char@a 0022            Lcd_Write_Char@y 0021          __size_of___ftpack 006E  
        __size_of_adc_init 0009          __size_of_adc_read 0031                __pbssCOMMON 0077  
          adc_read@channel 0022                  ___latbits 0002          __size_of___lwtoft 0018  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 0032  
              sprintf@prec 0036           ___lwdiv@dividend 0022           ??_Lcd_Set_Cursor 0023  
                 ?___ftdiv 002B                   ?___ftmul 003B                   ?___fttol 004B  
                 ?___lwdiv 0020                   ?___lwmod 0027          __size_of_uart_txc 000C  
                __pstrings 051E                   ?_uart_rx 0070           ___lwdiv@quotient 0025  
                 ?_sprintf 002C          interrupt_function 0004                  clear_ram0 0EF0  
                 Lcd_Cmd@a 0076                   _GO_nDONE 00FA                ??_Lcd_Clear 0077  
                _uart_init 0F3A               ?_StartSignal 0070                 uart_txc@ch 0075  
              __stringbase 052D           ??_Lcd_Write_Char 0076                   _Lcd_Init 060B  
                 _Lcd_Port 0F52   __end_of_Lcd_Write_String 06FF                   _ReadData 073D  
         __size_of_Lcd_Cmd 001C                 ?_uart_init 0070           __size_of___ftdiv 00B8  
         __size_of___ftmul 00D3           __size_of___fttol 008E           __size_of___lwdiv 003E  
         __size_of___lwmod 0034                   ___ftpack 059D         __end_of__stringtab 052E  
                 _adc_init 0EF8                   _adc_read 0FCF                   ___lwtoft 0F22  
               sprintf@val 0034            ___lwdiv@divisor 0020            ___lwdiv@counter 0024  
                 __ptext10 0246                   __ptext11 03D8                   __ptext20 0F88  
                 __ptext12 059D                   __ptext21 0F52                   __ptext13 07E5  
                 __ptext22 0F6C                   __ptext14 073D                   __ptext23 0FA4  
                 __ptext15 06BE                   __ptext24 0F01                   __ptext16 0778  
                 __ptext17 066C                   __ptext18 060B                   __ptext19 0F0B  
         __size_of_uart_rx 000A           __size_of_sprintf 00BF      __end_of_CheckResponse 0F88  
            __size_of_main 021C                   _uart_txc 0F16         Lcd_Write_Char@temp 0020  
                 intlevel1 0000                  sprintf@ap 0033                  sprintf@sp 0037  
         ___lwmod@dividend 0029                  stringcode 0528                ??_uart_init 0075  
       Lcd_Set_Cursor@temp 0028       __size_of_StartSignal 001A                   sprintf@c 0038  
                 sprintf@f 002C            ___lwmod@divisor 0027            ___lwmod@counter 002B  
                 stringdir 0528                   stringtab 051E  
